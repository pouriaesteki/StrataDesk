generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Owner
  Concierge
  Council
  StrataManager
}

enum ViolationStatus {
  NONE
  WARNING
  VIOLATION
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String    @default("")
  lastName          String    @default("")
  role              UserRole    @default(Concierge)
  unit              String?     // Optional unit number for Owners
  resetToken        String?     // Token for password reset
  resetTokenExpiry  DateTime?   // When the reset token expires
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model VisitorParkingRequest {
  id             String          @id @default(uuid())
  vehicleMake    String
  plateNumber    String
  unit           String
  durationInHours Int
  createdAt      DateTime        @default(now())
  expiresAt      DateTime
  violationStatus ViolationStatus @default(NONE)
  isExpired      Boolean         @default(false)
  violations     Violation[]     // New relation
}

model Violation {
  id                String   @id @default(uuid())
  permitId          String?  // nullable if no permit
  plateNumber       String
  vehicleMake       String
  vehicleColor      String
  stallNumber       String
  photoUrl          String?
  violationType     String   // e.g. "No Permit", "Expired", etc.
  notes             String?
  issuedAt          DateTime @default(now())
  noticeIssued      Boolean  @default(false)
  letter            ViolationLetter?
  permit            VisitorParkingRequest? @relation(fields: [permitId], references: [id])
  inspections       ParkingInspection[] @relation("ViolationToInspection")
}

model ViolationLetter {
  id           String   @id @default(uuid())
  violationId  String   @unique
  pdfUrl       String   // path to PDF file
  createdAt    DateTime @default(now())
  violation    Violation @relation(fields: [violationId], references: [id])
}

model ParkingInspection {
  id           String   @id @default(uuid())
  inspectorId  String   // user id of staff
  inspectedAt  DateTime @default(now())
  plateNumber  String
  vehicleMake  String
  vehicleColor String
  stallNumber  String
  photoUrl     String?
  notes        String?
  violationId  String?  // link if this inspection resulted in a violation
  violation    Violation? @relation("ViolationToInspection", fields: [violationId], references: [id])
}

enum Role {
  Owner
  Concierge
  Council
  PropertyManager
} 
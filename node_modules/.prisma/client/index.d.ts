
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VisitorParkingRequest
 * 
 */
export type VisitorParkingRequest = $Result.DefaultSelection<Prisma.$VisitorParkingRequestPayload>
/**
 * Model Violation
 * 
 */
export type Violation = $Result.DefaultSelection<Prisma.$ViolationPayload>
/**
 * Model ViolationLetter
 * 
 */
export type ViolationLetter = $Result.DefaultSelection<Prisma.$ViolationLetterPayload>
/**
 * Model ParkingInspection
 * 
 */
export type ParkingInspection = $Result.DefaultSelection<Prisma.$ParkingInspectionPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model ElevatorBooking
 * 
 */
export type ElevatorBooking = $Result.DefaultSelection<Prisma.$ElevatorBookingPayload>
/**
 * Model StorageUnit
 * 
 */
export type StorageUnit = $Result.DefaultSelection<Prisma.$StorageUnitPayload>
/**
 * Model StorageWaitlistEntry
 * 
 */
export type StorageWaitlistEntry = $Result.DefaultSelection<Prisma.$StorageWaitlistEntryPayload>
/**
 * Model PatrolLog
 * 
 */
export type PatrolLog = $Result.DefaultSelection<Prisma.$PatrolLogPayload>
/**
 * Model PatrolLogImage
 * 
 */
export type PatrolLogImage = $Result.DefaultSelection<Prisma.$PatrolLogImagePayload>
/**
 * Model RenovationWork
 * 
 */
export type RenovationWork = $Result.DefaultSelection<Prisma.$RenovationWorkPayload>
/**
 * Model RenovationWorkFile
 * 
 */
export type RenovationWorkFile = $Result.DefaultSelection<Prisma.$RenovationWorkFilePayload>
/**
 * Model RegisteredVehicle
 * 
 */
export type RegisteredVehicle = $Result.DefaultSelection<Prisma.$RegisteredVehiclePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ViolationStatus: {
  NONE: 'NONE',
  WARNING: 'WARNING',
  VIOLATION: 'VIOLATION'
};

export type ViolationStatus = (typeof ViolationStatus)[keyof typeof ViolationStatus]


export const ElevatorBookingReason: {
  MOVING: 'MOVING',
  RENO: 'RENO',
  DELIVERY: 'DELIVERY'
};

export type ElevatorBookingReason = (typeof ElevatorBookingReason)[keyof typeof ElevatorBookingReason]


export const StorageStatus: {
  RENTED: 'RENTED',
  VACANT: 'VACANT'
};

export type StorageStatus = (typeof StorageStatus)[keyof typeof StorageStatus]


export const ResidentType: {
  OWNER: 'OWNER',
  RENTER: 'RENTER'
};

export type ResidentType = (typeof ResidentType)[keyof typeof ResidentType]

}

export type ViolationStatus = $Enums.ViolationStatus

export const ViolationStatus: typeof $Enums.ViolationStatus

export type ElevatorBookingReason = $Enums.ElevatorBookingReason

export const ElevatorBookingReason: typeof $Enums.ElevatorBookingReason

export type StorageStatus = $Enums.StorageStatus

export const StorageStatus: typeof $Enums.StorageStatus

export type ResidentType = $Enums.ResidentType

export const ResidentType: typeof $Enums.ResidentType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.visitorParkingRequest`: Exposes CRUD operations for the **VisitorParkingRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisitorParkingRequests
    * const visitorParkingRequests = await prisma.visitorParkingRequest.findMany()
    * ```
    */
  get visitorParkingRequest(): Prisma.VisitorParkingRequestDelegate<ExtArgs>;

  /**
   * `prisma.violation`: Exposes CRUD operations for the **Violation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Violations
    * const violations = await prisma.violation.findMany()
    * ```
    */
  get violation(): Prisma.ViolationDelegate<ExtArgs>;

  /**
   * `prisma.violationLetter`: Exposes CRUD operations for the **ViolationLetter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ViolationLetters
    * const violationLetters = await prisma.violationLetter.findMany()
    * ```
    */
  get violationLetter(): Prisma.ViolationLetterDelegate<ExtArgs>;

  /**
   * `prisma.parkingInspection`: Exposes CRUD operations for the **ParkingInspection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParkingInspections
    * const parkingInspections = await prisma.parkingInspection.findMany()
    * ```
    */
  get parkingInspection(): Prisma.ParkingInspectionDelegate<ExtArgs>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs>;

  /**
   * `prisma.elevatorBooking`: Exposes CRUD operations for the **ElevatorBooking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ElevatorBookings
    * const elevatorBookings = await prisma.elevatorBooking.findMany()
    * ```
    */
  get elevatorBooking(): Prisma.ElevatorBookingDelegate<ExtArgs>;

  /**
   * `prisma.storageUnit`: Exposes CRUD operations for the **StorageUnit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StorageUnits
    * const storageUnits = await prisma.storageUnit.findMany()
    * ```
    */
  get storageUnit(): Prisma.StorageUnitDelegate<ExtArgs>;

  /**
   * `prisma.storageWaitlistEntry`: Exposes CRUD operations for the **StorageWaitlistEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StorageWaitlistEntries
    * const storageWaitlistEntries = await prisma.storageWaitlistEntry.findMany()
    * ```
    */
  get storageWaitlistEntry(): Prisma.StorageWaitlistEntryDelegate<ExtArgs>;

  /**
   * `prisma.patrolLog`: Exposes CRUD operations for the **PatrolLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatrolLogs
    * const patrolLogs = await prisma.patrolLog.findMany()
    * ```
    */
  get patrolLog(): Prisma.PatrolLogDelegate<ExtArgs>;

  /**
   * `prisma.patrolLogImage`: Exposes CRUD operations for the **PatrolLogImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatrolLogImages
    * const patrolLogImages = await prisma.patrolLogImage.findMany()
    * ```
    */
  get patrolLogImage(): Prisma.PatrolLogImageDelegate<ExtArgs>;

  /**
   * `prisma.renovationWork`: Exposes CRUD operations for the **RenovationWork** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RenovationWorks
    * const renovationWorks = await prisma.renovationWork.findMany()
    * ```
    */
  get renovationWork(): Prisma.RenovationWorkDelegate<ExtArgs>;

  /**
   * `prisma.renovationWorkFile`: Exposes CRUD operations for the **RenovationWorkFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RenovationWorkFiles
    * const renovationWorkFiles = await prisma.renovationWorkFile.findMany()
    * ```
    */
  get renovationWorkFile(): Prisma.RenovationWorkFileDelegate<ExtArgs>;

  /**
   * `prisma.registeredVehicle`: Exposes CRUD operations for the **RegisteredVehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegisteredVehicles
    * const registeredVehicles = await prisma.registeredVehicle.findMany()
    * ```
    */
  get registeredVehicle(): Prisma.RegisteredVehicleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    VisitorParkingRequest: 'VisitorParkingRequest',
    Violation: 'Violation',
    ViolationLetter: 'ViolationLetter',
    ParkingInspection: 'ParkingInspection',
    Setting: 'Setting',
    ElevatorBooking: 'ElevatorBooking',
    StorageUnit: 'StorageUnit',
    StorageWaitlistEntry: 'StorageWaitlistEntry',
    PatrolLog: 'PatrolLog',
    PatrolLogImage: 'PatrolLogImage',
    RenovationWork: 'RenovationWork',
    RenovationWorkFile: 'RenovationWorkFile',
    RegisteredVehicle: 'RegisteredVehicle'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "visitorParkingRequest" | "violation" | "violationLetter" | "parkingInspection" | "setting" | "elevatorBooking" | "storageUnit" | "storageWaitlistEntry" | "patrolLog" | "patrolLogImage" | "renovationWork" | "renovationWorkFile" | "registeredVehicle"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VisitorParkingRequest: {
        payload: Prisma.$VisitorParkingRequestPayload<ExtArgs>
        fields: Prisma.VisitorParkingRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisitorParkingRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisitorParkingRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>
          }
          findFirst: {
            args: Prisma.VisitorParkingRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisitorParkingRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>
          }
          findMany: {
            args: Prisma.VisitorParkingRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>[]
          }
          create: {
            args: Prisma.VisitorParkingRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>
          }
          createMany: {
            args: Prisma.VisitorParkingRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VisitorParkingRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>[]
          }
          delete: {
            args: Prisma.VisitorParkingRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>
          }
          update: {
            args: Prisma.VisitorParkingRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>
          }
          deleteMany: {
            args: Prisma.VisitorParkingRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VisitorParkingRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VisitorParkingRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorParkingRequestPayload>
          }
          aggregate: {
            args: Prisma.VisitorParkingRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisitorParkingRequest>
          }
          groupBy: {
            args: Prisma.VisitorParkingRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisitorParkingRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisitorParkingRequestCountArgs<ExtArgs>
            result: $Utils.Optional<VisitorParkingRequestCountAggregateOutputType> | number
          }
        }
      }
      Violation: {
        payload: Prisma.$ViolationPayload<ExtArgs>
        fields: Prisma.ViolationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViolationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViolationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          findFirst: {
            args: Prisma.ViolationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViolationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          findMany: {
            args: Prisma.ViolationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>[]
          }
          create: {
            args: Prisma.ViolationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          createMany: {
            args: Prisma.ViolationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ViolationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>[]
          }
          delete: {
            args: Prisma.ViolationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          update: {
            args: Prisma.ViolationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          deleteMany: {
            args: Prisma.ViolationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ViolationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ViolationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          aggregate: {
            args: Prisma.ViolationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateViolation>
          }
          groupBy: {
            args: Prisma.ViolationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ViolationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViolationCountArgs<ExtArgs>
            result: $Utils.Optional<ViolationCountAggregateOutputType> | number
          }
        }
      }
      ViolationLetter: {
        payload: Prisma.$ViolationLetterPayload<ExtArgs>
        fields: Prisma.ViolationLetterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViolationLetterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViolationLetterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>
          }
          findFirst: {
            args: Prisma.ViolationLetterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViolationLetterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>
          }
          findMany: {
            args: Prisma.ViolationLetterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>[]
          }
          create: {
            args: Prisma.ViolationLetterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>
          }
          createMany: {
            args: Prisma.ViolationLetterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ViolationLetterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>[]
          }
          delete: {
            args: Prisma.ViolationLetterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>
          }
          update: {
            args: Prisma.ViolationLetterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>
          }
          deleteMany: {
            args: Prisma.ViolationLetterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ViolationLetterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ViolationLetterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationLetterPayload>
          }
          aggregate: {
            args: Prisma.ViolationLetterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateViolationLetter>
          }
          groupBy: {
            args: Prisma.ViolationLetterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ViolationLetterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViolationLetterCountArgs<ExtArgs>
            result: $Utils.Optional<ViolationLetterCountAggregateOutputType> | number
          }
        }
      }
      ParkingInspection: {
        payload: Prisma.$ParkingInspectionPayload<ExtArgs>
        fields: Prisma.ParkingInspectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParkingInspectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParkingInspectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>
          }
          findFirst: {
            args: Prisma.ParkingInspectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParkingInspectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>
          }
          findMany: {
            args: Prisma.ParkingInspectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>[]
          }
          create: {
            args: Prisma.ParkingInspectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>
          }
          createMany: {
            args: Prisma.ParkingInspectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParkingInspectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>[]
          }
          delete: {
            args: Prisma.ParkingInspectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>
          }
          update: {
            args: Prisma.ParkingInspectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>
          }
          deleteMany: {
            args: Prisma.ParkingInspectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParkingInspectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParkingInspectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingInspectionPayload>
          }
          aggregate: {
            args: Prisma.ParkingInspectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParkingInspection>
          }
          groupBy: {
            args: Prisma.ParkingInspectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParkingInspectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParkingInspectionCountArgs<ExtArgs>
            result: $Utils.Optional<ParkingInspectionCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      ElevatorBooking: {
        payload: Prisma.$ElevatorBookingPayload<ExtArgs>
        fields: Prisma.ElevatorBookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ElevatorBookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ElevatorBookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>
          }
          findFirst: {
            args: Prisma.ElevatorBookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ElevatorBookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>
          }
          findMany: {
            args: Prisma.ElevatorBookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>[]
          }
          create: {
            args: Prisma.ElevatorBookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>
          }
          createMany: {
            args: Prisma.ElevatorBookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ElevatorBookingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>[]
          }
          delete: {
            args: Prisma.ElevatorBookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>
          }
          update: {
            args: Prisma.ElevatorBookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>
          }
          deleteMany: {
            args: Prisma.ElevatorBookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ElevatorBookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ElevatorBookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElevatorBookingPayload>
          }
          aggregate: {
            args: Prisma.ElevatorBookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateElevatorBooking>
          }
          groupBy: {
            args: Prisma.ElevatorBookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ElevatorBookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ElevatorBookingCountArgs<ExtArgs>
            result: $Utils.Optional<ElevatorBookingCountAggregateOutputType> | number
          }
        }
      }
      StorageUnit: {
        payload: Prisma.$StorageUnitPayload<ExtArgs>
        fields: Prisma.StorageUnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StorageUnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StorageUnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>
          }
          findFirst: {
            args: Prisma.StorageUnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StorageUnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>
          }
          findMany: {
            args: Prisma.StorageUnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>[]
          }
          create: {
            args: Prisma.StorageUnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>
          }
          createMany: {
            args: Prisma.StorageUnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StorageUnitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>[]
          }
          delete: {
            args: Prisma.StorageUnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>
          }
          update: {
            args: Prisma.StorageUnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>
          }
          deleteMany: {
            args: Prisma.StorageUnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StorageUnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StorageUnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUnitPayload>
          }
          aggregate: {
            args: Prisma.StorageUnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStorageUnit>
          }
          groupBy: {
            args: Prisma.StorageUnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<StorageUnitGroupByOutputType>[]
          }
          count: {
            args: Prisma.StorageUnitCountArgs<ExtArgs>
            result: $Utils.Optional<StorageUnitCountAggregateOutputType> | number
          }
        }
      }
      StorageWaitlistEntry: {
        payload: Prisma.$StorageWaitlistEntryPayload<ExtArgs>
        fields: Prisma.StorageWaitlistEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StorageWaitlistEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StorageWaitlistEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>
          }
          findFirst: {
            args: Prisma.StorageWaitlistEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StorageWaitlistEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>
          }
          findMany: {
            args: Prisma.StorageWaitlistEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>[]
          }
          create: {
            args: Prisma.StorageWaitlistEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>
          }
          createMany: {
            args: Prisma.StorageWaitlistEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StorageWaitlistEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>[]
          }
          delete: {
            args: Prisma.StorageWaitlistEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>
          }
          update: {
            args: Prisma.StorageWaitlistEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>
          }
          deleteMany: {
            args: Prisma.StorageWaitlistEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StorageWaitlistEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StorageWaitlistEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageWaitlistEntryPayload>
          }
          aggregate: {
            args: Prisma.StorageWaitlistEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStorageWaitlistEntry>
          }
          groupBy: {
            args: Prisma.StorageWaitlistEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<StorageWaitlistEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.StorageWaitlistEntryCountArgs<ExtArgs>
            result: $Utils.Optional<StorageWaitlistEntryCountAggregateOutputType> | number
          }
        }
      }
      PatrolLog: {
        payload: Prisma.$PatrolLogPayload<ExtArgs>
        fields: Prisma.PatrolLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatrolLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatrolLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>
          }
          findFirst: {
            args: Prisma.PatrolLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatrolLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>
          }
          findMany: {
            args: Prisma.PatrolLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>[]
          }
          create: {
            args: Prisma.PatrolLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>
          }
          createMany: {
            args: Prisma.PatrolLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatrolLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>[]
          }
          delete: {
            args: Prisma.PatrolLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>
          }
          update: {
            args: Prisma.PatrolLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>
          }
          deleteMany: {
            args: Prisma.PatrolLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatrolLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatrolLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogPayload>
          }
          aggregate: {
            args: Prisma.PatrolLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatrolLog>
          }
          groupBy: {
            args: Prisma.PatrolLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatrolLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatrolLogCountArgs<ExtArgs>
            result: $Utils.Optional<PatrolLogCountAggregateOutputType> | number
          }
        }
      }
      PatrolLogImage: {
        payload: Prisma.$PatrolLogImagePayload<ExtArgs>
        fields: Prisma.PatrolLogImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatrolLogImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatrolLogImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>
          }
          findFirst: {
            args: Prisma.PatrolLogImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatrolLogImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>
          }
          findMany: {
            args: Prisma.PatrolLogImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>[]
          }
          create: {
            args: Prisma.PatrolLogImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>
          }
          createMany: {
            args: Prisma.PatrolLogImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatrolLogImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>[]
          }
          delete: {
            args: Prisma.PatrolLogImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>
          }
          update: {
            args: Prisma.PatrolLogImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>
          }
          deleteMany: {
            args: Prisma.PatrolLogImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatrolLogImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatrolLogImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatrolLogImagePayload>
          }
          aggregate: {
            args: Prisma.PatrolLogImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatrolLogImage>
          }
          groupBy: {
            args: Prisma.PatrolLogImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatrolLogImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatrolLogImageCountArgs<ExtArgs>
            result: $Utils.Optional<PatrolLogImageCountAggregateOutputType> | number
          }
        }
      }
      RenovationWork: {
        payload: Prisma.$RenovationWorkPayload<ExtArgs>
        fields: Prisma.RenovationWorkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RenovationWorkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RenovationWorkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>
          }
          findFirst: {
            args: Prisma.RenovationWorkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RenovationWorkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>
          }
          findMany: {
            args: Prisma.RenovationWorkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>[]
          }
          create: {
            args: Prisma.RenovationWorkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>
          }
          createMany: {
            args: Prisma.RenovationWorkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RenovationWorkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>[]
          }
          delete: {
            args: Prisma.RenovationWorkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>
          }
          update: {
            args: Prisma.RenovationWorkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>
          }
          deleteMany: {
            args: Prisma.RenovationWorkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RenovationWorkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RenovationWorkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkPayload>
          }
          aggregate: {
            args: Prisma.RenovationWorkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRenovationWork>
          }
          groupBy: {
            args: Prisma.RenovationWorkGroupByArgs<ExtArgs>
            result: $Utils.Optional<RenovationWorkGroupByOutputType>[]
          }
          count: {
            args: Prisma.RenovationWorkCountArgs<ExtArgs>
            result: $Utils.Optional<RenovationWorkCountAggregateOutputType> | number
          }
        }
      }
      RenovationWorkFile: {
        payload: Prisma.$RenovationWorkFilePayload<ExtArgs>
        fields: Prisma.RenovationWorkFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RenovationWorkFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RenovationWorkFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>
          }
          findFirst: {
            args: Prisma.RenovationWorkFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RenovationWorkFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>
          }
          findMany: {
            args: Prisma.RenovationWorkFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>[]
          }
          create: {
            args: Prisma.RenovationWorkFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>
          }
          createMany: {
            args: Prisma.RenovationWorkFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RenovationWorkFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>[]
          }
          delete: {
            args: Prisma.RenovationWorkFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>
          }
          update: {
            args: Prisma.RenovationWorkFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>
          }
          deleteMany: {
            args: Prisma.RenovationWorkFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RenovationWorkFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RenovationWorkFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenovationWorkFilePayload>
          }
          aggregate: {
            args: Prisma.RenovationWorkFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRenovationWorkFile>
          }
          groupBy: {
            args: Prisma.RenovationWorkFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<RenovationWorkFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.RenovationWorkFileCountArgs<ExtArgs>
            result: $Utils.Optional<RenovationWorkFileCountAggregateOutputType> | number
          }
        }
      }
      RegisteredVehicle: {
        payload: Prisma.$RegisteredVehiclePayload<ExtArgs>
        fields: Prisma.RegisteredVehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegisteredVehicleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegisteredVehicleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>
          }
          findFirst: {
            args: Prisma.RegisteredVehicleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegisteredVehicleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>
          }
          findMany: {
            args: Prisma.RegisteredVehicleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>[]
          }
          create: {
            args: Prisma.RegisteredVehicleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>
          }
          createMany: {
            args: Prisma.RegisteredVehicleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegisteredVehicleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>[]
          }
          delete: {
            args: Prisma.RegisteredVehicleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>
          }
          update: {
            args: Prisma.RegisteredVehicleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>
          }
          deleteMany: {
            args: Prisma.RegisteredVehicleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegisteredVehicleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegisteredVehicleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredVehiclePayload>
          }
          aggregate: {
            args: Prisma.RegisteredVehicleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegisteredVehicle>
          }
          groupBy: {
            args: Prisma.RegisteredVehicleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegisteredVehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegisteredVehicleCountArgs<ExtArgs>
            result: $Utils.Optional<RegisteredVehicleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    patrolLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patrolLogs?: boolean | UserCountOutputTypeCountPatrolLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatrolLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatrolLogWhereInput
  }


  /**
   * Count Type VisitorParkingRequestCountOutputType
   */

  export type VisitorParkingRequestCountOutputType = {
    violations: number
  }

  export type VisitorParkingRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violations?: boolean | VisitorParkingRequestCountOutputTypeCountViolationsArgs
  }

  // Custom InputTypes
  /**
   * VisitorParkingRequestCountOutputType without action
   */
  export type VisitorParkingRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequestCountOutputType
     */
    select?: VisitorParkingRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VisitorParkingRequestCountOutputType without action
   */
  export type VisitorParkingRequestCountOutputTypeCountViolationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViolationWhereInput
  }


  /**
   * Count Type ViolationCountOutputType
   */

  export type ViolationCountOutputType = {
    inspections: number
  }

  export type ViolationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inspections?: boolean | ViolationCountOutputTypeCountInspectionsArgs
  }

  // Custom InputTypes
  /**
   * ViolationCountOutputType without action
   */
  export type ViolationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationCountOutputType
     */
    select?: ViolationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ViolationCountOutputType without action
   */
  export type ViolationCountOutputTypeCountInspectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingInspectionWhereInput
  }


  /**
   * Count Type PatrolLogCountOutputType
   */

  export type PatrolLogCountOutputType = {
    images: number
  }

  export type PatrolLogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | PatrolLogCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * PatrolLogCountOutputType without action
   */
  export type PatrolLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogCountOutputType
     */
    select?: PatrolLogCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatrolLogCountOutputType without action
   */
  export type PatrolLogCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatrolLogImageWhereInput
  }


  /**
   * Count Type RenovationWorkCountOutputType
   */

  export type RenovationWorkCountOutputType = {
    files: number
  }

  export type RenovationWorkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | RenovationWorkCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * RenovationWorkCountOutputType without action
   */
  export type RenovationWorkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkCountOutputType
     */
    select?: RenovationWorkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RenovationWorkCountOutputType without action
   */
  export type RenovationWorkCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenovationWorkFileWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    unit: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    unit: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    unit: number
    resetToken: number
    resetTokenExpiry: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    unit?: true
    resetToken?: true
    resetTokenExpiry?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    unit?: true
    resetToken?: true
    resetTokenExpiry?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    unit?: true
    resetToken?: true
    resetTokenExpiry?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    unit: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    unit?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patrolLogs?: boolean | User$patrolLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    unit?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    unit?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patrolLogs?: boolean | User$patrolLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      patrolLogs: Prisma.$PatrolLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      unit: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patrolLogs<T extends User$patrolLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$patrolLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly unit: FieldRef<"User", 'String'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.patrolLogs
   */
  export type User$patrolLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    where?: PatrolLogWhereInput
    orderBy?: PatrolLogOrderByWithRelationInput | PatrolLogOrderByWithRelationInput[]
    cursor?: PatrolLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatrolLogScalarFieldEnum | PatrolLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VisitorParkingRequest
   */

  export type AggregateVisitorParkingRequest = {
    _count: VisitorParkingRequestCountAggregateOutputType | null
    _avg: VisitorParkingRequestAvgAggregateOutputType | null
    _sum: VisitorParkingRequestSumAggregateOutputType | null
    _min: VisitorParkingRequestMinAggregateOutputType | null
    _max: VisitorParkingRequestMaxAggregateOutputType | null
  }

  export type VisitorParkingRequestAvgAggregateOutputType = {
    durationInHours: number | null
  }

  export type VisitorParkingRequestSumAggregateOutputType = {
    durationInHours: number | null
  }

  export type VisitorParkingRequestMinAggregateOutputType = {
    id: string | null
    vehicleMake: string | null
    plateNumber: string | null
    unit: string | null
    durationInHours: number | null
    createdAt: Date | null
    expiresAt: Date | null
    violationStatus: $Enums.ViolationStatus | null
    isExpired: boolean | null
  }

  export type VisitorParkingRequestMaxAggregateOutputType = {
    id: string | null
    vehicleMake: string | null
    plateNumber: string | null
    unit: string | null
    durationInHours: number | null
    createdAt: Date | null
    expiresAt: Date | null
    violationStatus: $Enums.ViolationStatus | null
    isExpired: boolean | null
  }

  export type VisitorParkingRequestCountAggregateOutputType = {
    id: number
    vehicleMake: number
    plateNumber: number
    unit: number
    durationInHours: number
    createdAt: number
    expiresAt: number
    violationStatus: number
    isExpired: number
    _all: number
  }


  export type VisitorParkingRequestAvgAggregateInputType = {
    durationInHours?: true
  }

  export type VisitorParkingRequestSumAggregateInputType = {
    durationInHours?: true
  }

  export type VisitorParkingRequestMinAggregateInputType = {
    id?: true
    vehicleMake?: true
    plateNumber?: true
    unit?: true
    durationInHours?: true
    createdAt?: true
    expiresAt?: true
    violationStatus?: true
    isExpired?: true
  }

  export type VisitorParkingRequestMaxAggregateInputType = {
    id?: true
    vehicleMake?: true
    plateNumber?: true
    unit?: true
    durationInHours?: true
    createdAt?: true
    expiresAt?: true
    violationStatus?: true
    isExpired?: true
  }

  export type VisitorParkingRequestCountAggregateInputType = {
    id?: true
    vehicleMake?: true
    plateNumber?: true
    unit?: true
    durationInHours?: true
    createdAt?: true
    expiresAt?: true
    violationStatus?: true
    isExpired?: true
    _all?: true
  }

  export type VisitorParkingRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisitorParkingRequest to aggregate.
     */
    where?: VisitorParkingRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitorParkingRequests to fetch.
     */
    orderBy?: VisitorParkingRequestOrderByWithRelationInput | VisitorParkingRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisitorParkingRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitorParkingRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitorParkingRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisitorParkingRequests
    **/
    _count?: true | VisitorParkingRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisitorParkingRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisitorParkingRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitorParkingRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitorParkingRequestMaxAggregateInputType
  }

  export type GetVisitorParkingRequestAggregateType<T extends VisitorParkingRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateVisitorParkingRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisitorParkingRequest[P]>
      : GetScalarType<T[P], AggregateVisitorParkingRequest[P]>
  }




  export type VisitorParkingRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisitorParkingRequestWhereInput
    orderBy?: VisitorParkingRequestOrderByWithAggregationInput | VisitorParkingRequestOrderByWithAggregationInput[]
    by: VisitorParkingRequestScalarFieldEnum[] | VisitorParkingRequestScalarFieldEnum
    having?: VisitorParkingRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitorParkingRequestCountAggregateInputType | true
    _avg?: VisitorParkingRequestAvgAggregateInputType
    _sum?: VisitorParkingRequestSumAggregateInputType
    _min?: VisitorParkingRequestMinAggregateInputType
    _max?: VisitorParkingRequestMaxAggregateInputType
  }

  export type VisitorParkingRequestGroupByOutputType = {
    id: string
    vehicleMake: string
    plateNumber: string
    unit: string
    durationInHours: number
    createdAt: Date
    expiresAt: Date
    violationStatus: $Enums.ViolationStatus
    isExpired: boolean
    _count: VisitorParkingRequestCountAggregateOutputType | null
    _avg: VisitorParkingRequestAvgAggregateOutputType | null
    _sum: VisitorParkingRequestSumAggregateOutputType | null
    _min: VisitorParkingRequestMinAggregateOutputType | null
    _max: VisitorParkingRequestMaxAggregateOutputType | null
  }

  type GetVisitorParkingRequestGroupByPayload<T extends VisitorParkingRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisitorParkingRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitorParkingRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitorParkingRequestGroupByOutputType[P]>
            : GetScalarType<T[P], VisitorParkingRequestGroupByOutputType[P]>
        }
      >
    >


  export type VisitorParkingRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vehicleMake?: boolean
    plateNumber?: boolean
    unit?: boolean
    durationInHours?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    violationStatus?: boolean
    isExpired?: boolean
    violations?: boolean | VisitorParkingRequest$violationsArgs<ExtArgs>
    _count?: boolean | VisitorParkingRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visitorParkingRequest"]>

  export type VisitorParkingRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vehicleMake?: boolean
    plateNumber?: boolean
    unit?: boolean
    durationInHours?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    violationStatus?: boolean
    isExpired?: boolean
  }, ExtArgs["result"]["visitorParkingRequest"]>

  export type VisitorParkingRequestSelectScalar = {
    id?: boolean
    vehicleMake?: boolean
    plateNumber?: boolean
    unit?: boolean
    durationInHours?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    violationStatus?: boolean
    isExpired?: boolean
  }

  export type VisitorParkingRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violations?: boolean | VisitorParkingRequest$violationsArgs<ExtArgs>
    _count?: boolean | VisitorParkingRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VisitorParkingRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VisitorParkingRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VisitorParkingRequest"
    objects: {
      violations: Prisma.$ViolationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      vehicleMake: string
      plateNumber: string
      unit: string
      durationInHours: number
      createdAt: Date
      expiresAt: Date
      violationStatus: $Enums.ViolationStatus
      isExpired: boolean
    }, ExtArgs["result"]["visitorParkingRequest"]>
    composites: {}
  }

  type VisitorParkingRequestGetPayload<S extends boolean | null | undefined | VisitorParkingRequestDefaultArgs> = $Result.GetResult<Prisma.$VisitorParkingRequestPayload, S>

  type VisitorParkingRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VisitorParkingRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VisitorParkingRequestCountAggregateInputType | true
    }

  export interface VisitorParkingRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VisitorParkingRequest'], meta: { name: 'VisitorParkingRequest' } }
    /**
     * Find zero or one VisitorParkingRequest that matches the filter.
     * @param {VisitorParkingRequestFindUniqueArgs} args - Arguments to find a VisitorParkingRequest
     * @example
     * // Get one VisitorParkingRequest
     * const visitorParkingRequest = await prisma.visitorParkingRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VisitorParkingRequestFindUniqueArgs>(args: SelectSubset<T, VisitorParkingRequestFindUniqueArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VisitorParkingRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VisitorParkingRequestFindUniqueOrThrowArgs} args - Arguments to find a VisitorParkingRequest
     * @example
     * // Get one VisitorParkingRequest
     * const visitorParkingRequest = await prisma.visitorParkingRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VisitorParkingRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, VisitorParkingRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VisitorParkingRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestFindFirstArgs} args - Arguments to find a VisitorParkingRequest
     * @example
     * // Get one VisitorParkingRequest
     * const visitorParkingRequest = await prisma.visitorParkingRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VisitorParkingRequestFindFirstArgs>(args?: SelectSubset<T, VisitorParkingRequestFindFirstArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VisitorParkingRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestFindFirstOrThrowArgs} args - Arguments to find a VisitorParkingRequest
     * @example
     * // Get one VisitorParkingRequest
     * const visitorParkingRequest = await prisma.visitorParkingRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VisitorParkingRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, VisitorParkingRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VisitorParkingRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisitorParkingRequests
     * const visitorParkingRequests = await prisma.visitorParkingRequest.findMany()
     * 
     * // Get first 10 VisitorParkingRequests
     * const visitorParkingRequests = await prisma.visitorParkingRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitorParkingRequestWithIdOnly = await prisma.visitorParkingRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VisitorParkingRequestFindManyArgs>(args?: SelectSubset<T, VisitorParkingRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VisitorParkingRequest.
     * @param {VisitorParkingRequestCreateArgs} args - Arguments to create a VisitorParkingRequest.
     * @example
     * // Create one VisitorParkingRequest
     * const VisitorParkingRequest = await prisma.visitorParkingRequest.create({
     *   data: {
     *     // ... data to create a VisitorParkingRequest
     *   }
     * })
     * 
     */
    create<T extends VisitorParkingRequestCreateArgs>(args: SelectSubset<T, VisitorParkingRequestCreateArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VisitorParkingRequests.
     * @param {VisitorParkingRequestCreateManyArgs} args - Arguments to create many VisitorParkingRequests.
     * @example
     * // Create many VisitorParkingRequests
     * const visitorParkingRequest = await prisma.visitorParkingRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VisitorParkingRequestCreateManyArgs>(args?: SelectSubset<T, VisitorParkingRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VisitorParkingRequests and returns the data saved in the database.
     * @param {VisitorParkingRequestCreateManyAndReturnArgs} args - Arguments to create many VisitorParkingRequests.
     * @example
     * // Create many VisitorParkingRequests
     * const visitorParkingRequest = await prisma.visitorParkingRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VisitorParkingRequests and only return the `id`
     * const visitorParkingRequestWithIdOnly = await prisma.visitorParkingRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VisitorParkingRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, VisitorParkingRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VisitorParkingRequest.
     * @param {VisitorParkingRequestDeleteArgs} args - Arguments to delete one VisitorParkingRequest.
     * @example
     * // Delete one VisitorParkingRequest
     * const VisitorParkingRequest = await prisma.visitorParkingRequest.delete({
     *   where: {
     *     // ... filter to delete one VisitorParkingRequest
     *   }
     * })
     * 
     */
    delete<T extends VisitorParkingRequestDeleteArgs>(args: SelectSubset<T, VisitorParkingRequestDeleteArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VisitorParkingRequest.
     * @param {VisitorParkingRequestUpdateArgs} args - Arguments to update one VisitorParkingRequest.
     * @example
     * // Update one VisitorParkingRequest
     * const visitorParkingRequest = await prisma.visitorParkingRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VisitorParkingRequestUpdateArgs>(args: SelectSubset<T, VisitorParkingRequestUpdateArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VisitorParkingRequests.
     * @param {VisitorParkingRequestDeleteManyArgs} args - Arguments to filter VisitorParkingRequests to delete.
     * @example
     * // Delete a few VisitorParkingRequests
     * const { count } = await prisma.visitorParkingRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VisitorParkingRequestDeleteManyArgs>(args?: SelectSubset<T, VisitorParkingRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisitorParkingRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisitorParkingRequests
     * const visitorParkingRequest = await prisma.visitorParkingRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VisitorParkingRequestUpdateManyArgs>(args: SelectSubset<T, VisitorParkingRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisitorParkingRequest.
     * @param {VisitorParkingRequestUpsertArgs} args - Arguments to update or create a VisitorParkingRequest.
     * @example
     * // Update or create a VisitorParkingRequest
     * const visitorParkingRequest = await prisma.visitorParkingRequest.upsert({
     *   create: {
     *     // ... data to create a VisitorParkingRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisitorParkingRequest we want to update
     *   }
     * })
     */
    upsert<T extends VisitorParkingRequestUpsertArgs>(args: SelectSubset<T, VisitorParkingRequestUpsertArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VisitorParkingRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestCountArgs} args - Arguments to filter VisitorParkingRequests to count.
     * @example
     * // Count the number of VisitorParkingRequests
     * const count = await prisma.visitorParkingRequest.count({
     *   where: {
     *     // ... the filter for the VisitorParkingRequests we want to count
     *   }
     * })
    **/
    count<T extends VisitorParkingRequestCountArgs>(
      args?: Subset<T, VisitorParkingRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitorParkingRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisitorParkingRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitorParkingRequestAggregateArgs>(args: Subset<T, VisitorParkingRequestAggregateArgs>): Prisma.PrismaPromise<GetVisitorParkingRequestAggregateType<T>>

    /**
     * Group by VisitorParkingRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorParkingRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisitorParkingRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisitorParkingRequestGroupByArgs['orderBy'] }
        : { orderBy?: VisitorParkingRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisitorParkingRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitorParkingRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VisitorParkingRequest model
   */
  readonly fields: VisitorParkingRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VisitorParkingRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VisitorParkingRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    violations<T extends VisitorParkingRequest$violationsArgs<ExtArgs> = {}>(args?: Subset<T, VisitorParkingRequest$violationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VisitorParkingRequest model
   */ 
  interface VisitorParkingRequestFieldRefs {
    readonly id: FieldRef<"VisitorParkingRequest", 'String'>
    readonly vehicleMake: FieldRef<"VisitorParkingRequest", 'String'>
    readonly plateNumber: FieldRef<"VisitorParkingRequest", 'String'>
    readonly unit: FieldRef<"VisitorParkingRequest", 'String'>
    readonly durationInHours: FieldRef<"VisitorParkingRequest", 'Int'>
    readonly createdAt: FieldRef<"VisitorParkingRequest", 'DateTime'>
    readonly expiresAt: FieldRef<"VisitorParkingRequest", 'DateTime'>
    readonly violationStatus: FieldRef<"VisitorParkingRequest", 'ViolationStatus'>
    readonly isExpired: FieldRef<"VisitorParkingRequest", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * VisitorParkingRequest findUnique
   */
  export type VisitorParkingRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * Filter, which VisitorParkingRequest to fetch.
     */
    where: VisitorParkingRequestWhereUniqueInput
  }

  /**
   * VisitorParkingRequest findUniqueOrThrow
   */
  export type VisitorParkingRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * Filter, which VisitorParkingRequest to fetch.
     */
    where: VisitorParkingRequestWhereUniqueInput
  }

  /**
   * VisitorParkingRequest findFirst
   */
  export type VisitorParkingRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * Filter, which VisitorParkingRequest to fetch.
     */
    where?: VisitorParkingRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitorParkingRequests to fetch.
     */
    orderBy?: VisitorParkingRequestOrderByWithRelationInput | VisitorParkingRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisitorParkingRequests.
     */
    cursor?: VisitorParkingRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitorParkingRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitorParkingRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisitorParkingRequests.
     */
    distinct?: VisitorParkingRequestScalarFieldEnum | VisitorParkingRequestScalarFieldEnum[]
  }

  /**
   * VisitorParkingRequest findFirstOrThrow
   */
  export type VisitorParkingRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * Filter, which VisitorParkingRequest to fetch.
     */
    where?: VisitorParkingRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitorParkingRequests to fetch.
     */
    orderBy?: VisitorParkingRequestOrderByWithRelationInput | VisitorParkingRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisitorParkingRequests.
     */
    cursor?: VisitorParkingRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitorParkingRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitorParkingRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisitorParkingRequests.
     */
    distinct?: VisitorParkingRequestScalarFieldEnum | VisitorParkingRequestScalarFieldEnum[]
  }

  /**
   * VisitorParkingRequest findMany
   */
  export type VisitorParkingRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * Filter, which VisitorParkingRequests to fetch.
     */
    where?: VisitorParkingRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisitorParkingRequests to fetch.
     */
    orderBy?: VisitorParkingRequestOrderByWithRelationInput | VisitorParkingRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisitorParkingRequests.
     */
    cursor?: VisitorParkingRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisitorParkingRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisitorParkingRequests.
     */
    skip?: number
    distinct?: VisitorParkingRequestScalarFieldEnum | VisitorParkingRequestScalarFieldEnum[]
  }

  /**
   * VisitorParkingRequest create
   */
  export type VisitorParkingRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a VisitorParkingRequest.
     */
    data: XOR<VisitorParkingRequestCreateInput, VisitorParkingRequestUncheckedCreateInput>
  }

  /**
   * VisitorParkingRequest createMany
   */
  export type VisitorParkingRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VisitorParkingRequests.
     */
    data: VisitorParkingRequestCreateManyInput | VisitorParkingRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VisitorParkingRequest createManyAndReturn
   */
  export type VisitorParkingRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VisitorParkingRequests.
     */
    data: VisitorParkingRequestCreateManyInput | VisitorParkingRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VisitorParkingRequest update
   */
  export type VisitorParkingRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a VisitorParkingRequest.
     */
    data: XOR<VisitorParkingRequestUpdateInput, VisitorParkingRequestUncheckedUpdateInput>
    /**
     * Choose, which VisitorParkingRequest to update.
     */
    where: VisitorParkingRequestWhereUniqueInput
  }

  /**
   * VisitorParkingRequest updateMany
   */
  export type VisitorParkingRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VisitorParkingRequests.
     */
    data: XOR<VisitorParkingRequestUpdateManyMutationInput, VisitorParkingRequestUncheckedUpdateManyInput>
    /**
     * Filter which VisitorParkingRequests to update
     */
    where?: VisitorParkingRequestWhereInput
  }

  /**
   * VisitorParkingRequest upsert
   */
  export type VisitorParkingRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the VisitorParkingRequest to update in case it exists.
     */
    where: VisitorParkingRequestWhereUniqueInput
    /**
     * In case the VisitorParkingRequest found by the `where` argument doesn't exist, create a new VisitorParkingRequest with this data.
     */
    create: XOR<VisitorParkingRequestCreateInput, VisitorParkingRequestUncheckedCreateInput>
    /**
     * In case the VisitorParkingRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisitorParkingRequestUpdateInput, VisitorParkingRequestUncheckedUpdateInput>
  }

  /**
   * VisitorParkingRequest delete
   */
  export type VisitorParkingRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    /**
     * Filter which VisitorParkingRequest to delete.
     */
    where: VisitorParkingRequestWhereUniqueInput
  }

  /**
   * VisitorParkingRequest deleteMany
   */
  export type VisitorParkingRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisitorParkingRequests to delete
     */
    where?: VisitorParkingRequestWhereInput
  }

  /**
   * VisitorParkingRequest.violations
   */
  export type VisitorParkingRequest$violationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    where?: ViolationWhereInput
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    cursor?: ViolationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * VisitorParkingRequest without action
   */
  export type VisitorParkingRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
  }


  /**
   * Model Violation
   */

  export type AggregateViolation = {
    _count: ViolationCountAggregateOutputType | null
    _min: ViolationMinAggregateOutputType | null
    _max: ViolationMaxAggregateOutputType | null
  }

  export type ViolationMinAggregateOutputType = {
    id: string | null
    permitId: string | null
    plateNumber: string | null
    vehicleMake: string | null
    vehicleColor: string | null
    stallNumber: string | null
    photoUrl: string | null
    violationType: string | null
    notes: string | null
    issuedAt: Date | null
    noticeIssued: boolean | null
  }

  export type ViolationMaxAggregateOutputType = {
    id: string | null
    permitId: string | null
    plateNumber: string | null
    vehicleMake: string | null
    vehicleColor: string | null
    stallNumber: string | null
    photoUrl: string | null
    violationType: string | null
    notes: string | null
    issuedAt: Date | null
    noticeIssued: boolean | null
  }

  export type ViolationCountAggregateOutputType = {
    id: number
    permitId: number
    plateNumber: number
    vehicleMake: number
    vehicleColor: number
    stallNumber: number
    photoUrl: number
    violationType: number
    notes: number
    issuedAt: number
    noticeIssued: number
    _all: number
  }


  export type ViolationMinAggregateInputType = {
    id?: true
    permitId?: true
    plateNumber?: true
    vehicleMake?: true
    vehicleColor?: true
    stallNumber?: true
    photoUrl?: true
    violationType?: true
    notes?: true
    issuedAt?: true
    noticeIssued?: true
  }

  export type ViolationMaxAggregateInputType = {
    id?: true
    permitId?: true
    plateNumber?: true
    vehicleMake?: true
    vehicleColor?: true
    stallNumber?: true
    photoUrl?: true
    violationType?: true
    notes?: true
    issuedAt?: true
    noticeIssued?: true
  }

  export type ViolationCountAggregateInputType = {
    id?: true
    permitId?: true
    plateNumber?: true
    vehicleMake?: true
    vehicleColor?: true
    stallNumber?: true
    photoUrl?: true
    violationType?: true
    notes?: true
    issuedAt?: true
    noticeIssued?: true
    _all?: true
  }

  export type ViolationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Violation to aggregate.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Violations
    **/
    _count?: true | ViolationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViolationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViolationMaxAggregateInputType
  }

  export type GetViolationAggregateType<T extends ViolationAggregateArgs> = {
        [P in keyof T & keyof AggregateViolation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViolation[P]>
      : GetScalarType<T[P], AggregateViolation[P]>
  }




  export type ViolationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViolationWhereInput
    orderBy?: ViolationOrderByWithAggregationInput | ViolationOrderByWithAggregationInput[]
    by: ViolationScalarFieldEnum[] | ViolationScalarFieldEnum
    having?: ViolationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViolationCountAggregateInputType | true
    _min?: ViolationMinAggregateInputType
    _max?: ViolationMaxAggregateInputType
  }

  export type ViolationGroupByOutputType = {
    id: string
    permitId: string | null
    plateNumber: string
    vehicleMake: string
    vehicleColor: string | null
    stallNumber: string | null
    photoUrl: string | null
    violationType: string
    notes: string | null
    issuedAt: Date
    noticeIssued: boolean
    _count: ViolationCountAggregateOutputType | null
    _min: ViolationMinAggregateOutputType | null
    _max: ViolationMaxAggregateOutputType | null
  }

  type GetViolationGroupByPayload<T extends ViolationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViolationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViolationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViolationGroupByOutputType[P]>
            : GetScalarType<T[P], ViolationGroupByOutputType[P]>
        }
      >
    >


  export type ViolationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    permitId?: boolean
    plateNumber?: boolean
    vehicleMake?: boolean
    vehicleColor?: boolean
    stallNumber?: boolean
    photoUrl?: boolean
    violationType?: boolean
    notes?: boolean
    issuedAt?: boolean
    noticeIssued?: boolean
    letter?: boolean | Violation$letterArgs<ExtArgs>
    permit?: boolean | Violation$permitArgs<ExtArgs>
    inspections?: boolean | Violation$inspectionsArgs<ExtArgs>
    _count?: boolean | ViolationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["violation"]>

  export type ViolationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    permitId?: boolean
    plateNumber?: boolean
    vehicleMake?: boolean
    vehicleColor?: boolean
    stallNumber?: boolean
    photoUrl?: boolean
    violationType?: boolean
    notes?: boolean
    issuedAt?: boolean
    noticeIssued?: boolean
    permit?: boolean | Violation$permitArgs<ExtArgs>
  }, ExtArgs["result"]["violation"]>

  export type ViolationSelectScalar = {
    id?: boolean
    permitId?: boolean
    plateNumber?: boolean
    vehicleMake?: boolean
    vehicleColor?: boolean
    stallNumber?: boolean
    photoUrl?: boolean
    violationType?: boolean
    notes?: boolean
    issuedAt?: boolean
    noticeIssued?: boolean
  }

  export type ViolationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    letter?: boolean | Violation$letterArgs<ExtArgs>
    permit?: boolean | Violation$permitArgs<ExtArgs>
    inspections?: boolean | Violation$inspectionsArgs<ExtArgs>
    _count?: boolean | ViolationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ViolationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permit?: boolean | Violation$permitArgs<ExtArgs>
  }

  export type $ViolationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Violation"
    objects: {
      letter: Prisma.$ViolationLetterPayload<ExtArgs> | null
      permit: Prisma.$VisitorParkingRequestPayload<ExtArgs> | null
      inspections: Prisma.$ParkingInspectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      permitId: string | null
      plateNumber: string
      vehicleMake: string
      vehicleColor: string | null
      stallNumber: string | null
      photoUrl: string | null
      violationType: string
      notes: string | null
      issuedAt: Date
      noticeIssued: boolean
    }, ExtArgs["result"]["violation"]>
    composites: {}
  }

  type ViolationGetPayload<S extends boolean | null | undefined | ViolationDefaultArgs> = $Result.GetResult<Prisma.$ViolationPayload, S>

  type ViolationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ViolationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ViolationCountAggregateInputType | true
    }

  export interface ViolationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Violation'], meta: { name: 'Violation' } }
    /**
     * Find zero or one Violation that matches the filter.
     * @param {ViolationFindUniqueArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ViolationFindUniqueArgs>(args: SelectSubset<T, ViolationFindUniqueArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Violation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ViolationFindUniqueOrThrowArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ViolationFindUniqueOrThrowArgs>(args: SelectSubset<T, ViolationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Violation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationFindFirstArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ViolationFindFirstArgs>(args?: SelectSubset<T, ViolationFindFirstArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Violation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationFindFirstOrThrowArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ViolationFindFirstOrThrowArgs>(args?: SelectSubset<T, ViolationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Violations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Violations
     * const violations = await prisma.violation.findMany()
     * 
     * // Get first 10 Violations
     * const violations = await prisma.violation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const violationWithIdOnly = await prisma.violation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ViolationFindManyArgs>(args?: SelectSubset<T, ViolationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Violation.
     * @param {ViolationCreateArgs} args - Arguments to create a Violation.
     * @example
     * // Create one Violation
     * const Violation = await prisma.violation.create({
     *   data: {
     *     // ... data to create a Violation
     *   }
     * })
     * 
     */
    create<T extends ViolationCreateArgs>(args: SelectSubset<T, ViolationCreateArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Violations.
     * @param {ViolationCreateManyArgs} args - Arguments to create many Violations.
     * @example
     * // Create many Violations
     * const violation = await prisma.violation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ViolationCreateManyArgs>(args?: SelectSubset<T, ViolationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Violations and returns the data saved in the database.
     * @param {ViolationCreateManyAndReturnArgs} args - Arguments to create many Violations.
     * @example
     * // Create many Violations
     * const violation = await prisma.violation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Violations and only return the `id`
     * const violationWithIdOnly = await prisma.violation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ViolationCreateManyAndReturnArgs>(args?: SelectSubset<T, ViolationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Violation.
     * @param {ViolationDeleteArgs} args - Arguments to delete one Violation.
     * @example
     * // Delete one Violation
     * const Violation = await prisma.violation.delete({
     *   where: {
     *     // ... filter to delete one Violation
     *   }
     * })
     * 
     */
    delete<T extends ViolationDeleteArgs>(args: SelectSubset<T, ViolationDeleteArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Violation.
     * @param {ViolationUpdateArgs} args - Arguments to update one Violation.
     * @example
     * // Update one Violation
     * const violation = await prisma.violation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ViolationUpdateArgs>(args: SelectSubset<T, ViolationUpdateArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Violations.
     * @param {ViolationDeleteManyArgs} args - Arguments to filter Violations to delete.
     * @example
     * // Delete a few Violations
     * const { count } = await prisma.violation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ViolationDeleteManyArgs>(args?: SelectSubset<T, ViolationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Violations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Violations
     * const violation = await prisma.violation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ViolationUpdateManyArgs>(args: SelectSubset<T, ViolationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Violation.
     * @param {ViolationUpsertArgs} args - Arguments to update or create a Violation.
     * @example
     * // Update or create a Violation
     * const violation = await prisma.violation.upsert({
     *   create: {
     *     // ... data to create a Violation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Violation we want to update
     *   }
     * })
     */
    upsert<T extends ViolationUpsertArgs>(args: SelectSubset<T, ViolationUpsertArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Violations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationCountArgs} args - Arguments to filter Violations to count.
     * @example
     * // Count the number of Violations
     * const count = await prisma.violation.count({
     *   where: {
     *     // ... the filter for the Violations we want to count
     *   }
     * })
    **/
    count<T extends ViolationCountArgs>(
      args?: Subset<T, ViolationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViolationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Violation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViolationAggregateArgs>(args: Subset<T, ViolationAggregateArgs>): Prisma.PrismaPromise<GetViolationAggregateType<T>>

    /**
     * Group by Violation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViolationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViolationGroupByArgs['orderBy'] }
        : { orderBy?: ViolationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViolationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViolationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Violation model
   */
  readonly fields: ViolationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Violation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViolationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    letter<T extends Violation$letterArgs<ExtArgs> = {}>(args?: Subset<T, Violation$letterArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    permit<T extends Violation$permitArgs<ExtArgs> = {}>(args?: Subset<T, Violation$permitArgs<ExtArgs>>): Prisma__VisitorParkingRequestClient<$Result.GetResult<Prisma.$VisitorParkingRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    inspections<T extends Violation$inspectionsArgs<ExtArgs> = {}>(args?: Subset<T, Violation$inspectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Violation model
   */ 
  interface ViolationFieldRefs {
    readonly id: FieldRef<"Violation", 'String'>
    readonly permitId: FieldRef<"Violation", 'String'>
    readonly plateNumber: FieldRef<"Violation", 'String'>
    readonly vehicleMake: FieldRef<"Violation", 'String'>
    readonly vehicleColor: FieldRef<"Violation", 'String'>
    readonly stallNumber: FieldRef<"Violation", 'String'>
    readonly photoUrl: FieldRef<"Violation", 'String'>
    readonly violationType: FieldRef<"Violation", 'String'>
    readonly notes: FieldRef<"Violation", 'String'>
    readonly issuedAt: FieldRef<"Violation", 'DateTime'>
    readonly noticeIssued: FieldRef<"Violation", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Violation findUnique
   */
  export type ViolationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation findUniqueOrThrow
   */
  export type ViolationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation findFirst
   */
  export type ViolationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Violations.
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Violations.
     */
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * Violation findFirstOrThrow
   */
  export type ViolationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Violations.
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Violations.
     */
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * Violation findMany
   */
  export type ViolationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violations to fetch.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Violations.
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * Violation create
   */
  export type ViolationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * The data needed to create a Violation.
     */
    data: XOR<ViolationCreateInput, ViolationUncheckedCreateInput>
  }

  /**
   * Violation createMany
   */
  export type ViolationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Violations.
     */
    data: ViolationCreateManyInput | ViolationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Violation createManyAndReturn
   */
  export type ViolationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Violations.
     */
    data: ViolationCreateManyInput | ViolationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Violation update
   */
  export type ViolationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * The data needed to update a Violation.
     */
    data: XOR<ViolationUpdateInput, ViolationUncheckedUpdateInput>
    /**
     * Choose, which Violation to update.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation updateMany
   */
  export type ViolationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Violations.
     */
    data: XOR<ViolationUpdateManyMutationInput, ViolationUncheckedUpdateManyInput>
    /**
     * Filter which Violations to update
     */
    where?: ViolationWhereInput
  }

  /**
   * Violation upsert
   */
  export type ViolationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * The filter to search for the Violation to update in case it exists.
     */
    where: ViolationWhereUniqueInput
    /**
     * In case the Violation found by the `where` argument doesn't exist, create a new Violation with this data.
     */
    create: XOR<ViolationCreateInput, ViolationUncheckedCreateInput>
    /**
     * In case the Violation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViolationUpdateInput, ViolationUncheckedUpdateInput>
  }

  /**
   * Violation delete
   */
  export type ViolationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter which Violation to delete.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation deleteMany
   */
  export type ViolationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Violations to delete
     */
    where?: ViolationWhereInput
  }

  /**
   * Violation.letter
   */
  export type Violation$letterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    where?: ViolationLetterWhereInput
  }

  /**
   * Violation.permit
   */
  export type Violation$permitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisitorParkingRequest
     */
    select?: VisitorParkingRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisitorParkingRequestInclude<ExtArgs> | null
    where?: VisitorParkingRequestWhereInput
  }

  /**
   * Violation.inspections
   */
  export type Violation$inspectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    where?: ParkingInspectionWhereInput
    orderBy?: ParkingInspectionOrderByWithRelationInput | ParkingInspectionOrderByWithRelationInput[]
    cursor?: ParkingInspectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParkingInspectionScalarFieldEnum | ParkingInspectionScalarFieldEnum[]
  }

  /**
   * Violation without action
   */
  export type ViolationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
  }


  /**
   * Model ViolationLetter
   */

  export type AggregateViolationLetter = {
    _count: ViolationLetterCountAggregateOutputType | null
    _min: ViolationLetterMinAggregateOutputType | null
    _max: ViolationLetterMaxAggregateOutputType | null
  }

  export type ViolationLetterMinAggregateOutputType = {
    id: string | null
    violationId: string | null
    pdfUrl: string | null
    createdAt: Date | null
  }

  export type ViolationLetterMaxAggregateOutputType = {
    id: string | null
    violationId: string | null
    pdfUrl: string | null
    createdAt: Date | null
  }

  export type ViolationLetterCountAggregateOutputType = {
    id: number
    violationId: number
    pdfUrl: number
    createdAt: number
    _all: number
  }


  export type ViolationLetterMinAggregateInputType = {
    id?: true
    violationId?: true
    pdfUrl?: true
    createdAt?: true
  }

  export type ViolationLetterMaxAggregateInputType = {
    id?: true
    violationId?: true
    pdfUrl?: true
    createdAt?: true
  }

  export type ViolationLetterCountAggregateInputType = {
    id?: true
    violationId?: true
    pdfUrl?: true
    createdAt?: true
    _all?: true
  }

  export type ViolationLetterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ViolationLetter to aggregate.
     */
    where?: ViolationLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ViolationLetters to fetch.
     */
    orderBy?: ViolationLetterOrderByWithRelationInput | ViolationLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViolationLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ViolationLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ViolationLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ViolationLetters
    **/
    _count?: true | ViolationLetterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViolationLetterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViolationLetterMaxAggregateInputType
  }

  export type GetViolationLetterAggregateType<T extends ViolationLetterAggregateArgs> = {
        [P in keyof T & keyof AggregateViolationLetter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViolationLetter[P]>
      : GetScalarType<T[P], AggregateViolationLetter[P]>
  }




  export type ViolationLetterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViolationLetterWhereInput
    orderBy?: ViolationLetterOrderByWithAggregationInput | ViolationLetterOrderByWithAggregationInput[]
    by: ViolationLetterScalarFieldEnum[] | ViolationLetterScalarFieldEnum
    having?: ViolationLetterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViolationLetterCountAggregateInputType | true
    _min?: ViolationLetterMinAggregateInputType
    _max?: ViolationLetterMaxAggregateInputType
  }

  export type ViolationLetterGroupByOutputType = {
    id: string
    violationId: string
    pdfUrl: string
    createdAt: Date
    _count: ViolationLetterCountAggregateOutputType | null
    _min: ViolationLetterMinAggregateOutputType | null
    _max: ViolationLetterMaxAggregateOutputType | null
  }

  type GetViolationLetterGroupByPayload<T extends ViolationLetterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViolationLetterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViolationLetterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViolationLetterGroupByOutputType[P]>
            : GetScalarType<T[P], ViolationLetterGroupByOutputType[P]>
        }
      >
    >


  export type ViolationLetterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    violationId?: boolean
    pdfUrl?: boolean
    createdAt?: boolean
    violation?: boolean | ViolationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["violationLetter"]>

  export type ViolationLetterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    violationId?: boolean
    pdfUrl?: boolean
    createdAt?: boolean
    violation?: boolean | ViolationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["violationLetter"]>

  export type ViolationLetterSelectScalar = {
    id?: boolean
    violationId?: boolean
    pdfUrl?: boolean
    createdAt?: boolean
  }

  export type ViolationLetterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violation?: boolean | ViolationDefaultArgs<ExtArgs>
  }
  export type ViolationLetterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violation?: boolean | ViolationDefaultArgs<ExtArgs>
  }

  export type $ViolationLetterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ViolationLetter"
    objects: {
      violation: Prisma.$ViolationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      violationId: string
      pdfUrl: string
      createdAt: Date
    }, ExtArgs["result"]["violationLetter"]>
    composites: {}
  }

  type ViolationLetterGetPayload<S extends boolean | null | undefined | ViolationLetterDefaultArgs> = $Result.GetResult<Prisma.$ViolationLetterPayload, S>

  type ViolationLetterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ViolationLetterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ViolationLetterCountAggregateInputType | true
    }

  export interface ViolationLetterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ViolationLetter'], meta: { name: 'ViolationLetter' } }
    /**
     * Find zero or one ViolationLetter that matches the filter.
     * @param {ViolationLetterFindUniqueArgs} args - Arguments to find a ViolationLetter
     * @example
     * // Get one ViolationLetter
     * const violationLetter = await prisma.violationLetter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ViolationLetterFindUniqueArgs>(args: SelectSubset<T, ViolationLetterFindUniqueArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ViolationLetter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ViolationLetterFindUniqueOrThrowArgs} args - Arguments to find a ViolationLetter
     * @example
     * // Get one ViolationLetter
     * const violationLetter = await prisma.violationLetter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ViolationLetterFindUniqueOrThrowArgs>(args: SelectSubset<T, ViolationLetterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ViolationLetter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterFindFirstArgs} args - Arguments to find a ViolationLetter
     * @example
     * // Get one ViolationLetter
     * const violationLetter = await prisma.violationLetter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ViolationLetterFindFirstArgs>(args?: SelectSubset<T, ViolationLetterFindFirstArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ViolationLetter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterFindFirstOrThrowArgs} args - Arguments to find a ViolationLetter
     * @example
     * // Get one ViolationLetter
     * const violationLetter = await prisma.violationLetter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ViolationLetterFindFirstOrThrowArgs>(args?: SelectSubset<T, ViolationLetterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ViolationLetters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ViolationLetters
     * const violationLetters = await prisma.violationLetter.findMany()
     * 
     * // Get first 10 ViolationLetters
     * const violationLetters = await prisma.violationLetter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const violationLetterWithIdOnly = await prisma.violationLetter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ViolationLetterFindManyArgs>(args?: SelectSubset<T, ViolationLetterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ViolationLetter.
     * @param {ViolationLetterCreateArgs} args - Arguments to create a ViolationLetter.
     * @example
     * // Create one ViolationLetter
     * const ViolationLetter = await prisma.violationLetter.create({
     *   data: {
     *     // ... data to create a ViolationLetter
     *   }
     * })
     * 
     */
    create<T extends ViolationLetterCreateArgs>(args: SelectSubset<T, ViolationLetterCreateArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ViolationLetters.
     * @param {ViolationLetterCreateManyArgs} args - Arguments to create many ViolationLetters.
     * @example
     * // Create many ViolationLetters
     * const violationLetter = await prisma.violationLetter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ViolationLetterCreateManyArgs>(args?: SelectSubset<T, ViolationLetterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ViolationLetters and returns the data saved in the database.
     * @param {ViolationLetterCreateManyAndReturnArgs} args - Arguments to create many ViolationLetters.
     * @example
     * // Create many ViolationLetters
     * const violationLetter = await prisma.violationLetter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ViolationLetters and only return the `id`
     * const violationLetterWithIdOnly = await prisma.violationLetter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ViolationLetterCreateManyAndReturnArgs>(args?: SelectSubset<T, ViolationLetterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ViolationLetter.
     * @param {ViolationLetterDeleteArgs} args - Arguments to delete one ViolationLetter.
     * @example
     * // Delete one ViolationLetter
     * const ViolationLetter = await prisma.violationLetter.delete({
     *   where: {
     *     // ... filter to delete one ViolationLetter
     *   }
     * })
     * 
     */
    delete<T extends ViolationLetterDeleteArgs>(args: SelectSubset<T, ViolationLetterDeleteArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ViolationLetter.
     * @param {ViolationLetterUpdateArgs} args - Arguments to update one ViolationLetter.
     * @example
     * // Update one ViolationLetter
     * const violationLetter = await prisma.violationLetter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ViolationLetterUpdateArgs>(args: SelectSubset<T, ViolationLetterUpdateArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ViolationLetters.
     * @param {ViolationLetterDeleteManyArgs} args - Arguments to filter ViolationLetters to delete.
     * @example
     * // Delete a few ViolationLetters
     * const { count } = await prisma.violationLetter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ViolationLetterDeleteManyArgs>(args?: SelectSubset<T, ViolationLetterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ViolationLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ViolationLetters
     * const violationLetter = await prisma.violationLetter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ViolationLetterUpdateManyArgs>(args: SelectSubset<T, ViolationLetterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ViolationLetter.
     * @param {ViolationLetterUpsertArgs} args - Arguments to update or create a ViolationLetter.
     * @example
     * // Update or create a ViolationLetter
     * const violationLetter = await prisma.violationLetter.upsert({
     *   create: {
     *     // ... data to create a ViolationLetter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ViolationLetter we want to update
     *   }
     * })
     */
    upsert<T extends ViolationLetterUpsertArgs>(args: SelectSubset<T, ViolationLetterUpsertArgs<ExtArgs>>): Prisma__ViolationLetterClient<$Result.GetResult<Prisma.$ViolationLetterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ViolationLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterCountArgs} args - Arguments to filter ViolationLetters to count.
     * @example
     * // Count the number of ViolationLetters
     * const count = await prisma.violationLetter.count({
     *   where: {
     *     // ... the filter for the ViolationLetters we want to count
     *   }
     * })
    **/
    count<T extends ViolationLetterCountArgs>(
      args?: Subset<T, ViolationLetterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViolationLetterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ViolationLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViolationLetterAggregateArgs>(args: Subset<T, ViolationLetterAggregateArgs>): Prisma.PrismaPromise<GetViolationLetterAggregateType<T>>

    /**
     * Group by ViolationLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationLetterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViolationLetterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViolationLetterGroupByArgs['orderBy'] }
        : { orderBy?: ViolationLetterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViolationLetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViolationLetterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ViolationLetter model
   */
  readonly fields: ViolationLetterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ViolationLetter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViolationLetterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    violation<T extends ViolationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ViolationDefaultArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ViolationLetter model
   */ 
  interface ViolationLetterFieldRefs {
    readonly id: FieldRef<"ViolationLetter", 'String'>
    readonly violationId: FieldRef<"ViolationLetter", 'String'>
    readonly pdfUrl: FieldRef<"ViolationLetter", 'String'>
    readonly createdAt: FieldRef<"ViolationLetter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ViolationLetter findUnique
   */
  export type ViolationLetterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * Filter, which ViolationLetter to fetch.
     */
    where: ViolationLetterWhereUniqueInput
  }

  /**
   * ViolationLetter findUniqueOrThrow
   */
  export type ViolationLetterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * Filter, which ViolationLetter to fetch.
     */
    where: ViolationLetterWhereUniqueInput
  }

  /**
   * ViolationLetter findFirst
   */
  export type ViolationLetterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * Filter, which ViolationLetter to fetch.
     */
    where?: ViolationLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ViolationLetters to fetch.
     */
    orderBy?: ViolationLetterOrderByWithRelationInput | ViolationLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ViolationLetters.
     */
    cursor?: ViolationLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ViolationLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ViolationLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ViolationLetters.
     */
    distinct?: ViolationLetterScalarFieldEnum | ViolationLetterScalarFieldEnum[]
  }

  /**
   * ViolationLetter findFirstOrThrow
   */
  export type ViolationLetterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * Filter, which ViolationLetter to fetch.
     */
    where?: ViolationLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ViolationLetters to fetch.
     */
    orderBy?: ViolationLetterOrderByWithRelationInput | ViolationLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ViolationLetters.
     */
    cursor?: ViolationLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ViolationLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ViolationLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ViolationLetters.
     */
    distinct?: ViolationLetterScalarFieldEnum | ViolationLetterScalarFieldEnum[]
  }

  /**
   * ViolationLetter findMany
   */
  export type ViolationLetterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * Filter, which ViolationLetters to fetch.
     */
    where?: ViolationLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ViolationLetters to fetch.
     */
    orderBy?: ViolationLetterOrderByWithRelationInput | ViolationLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ViolationLetters.
     */
    cursor?: ViolationLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ViolationLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ViolationLetters.
     */
    skip?: number
    distinct?: ViolationLetterScalarFieldEnum | ViolationLetterScalarFieldEnum[]
  }

  /**
   * ViolationLetter create
   */
  export type ViolationLetterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * The data needed to create a ViolationLetter.
     */
    data: XOR<ViolationLetterCreateInput, ViolationLetterUncheckedCreateInput>
  }

  /**
   * ViolationLetter createMany
   */
  export type ViolationLetterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ViolationLetters.
     */
    data: ViolationLetterCreateManyInput | ViolationLetterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ViolationLetter createManyAndReturn
   */
  export type ViolationLetterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ViolationLetters.
     */
    data: ViolationLetterCreateManyInput | ViolationLetterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ViolationLetter update
   */
  export type ViolationLetterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * The data needed to update a ViolationLetter.
     */
    data: XOR<ViolationLetterUpdateInput, ViolationLetterUncheckedUpdateInput>
    /**
     * Choose, which ViolationLetter to update.
     */
    where: ViolationLetterWhereUniqueInput
  }

  /**
   * ViolationLetter updateMany
   */
  export type ViolationLetterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ViolationLetters.
     */
    data: XOR<ViolationLetterUpdateManyMutationInput, ViolationLetterUncheckedUpdateManyInput>
    /**
     * Filter which ViolationLetters to update
     */
    where?: ViolationLetterWhereInput
  }

  /**
   * ViolationLetter upsert
   */
  export type ViolationLetterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * The filter to search for the ViolationLetter to update in case it exists.
     */
    where: ViolationLetterWhereUniqueInput
    /**
     * In case the ViolationLetter found by the `where` argument doesn't exist, create a new ViolationLetter with this data.
     */
    create: XOR<ViolationLetterCreateInput, ViolationLetterUncheckedCreateInput>
    /**
     * In case the ViolationLetter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViolationLetterUpdateInput, ViolationLetterUncheckedUpdateInput>
  }

  /**
   * ViolationLetter delete
   */
  export type ViolationLetterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
    /**
     * Filter which ViolationLetter to delete.
     */
    where: ViolationLetterWhereUniqueInput
  }

  /**
   * ViolationLetter deleteMany
   */
  export type ViolationLetterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ViolationLetters to delete
     */
    where?: ViolationLetterWhereInput
  }

  /**
   * ViolationLetter without action
   */
  export type ViolationLetterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViolationLetter
     */
    select?: ViolationLetterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationLetterInclude<ExtArgs> | null
  }


  /**
   * Model ParkingInspection
   */

  export type AggregateParkingInspection = {
    _count: ParkingInspectionCountAggregateOutputType | null
    _min: ParkingInspectionMinAggregateOutputType | null
    _max: ParkingInspectionMaxAggregateOutputType | null
  }

  export type ParkingInspectionMinAggregateOutputType = {
    id: string | null
    inspectorId: string | null
    inspectedAt: Date | null
    plateNumber: string | null
    vehicleMake: string | null
    vehicleColor: string | null
    stallNumber: string | null
    photoUrl: string | null
    notes: string | null
    violationId: string | null
  }

  export type ParkingInspectionMaxAggregateOutputType = {
    id: string | null
    inspectorId: string | null
    inspectedAt: Date | null
    plateNumber: string | null
    vehicleMake: string | null
    vehicleColor: string | null
    stallNumber: string | null
    photoUrl: string | null
    notes: string | null
    violationId: string | null
  }

  export type ParkingInspectionCountAggregateOutputType = {
    id: number
    inspectorId: number
    inspectedAt: number
    plateNumber: number
    vehicleMake: number
    vehicleColor: number
    stallNumber: number
    photoUrl: number
    notes: number
    violationId: number
    _all: number
  }


  export type ParkingInspectionMinAggregateInputType = {
    id?: true
    inspectorId?: true
    inspectedAt?: true
    plateNumber?: true
    vehicleMake?: true
    vehicleColor?: true
    stallNumber?: true
    photoUrl?: true
    notes?: true
    violationId?: true
  }

  export type ParkingInspectionMaxAggregateInputType = {
    id?: true
    inspectorId?: true
    inspectedAt?: true
    plateNumber?: true
    vehicleMake?: true
    vehicleColor?: true
    stallNumber?: true
    photoUrl?: true
    notes?: true
    violationId?: true
  }

  export type ParkingInspectionCountAggregateInputType = {
    id?: true
    inspectorId?: true
    inspectedAt?: true
    plateNumber?: true
    vehicleMake?: true
    vehicleColor?: true
    stallNumber?: true
    photoUrl?: true
    notes?: true
    violationId?: true
    _all?: true
  }

  export type ParkingInspectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingInspection to aggregate.
     */
    where?: ParkingInspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingInspections to fetch.
     */
    orderBy?: ParkingInspectionOrderByWithRelationInput | ParkingInspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParkingInspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingInspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingInspections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParkingInspections
    **/
    _count?: true | ParkingInspectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkingInspectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkingInspectionMaxAggregateInputType
  }

  export type GetParkingInspectionAggregateType<T extends ParkingInspectionAggregateArgs> = {
        [P in keyof T & keyof AggregateParkingInspection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkingInspection[P]>
      : GetScalarType<T[P], AggregateParkingInspection[P]>
  }




  export type ParkingInspectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingInspectionWhereInput
    orderBy?: ParkingInspectionOrderByWithAggregationInput | ParkingInspectionOrderByWithAggregationInput[]
    by: ParkingInspectionScalarFieldEnum[] | ParkingInspectionScalarFieldEnum
    having?: ParkingInspectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkingInspectionCountAggregateInputType | true
    _min?: ParkingInspectionMinAggregateInputType
    _max?: ParkingInspectionMaxAggregateInputType
  }

  export type ParkingInspectionGroupByOutputType = {
    id: string
    inspectorId: string
    inspectedAt: Date
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl: string | null
    notes: string | null
    violationId: string | null
    _count: ParkingInspectionCountAggregateOutputType | null
    _min: ParkingInspectionMinAggregateOutputType | null
    _max: ParkingInspectionMaxAggregateOutputType | null
  }

  type GetParkingInspectionGroupByPayload<T extends ParkingInspectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParkingInspectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkingInspectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkingInspectionGroupByOutputType[P]>
            : GetScalarType<T[P], ParkingInspectionGroupByOutputType[P]>
        }
      >
    >


  export type ParkingInspectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectorId?: boolean
    inspectedAt?: boolean
    plateNumber?: boolean
    vehicleMake?: boolean
    vehicleColor?: boolean
    stallNumber?: boolean
    photoUrl?: boolean
    notes?: boolean
    violationId?: boolean
    violation?: boolean | ParkingInspection$violationArgs<ExtArgs>
  }, ExtArgs["result"]["parkingInspection"]>

  export type ParkingInspectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inspectorId?: boolean
    inspectedAt?: boolean
    plateNumber?: boolean
    vehicleMake?: boolean
    vehicleColor?: boolean
    stallNumber?: boolean
    photoUrl?: boolean
    notes?: boolean
    violationId?: boolean
    violation?: boolean | ParkingInspection$violationArgs<ExtArgs>
  }, ExtArgs["result"]["parkingInspection"]>

  export type ParkingInspectionSelectScalar = {
    id?: boolean
    inspectorId?: boolean
    inspectedAt?: boolean
    plateNumber?: boolean
    vehicleMake?: boolean
    vehicleColor?: boolean
    stallNumber?: boolean
    photoUrl?: boolean
    notes?: boolean
    violationId?: boolean
  }

  export type ParkingInspectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violation?: boolean | ParkingInspection$violationArgs<ExtArgs>
  }
  export type ParkingInspectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violation?: boolean | ParkingInspection$violationArgs<ExtArgs>
  }

  export type $ParkingInspectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParkingInspection"
    objects: {
      violation: Prisma.$ViolationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inspectorId: string
      inspectedAt: Date
      plateNumber: string
      vehicleMake: string
      vehicleColor: string
      stallNumber: string
      photoUrl: string | null
      notes: string | null
      violationId: string | null
    }, ExtArgs["result"]["parkingInspection"]>
    composites: {}
  }

  type ParkingInspectionGetPayload<S extends boolean | null | undefined | ParkingInspectionDefaultArgs> = $Result.GetResult<Prisma.$ParkingInspectionPayload, S>

  type ParkingInspectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParkingInspectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParkingInspectionCountAggregateInputType | true
    }

  export interface ParkingInspectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParkingInspection'], meta: { name: 'ParkingInspection' } }
    /**
     * Find zero or one ParkingInspection that matches the filter.
     * @param {ParkingInspectionFindUniqueArgs} args - Arguments to find a ParkingInspection
     * @example
     * // Get one ParkingInspection
     * const parkingInspection = await prisma.parkingInspection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParkingInspectionFindUniqueArgs>(args: SelectSubset<T, ParkingInspectionFindUniqueArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ParkingInspection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParkingInspectionFindUniqueOrThrowArgs} args - Arguments to find a ParkingInspection
     * @example
     * // Get one ParkingInspection
     * const parkingInspection = await prisma.parkingInspection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParkingInspectionFindUniqueOrThrowArgs>(args: SelectSubset<T, ParkingInspectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ParkingInspection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionFindFirstArgs} args - Arguments to find a ParkingInspection
     * @example
     * // Get one ParkingInspection
     * const parkingInspection = await prisma.parkingInspection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParkingInspectionFindFirstArgs>(args?: SelectSubset<T, ParkingInspectionFindFirstArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ParkingInspection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionFindFirstOrThrowArgs} args - Arguments to find a ParkingInspection
     * @example
     * // Get one ParkingInspection
     * const parkingInspection = await prisma.parkingInspection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParkingInspectionFindFirstOrThrowArgs>(args?: SelectSubset<T, ParkingInspectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ParkingInspections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParkingInspections
     * const parkingInspections = await prisma.parkingInspection.findMany()
     * 
     * // Get first 10 ParkingInspections
     * const parkingInspections = await prisma.parkingInspection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parkingInspectionWithIdOnly = await prisma.parkingInspection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParkingInspectionFindManyArgs>(args?: SelectSubset<T, ParkingInspectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ParkingInspection.
     * @param {ParkingInspectionCreateArgs} args - Arguments to create a ParkingInspection.
     * @example
     * // Create one ParkingInspection
     * const ParkingInspection = await prisma.parkingInspection.create({
     *   data: {
     *     // ... data to create a ParkingInspection
     *   }
     * })
     * 
     */
    create<T extends ParkingInspectionCreateArgs>(args: SelectSubset<T, ParkingInspectionCreateArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ParkingInspections.
     * @param {ParkingInspectionCreateManyArgs} args - Arguments to create many ParkingInspections.
     * @example
     * // Create many ParkingInspections
     * const parkingInspection = await prisma.parkingInspection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParkingInspectionCreateManyArgs>(args?: SelectSubset<T, ParkingInspectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParkingInspections and returns the data saved in the database.
     * @param {ParkingInspectionCreateManyAndReturnArgs} args - Arguments to create many ParkingInspections.
     * @example
     * // Create many ParkingInspections
     * const parkingInspection = await prisma.parkingInspection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParkingInspections and only return the `id`
     * const parkingInspectionWithIdOnly = await prisma.parkingInspection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParkingInspectionCreateManyAndReturnArgs>(args?: SelectSubset<T, ParkingInspectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ParkingInspection.
     * @param {ParkingInspectionDeleteArgs} args - Arguments to delete one ParkingInspection.
     * @example
     * // Delete one ParkingInspection
     * const ParkingInspection = await prisma.parkingInspection.delete({
     *   where: {
     *     // ... filter to delete one ParkingInspection
     *   }
     * })
     * 
     */
    delete<T extends ParkingInspectionDeleteArgs>(args: SelectSubset<T, ParkingInspectionDeleteArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ParkingInspection.
     * @param {ParkingInspectionUpdateArgs} args - Arguments to update one ParkingInspection.
     * @example
     * // Update one ParkingInspection
     * const parkingInspection = await prisma.parkingInspection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParkingInspectionUpdateArgs>(args: SelectSubset<T, ParkingInspectionUpdateArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ParkingInspections.
     * @param {ParkingInspectionDeleteManyArgs} args - Arguments to filter ParkingInspections to delete.
     * @example
     * // Delete a few ParkingInspections
     * const { count } = await prisma.parkingInspection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParkingInspectionDeleteManyArgs>(args?: SelectSubset<T, ParkingInspectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingInspections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParkingInspections
     * const parkingInspection = await prisma.parkingInspection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParkingInspectionUpdateManyArgs>(args: SelectSubset<T, ParkingInspectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParkingInspection.
     * @param {ParkingInspectionUpsertArgs} args - Arguments to update or create a ParkingInspection.
     * @example
     * // Update or create a ParkingInspection
     * const parkingInspection = await prisma.parkingInspection.upsert({
     *   create: {
     *     // ... data to create a ParkingInspection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParkingInspection we want to update
     *   }
     * })
     */
    upsert<T extends ParkingInspectionUpsertArgs>(args: SelectSubset<T, ParkingInspectionUpsertArgs<ExtArgs>>): Prisma__ParkingInspectionClient<$Result.GetResult<Prisma.$ParkingInspectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ParkingInspections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionCountArgs} args - Arguments to filter ParkingInspections to count.
     * @example
     * // Count the number of ParkingInspections
     * const count = await prisma.parkingInspection.count({
     *   where: {
     *     // ... the filter for the ParkingInspections we want to count
     *   }
     * })
    **/
    count<T extends ParkingInspectionCountArgs>(
      args?: Subset<T, ParkingInspectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkingInspectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParkingInspection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkingInspectionAggregateArgs>(args: Subset<T, ParkingInspectionAggregateArgs>): Prisma.PrismaPromise<GetParkingInspectionAggregateType<T>>

    /**
     * Group by ParkingInspection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingInspectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkingInspectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkingInspectionGroupByArgs['orderBy'] }
        : { orderBy?: ParkingInspectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkingInspectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkingInspectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParkingInspection model
   */
  readonly fields: ParkingInspectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParkingInspection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParkingInspectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    violation<T extends ParkingInspection$violationArgs<ExtArgs> = {}>(args?: Subset<T, ParkingInspection$violationArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParkingInspection model
   */ 
  interface ParkingInspectionFieldRefs {
    readonly id: FieldRef<"ParkingInspection", 'String'>
    readonly inspectorId: FieldRef<"ParkingInspection", 'String'>
    readonly inspectedAt: FieldRef<"ParkingInspection", 'DateTime'>
    readonly plateNumber: FieldRef<"ParkingInspection", 'String'>
    readonly vehicleMake: FieldRef<"ParkingInspection", 'String'>
    readonly vehicleColor: FieldRef<"ParkingInspection", 'String'>
    readonly stallNumber: FieldRef<"ParkingInspection", 'String'>
    readonly photoUrl: FieldRef<"ParkingInspection", 'String'>
    readonly notes: FieldRef<"ParkingInspection", 'String'>
    readonly violationId: FieldRef<"ParkingInspection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ParkingInspection findUnique
   */
  export type ParkingInspectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingInspection to fetch.
     */
    where: ParkingInspectionWhereUniqueInput
  }

  /**
   * ParkingInspection findUniqueOrThrow
   */
  export type ParkingInspectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingInspection to fetch.
     */
    where: ParkingInspectionWhereUniqueInput
  }

  /**
   * ParkingInspection findFirst
   */
  export type ParkingInspectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingInspection to fetch.
     */
    where?: ParkingInspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingInspections to fetch.
     */
    orderBy?: ParkingInspectionOrderByWithRelationInput | ParkingInspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingInspections.
     */
    cursor?: ParkingInspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingInspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingInspections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingInspections.
     */
    distinct?: ParkingInspectionScalarFieldEnum | ParkingInspectionScalarFieldEnum[]
  }

  /**
   * ParkingInspection findFirstOrThrow
   */
  export type ParkingInspectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingInspection to fetch.
     */
    where?: ParkingInspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingInspections to fetch.
     */
    orderBy?: ParkingInspectionOrderByWithRelationInput | ParkingInspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingInspections.
     */
    cursor?: ParkingInspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingInspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingInspections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingInspections.
     */
    distinct?: ParkingInspectionScalarFieldEnum | ParkingInspectionScalarFieldEnum[]
  }

  /**
   * ParkingInspection findMany
   */
  export type ParkingInspectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingInspections to fetch.
     */
    where?: ParkingInspectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingInspections to fetch.
     */
    orderBy?: ParkingInspectionOrderByWithRelationInput | ParkingInspectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParkingInspections.
     */
    cursor?: ParkingInspectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingInspections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingInspections.
     */
    skip?: number
    distinct?: ParkingInspectionScalarFieldEnum | ParkingInspectionScalarFieldEnum[]
  }

  /**
   * ParkingInspection create
   */
  export type ParkingInspectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * The data needed to create a ParkingInspection.
     */
    data: XOR<ParkingInspectionCreateInput, ParkingInspectionUncheckedCreateInput>
  }

  /**
   * ParkingInspection createMany
   */
  export type ParkingInspectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParkingInspections.
     */
    data: ParkingInspectionCreateManyInput | ParkingInspectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParkingInspection createManyAndReturn
   */
  export type ParkingInspectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ParkingInspections.
     */
    data: ParkingInspectionCreateManyInput | ParkingInspectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParkingInspection update
   */
  export type ParkingInspectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * The data needed to update a ParkingInspection.
     */
    data: XOR<ParkingInspectionUpdateInput, ParkingInspectionUncheckedUpdateInput>
    /**
     * Choose, which ParkingInspection to update.
     */
    where: ParkingInspectionWhereUniqueInput
  }

  /**
   * ParkingInspection updateMany
   */
  export type ParkingInspectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParkingInspections.
     */
    data: XOR<ParkingInspectionUpdateManyMutationInput, ParkingInspectionUncheckedUpdateManyInput>
    /**
     * Filter which ParkingInspections to update
     */
    where?: ParkingInspectionWhereInput
  }

  /**
   * ParkingInspection upsert
   */
  export type ParkingInspectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * The filter to search for the ParkingInspection to update in case it exists.
     */
    where: ParkingInspectionWhereUniqueInput
    /**
     * In case the ParkingInspection found by the `where` argument doesn't exist, create a new ParkingInspection with this data.
     */
    create: XOR<ParkingInspectionCreateInput, ParkingInspectionUncheckedCreateInput>
    /**
     * In case the ParkingInspection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParkingInspectionUpdateInput, ParkingInspectionUncheckedUpdateInput>
  }

  /**
   * ParkingInspection delete
   */
  export type ParkingInspectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
    /**
     * Filter which ParkingInspection to delete.
     */
    where: ParkingInspectionWhereUniqueInput
  }

  /**
   * ParkingInspection deleteMany
   */
  export type ParkingInspectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingInspections to delete
     */
    where?: ParkingInspectionWhereInput
  }

  /**
   * ParkingInspection.violation
   */
  export type ParkingInspection$violationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    where?: ViolationWhereInput
  }

  /**
   * ParkingInspection without action
   */
  export type ParkingInspectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingInspection
     */
    select?: ParkingInspectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingInspectionInclude<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _avg: SettingAvgAggregateOutputType | null
    _sum: SettingSumAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingAvgAggregateOutputType = {
    id: number | null
    maxDurationHours: number | null
    consecutiveDaysLimit: number | null
    monthlyVisitLimit: number | null
  }

  export type SettingSumAggregateOutputType = {
    id: number | null
    maxDurationHours: number | null
    consecutiveDaysLimit: number | null
    monthlyVisitLimit: number | null
  }

  export type SettingMinAggregateOutputType = {
    id: number | null
    maxDurationHours: number | null
    consecutiveDaysLimit: number | null
    monthlyVisitLimit: number | null
    updatedAt: Date | null
  }

  export type SettingMaxAggregateOutputType = {
    id: number | null
    maxDurationHours: number | null
    consecutiveDaysLimit: number | null
    monthlyVisitLimit: number | null
    updatedAt: Date | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    maxDurationHours: number
    consecutiveDaysLimit: number
    monthlyVisitLimit: number
    updatedAt: number
    _all: number
  }


  export type SettingAvgAggregateInputType = {
    id?: true
    maxDurationHours?: true
    consecutiveDaysLimit?: true
    monthlyVisitLimit?: true
  }

  export type SettingSumAggregateInputType = {
    id?: true
    maxDurationHours?: true
    consecutiveDaysLimit?: true
    monthlyVisitLimit?: true
  }

  export type SettingMinAggregateInputType = {
    id?: true
    maxDurationHours?: true
    consecutiveDaysLimit?: true
    monthlyVisitLimit?: true
    updatedAt?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    maxDurationHours?: true
    consecutiveDaysLimit?: true
    monthlyVisitLimit?: true
    updatedAt?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    maxDurationHours?: true
    consecutiveDaysLimit?: true
    monthlyVisitLimit?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _avg?: SettingAvgAggregateInputType
    _sum?: SettingSumAggregateInputType
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: number
    maxDurationHours: number
    consecutiveDaysLimit: number
    monthlyVisitLimit: number
    updatedAt: Date
    _count: SettingCountAggregateOutputType | null
    _avg: SettingAvgAggregateOutputType | null
    _sum: SettingSumAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    maxDurationHours?: boolean
    consecutiveDaysLimit?: boolean
    monthlyVisitLimit?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    maxDurationHours?: boolean
    consecutiveDaysLimit?: boolean
    monthlyVisitLimit?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    maxDurationHours?: boolean
    consecutiveDaysLimit?: boolean
    monthlyVisitLimit?: boolean
    updatedAt?: boolean
  }


  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      maxDurationHours: number
      consecutiveDaysLimit: number
      monthlyVisitLimit: number
      updatedAt: Date
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'Int'>
    readonly maxDurationHours: FieldRef<"Setting", 'Int'>
    readonly consecutiveDaysLimit: FieldRef<"Setting", 'Int'>
    readonly monthlyVisitLimit: FieldRef<"Setting", 'Int'>
    readonly updatedAt: FieldRef<"Setting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
  }


  /**
   * Model ElevatorBooking
   */

  export type AggregateElevatorBooking = {
    _count: ElevatorBookingCountAggregateOutputType | null
    _avg: ElevatorBookingAvgAggregateOutputType | null
    _sum: ElevatorBookingSumAggregateOutputType | null
    _min: ElevatorBookingMinAggregateOutputType | null
    _max: ElevatorBookingMaxAggregateOutputType | null
  }

  export type ElevatorBookingAvgAggregateOutputType = {
    duration: number | null
  }

  export type ElevatorBookingSumAggregateOutputType = {
    duration: number | null
  }

  export type ElevatorBookingMinAggregateOutputType = {
    id: string | null
    unitNumber: string | null
    duration: number | null
    bookingDate: Date | null
    reason: $Enums.ElevatorBookingReason | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ElevatorBookingMaxAggregateOutputType = {
    id: string | null
    unitNumber: string | null
    duration: number | null
    bookingDate: Date | null
    reason: $Enums.ElevatorBookingReason | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ElevatorBookingCountAggregateOutputType = {
    id: number
    unitNumber: number
    duration: number
    bookingDate: number
    reason: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ElevatorBookingAvgAggregateInputType = {
    duration?: true
  }

  export type ElevatorBookingSumAggregateInputType = {
    duration?: true
  }

  export type ElevatorBookingMinAggregateInputType = {
    id?: true
    unitNumber?: true
    duration?: true
    bookingDate?: true
    reason?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ElevatorBookingMaxAggregateInputType = {
    id?: true
    unitNumber?: true
    duration?: true
    bookingDate?: true
    reason?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ElevatorBookingCountAggregateInputType = {
    id?: true
    unitNumber?: true
    duration?: true
    bookingDate?: true
    reason?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ElevatorBookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElevatorBooking to aggregate.
     */
    where?: ElevatorBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElevatorBookings to fetch.
     */
    orderBy?: ElevatorBookingOrderByWithRelationInput | ElevatorBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ElevatorBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElevatorBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElevatorBookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ElevatorBookings
    **/
    _count?: true | ElevatorBookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ElevatorBookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ElevatorBookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ElevatorBookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ElevatorBookingMaxAggregateInputType
  }

  export type GetElevatorBookingAggregateType<T extends ElevatorBookingAggregateArgs> = {
        [P in keyof T & keyof AggregateElevatorBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateElevatorBooking[P]>
      : GetScalarType<T[P], AggregateElevatorBooking[P]>
  }




  export type ElevatorBookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElevatorBookingWhereInput
    orderBy?: ElevatorBookingOrderByWithAggregationInput | ElevatorBookingOrderByWithAggregationInput[]
    by: ElevatorBookingScalarFieldEnum[] | ElevatorBookingScalarFieldEnum
    having?: ElevatorBookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ElevatorBookingCountAggregateInputType | true
    _avg?: ElevatorBookingAvgAggregateInputType
    _sum?: ElevatorBookingSumAggregateInputType
    _min?: ElevatorBookingMinAggregateInputType
    _max?: ElevatorBookingMaxAggregateInputType
  }

  export type ElevatorBookingGroupByOutputType = {
    id: string
    unitNumber: string
    duration: number
    bookingDate: Date
    reason: $Enums.ElevatorBookingReason
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ElevatorBookingCountAggregateOutputType | null
    _avg: ElevatorBookingAvgAggregateOutputType | null
    _sum: ElevatorBookingSumAggregateOutputType | null
    _min: ElevatorBookingMinAggregateOutputType | null
    _max: ElevatorBookingMaxAggregateOutputType | null
  }

  type GetElevatorBookingGroupByPayload<T extends ElevatorBookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ElevatorBookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ElevatorBookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ElevatorBookingGroupByOutputType[P]>
            : GetScalarType<T[P], ElevatorBookingGroupByOutputType[P]>
        }
      >
    >


  export type ElevatorBookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitNumber?: boolean
    duration?: boolean
    bookingDate?: boolean
    reason?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["elevatorBooking"]>

  export type ElevatorBookingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitNumber?: boolean
    duration?: boolean
    bookingDate?: boolean
    reason?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["elevatorBooking"]>

  export type ElevatorBookingSelectScalar = {
    id?: boolean
    unitNumber?: boolean
    duration?: boolean
    bookingDate?: boolean
    reason?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ElevatorBookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ElevatorBooking"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      unitNumber: string
      duration: number
      bookingDate: Date
      reason: $Enums.ElevatorBookingReason
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["elevatorBooking"]>
    composites: {}
  }

  type ElevatorBookingGetPayload<S extends boolean | null | undefined | ElevatorBookingDefaultArgs> = $Result.GetResult<Prisma.$ElevatorBookingPayload, S>

  type ElevatorBookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ElevatorBookingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ElevatorBookingCountAggregateInputType | true
    }

  export interface ElevatorBookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ElevatorBooking'], meta: { name: 'ElevatorBooking' } }
    /**
     * Find zero or one ElevatorBooking that matches the filter.
     * @param {ElevatorBookingFindUniqueArgs} args - Arguments to find a ElevatorBooking
     * @example
     * // Get one ElevatorBooking
     * const elevatorBooking = await prisma.elevatorBooking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ElevatorBookingFindUniqueArgs>(args: SelectSubset<T, ElevatorBookingFindUniqueArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ElevatorBooking that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ElevatorBookingFindUniqueOrThrowArgs} args - Arguments to find a ElevatorBooking
     * @example
     * // Get one ElevatorBooking
     * const elevatorBooking = await prisma.elevatorBooking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ElevatorBookingFindUniqueOrThrowArgs>(args: SelectSubset<T, ElevatorBookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ElevatorBooking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingFindFirstArgs} args - Arguments to find a ElevatorBooking
     * @example
     * // Get one ElevatorBooking
     * const elevatorBooking = await prisma.elevatorBooking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ElevatorBookingFindFirstArgs>(args?: SelectSubset<T, ElevatorBookingFindFirstArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ElevatorBooking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingFindFirstOrThrowArgs} args - Arguments to find a ElevatorBooking
     * @example
     * // Get one ElevatorBooking
     * const elevatorBooking = await prisma.elevatorBooking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ElevatorBookingFindFirstOrThrowArgs>(args?: SelectSubset<T, ElevatorBookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ElevatorBookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ElevatorBookings
     * const elevatorBookings = await prisma.elevatorBooking.findMany()
     * 
     * // Get first 10 ElevatorBookings
     * const elevatorBookings = await prisma.elevatorBooking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const elevatorBookingWithIdOnly = await prisma.elevatorBooking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ElevatorBookingFindManyArgs>(args?: SelectSubset<T, ElevatorBookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ElevatorBooking.
     * @param {ElevatorBookingCreateArgs} args - Arguments to create a ElevatorBooking.
     * @example
     * // Create one ElevatorBooking
     * const ElevatorBooking = await prisma.elevatorBooking.create({
     *   data: {
     *     // ... data to create a ElevatorBooking
     *   }
     * })
     * 
     */
    create<T extends ElevatorBookingCreateArgs>(args: SelectSubset<T, ElevatorBookingCreateArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ElevatorBookings.
     * @param {ElevatorBookingCreateManyArgs} args - Arguments to create many ElevatorBookings.
     * @example
     * // Create many ElevatorBookings
     * const elevatorBooking = await prisma.elevatorBooking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ElevatorBookingCreateManyArgs>(args?: SelectSubset<T, ElevatorBookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ElevatorBookings and returns the data saved in the database.
     * @param {ElevatorBookingCreateManyAndReturnArgs} args - Arguments to create many ElevatorBookings.
     * @example
     * // Create many ElevatorBookings
     * const elevatorBooking = await prisma.elevatorBooking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ElevatorBookings and only return the `id`
     * const elevatorBookingWithIdOnly = await prisma.elevatorBooking.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ElevatorBookingCreateManyAndReturnArgs>(args?: SelectSubset<T, ElevatorBookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ElevatorBooking.
     * @param {ElevatorBookingDeleteArgs} args - Arguments to delete one ElevatorBooking.
     * @example
     * // Delete one ElevatorBooking
     * const ElevatorBooking = await prisma.elevatorBooking.delete({
     *   where: {
     *     // ... filter to delete one ElevatorBooking
     *   }
     * })
     * 
     */
    delete<T extends ElevatorBookingDeleteArgs>(args: SelectSubset<T, ElevatorBookingDeleteArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ElevatorBooking.
     * @param {ElevatorBookingUpdateArgs} args - Arguments to update one ElevatorBooking.
     * @example
     * // Update one ElevatorBooking
     * const elevatorBooking = await prisma.elevatorBooking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ElevatorBookingUpdateArgs>(args: SelectSubset<T, ElevatorBookingUpdateArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ElevatorBookings.
     * @param {ElevatorBookingDeleteManyArgs} args - Arguments to filter ElevatorBookings to delete.
     * @example
     * // Delete a few ElevatorBookings
     * const { count } = await prisma.elevatorBooking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ElevatorBookingDeleteManyArgs>(args?: SelectSubset<T, ElevatorBookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ElevatorBookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ElevatorBookings
     * const elevatorBooking = await prisma.elevatorBooking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ElevatorBookingUpdateManyArgs>(args: SelectSubset<T, ElevatorBookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ElevatorBooking.
     * @param {ElevatorBookingUpsertArgs} args - Arguments to update or create a ElevatorBooking.
     * @example
     * // Update or create a ElevatorBooking
     * const elevatorBooking = await prisma.elevatorBooking.upsert({
     *   create: {
     *     // ... data to create a ElevatorBooking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ElevatorBooking we want to update
     *   }
     * })
     */
    upsert<T extends ElevatorBookingUpsertArgs>(args: SelectSubset<T, ElevatorBookingUpsertArgs<ExtArgs>>): Prisma__ElevatorBookingClient<$Result.GetResult<Prisma.$ElevatorBookingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ElevatorBookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingCountArgs} args - Arguments to filter ElevatorBookings to count.
     * @example
     * // Count the number of ElevatorBookings
     * const count = await prisma.elevatorBooking.count({
     *   where: {
     *     // ... the filter for the ElevatorBookings we want to count
     *   }
     * })
    **/
    count<T extends ElevatorBookingCountArgs>(
      args?: Subset<T, ElevatorBookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ElevatorBookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ElevatorBooking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ElevatorBookingAggregateArgs>(args: Subset<T, ElevatorBookingAggregateArgs>): Prisma.PrismaPromise<GetElevatorBookingAggregateType<T>>

    /**
     * Group by ElevatorBooking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElevatorBookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ElevatorBookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ElevatorBookingGroupByArgs['orderBy'] }
        : { orderBy?: ElevatorBookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ElevatorBookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetElevatorBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ElevatorBooking model
   */
  readonly fields: ElevatorBookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ElevatorBooking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ElevatorBookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ElevatorBooking model
   */ 
  interface ElevatorBookingFieldRefs {
    readonly id: FieldRef<"ElevatorBooking", 'String'>
    readonly unitNumber: FieldRef<"ElevatorBooking", 'String'>
    readonly duration: FieldRef<"ElevatorBooking", 'Int'>
    readonly bookingDate: FieldRef<"ElevatorBooking", 'DateTime'>
    readonly reason: FieldRef<"ElevatorBooking", 'ElevatorBookingReason'>
    readonly notes: FieldRef<"ElevatorBooking", 'String'>
    readonly createdAt: FieldRef<"ElevatorBooking", 'DateTime'>
    readonly updatedAt: FieldRef<"ElevatorBooking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ElevatorBooking findUnique
   */
  export type ElevatorBookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * Filter, which ElevatorBooking to fetch.
     */
    where: ElevatorBookingWhereUniqueInput
  }

  /**
   * ElevatorBooking findUniqueOrThrow
   */
  export type ElevatorBookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * Filter, which ElevatorBooking to fetch.
     */
    where: ElevatorBookingWhereUniqueInput
  }

  /**
   * ElevatorBooking findFirst
   */
  export type ElevatorBookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * Filter, which ElevatorBooking to fetch.
     */
    where?: ElevatorBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElevatorBookings to fetch.
     */
    orderBy?: ElevatorBookingOrderByWithRelationInput | ElevatorBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElevatorBookings.
     */
    cursor?: ElevatorBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElevatorBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElevatorBookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElevatorBookings.
     */
    distinct?: ElevatorBookingScalarFieldEnum | ElevatorBookingScalarFieldEnum[]
  }

  /**
   * ElevatorBooking findFirstOrThrow
   */
  export type ElevatorBookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * Filter, which ElevatorBooking to fetch.
     */
    where?: ElevatorBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElevatorBookings to fetch.
     */
    orderBy?: ElevatorBookingOrderByWithRelationInput | ElevatorBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElevatorBookings.
     */
    cursor?: ElevatorBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElevatorBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElevatorBookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElevatorBookings.
     */
    distinct?: ElevatorBookingScalarFieldEnum | ElevatorBookingScalarFieldEnum[]
  }

  /**
   * ElevatorBooking findMany
   */
  export type ElevatorBookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * Filter, which ElevatorBookings to fetch.
     */
    where?: ElevatorBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElevatorBookings to fetch.
     */
    orderBy?: ElevatorBookingOrderByWithRelationInput | ElevatorBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ElevatorBookings.
     */
    cursor?: ElevatorBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElevatorBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElevatorBookings.
     */
    skip?: number
    distinct?: ElevatorBookingScalarFieldEnum | ElevatorBookingScalarFieldEnum[]
  }

  /**
   * ElevatorBooking create
   */
  export type ElevatorBookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * The data needed to create a ElevatorBooking.
     */
    data: XOR<ElevatorBookingCreateInput, ElevatorBookingUncheckedCreateInput>
  }

  /**
   * ElevatorBooking createMany
   */
  export type ElevatorBookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ElevatorBookings.
     */
    data: ElevatorBookingCreateManyInput | ElevatorBookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ElevatorBooking createManyAndReturn
   */
  export type ElevatorBookingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ElevatorBookings.
     */
    data: ElevatorBookingCreateManyInput | ElevatorBookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ElevatorBooking update
   */
  export type ElevatorBookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * The data needed to update a ElevatorBooking.
     */
    data: XOR<ElevatorBookingUpdateInput, ElevatorBookingUncheckedUpdateInput>
    /**
     * Choose, which ElevatorBooking to update.
     */
    where: ElevatorBookingWhereUniqueInput
  }

  /**
   * ElevatorBooking updateMany
   */
  export type ElevatorBookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ElevatorBookings.
     */
    data: XOR<ElevatorBookingUpdateManyMutationInput, ElevatorBookingUncheckedUpdateManyInput>
    /**
     * Filter which ElevatorBookings to update
     */
    where?: ElevatorBookingWhereInput
  }

  /**
   * ElevatorBooking upsert
   */
  export type ElevatorBookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * The filter to search for the ElevatorBooking to update in case it exists.
     */
    where: ElevatorBookingWhereUniqueInput
    /**
     * In case the ElevatorBooking found by the `where` argument doesn't exist, create a new ElevatorBooking with this data.
     */
    create: XOR<ElevatorBookingCreateInput, ElevatorBookingUncheckedCreateInput>
    /**
     * In case the ElevatorBooking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ElevatorBookingUpdateInput, ElevatorBookingUncheckedUpdateInput>
  }

  /**
   * ElevatorBooking delete
   */
  export type ElevatorBookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
    /**
     * Filter which ElevatorBooking to delete.
     */
    where: ElevatorBookingWhereUniqueInput
  }

  /**
   * ElevatorBooking deleteMany
   */
  export type ElevatorBookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElevatorBookings to delete
     */
    where?: ElevatorBookingWhereInput
  }

  /**
   * ElevatorBooking without action
   */
  export type ElevatorBookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElevatorBooking
     */
    select?: ElevatorBookingSelect<ExtArgs> | null
  }


  /**
   * Model StorageUnit
   */

  export type AggregateStorageUnit = {
    _count: StorageUnitCountAggregateOutputType | null
    _min: StorageUnitMinAggregateOutputType | null
    _max: StorageUnitMaxAggregateOutputType | null
  }

  export type StorageUnitMinAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.StorageStatus | null
    unitNumber: string | null
    startDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageUnitMaxAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.StorageStatus | null
    unitNumber: string | null
    startDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageUnitCountAggregateOutputType = {
    id: number
    name: number
    status: number
    unitNumber: number
    startDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StorageUnitMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    unitNumber?: true
    startDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageUnitMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    unitNumber?: true
    startDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageUnitCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    unitNumber?: true
    startDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StorageUnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageUnit to aggregate.
     */
    where?: StorageUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUnits to fetch.
     */
    orderBy?: StorageUnitOrderByWithRelationInput | StorageUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StorageUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUnits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StorageUnits
    **/
    _count?: true | StorageUnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StorageUnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StorageUnitMaxAggregateInputType
  }

  export type GetStorageUnitAggregateType<T extends StorageUnitAggregateArgs> = {
        [P in keyof T & keyof AggregateStorageUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStorageUnit[P]>
      : GetScalarType<T[P], AggregateStorageUnit[P]>
  }




  export type StorageUnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageUnitWhereInput
    orderBy?: StorageUnitOrderByWithAggregationInput | StorageUnitOrderByWithAggregationInput[]
    by: StorageUnitScalarFieldEnum[] | StorageUnitScalarFieldEnum
    having?: StorageUnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StorageUnitCountAggregateInputType | true
    _min?: StorageUnitMinAggregateInputType
    _max?: StorageUnitMaxAggregateInputType
  }

  export type StorageUnitGroupByOutputType = {
    id: string
    name: string
    status: $Enums.StorageStatus
    unitNumber: string | null
    startDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: StorageUnitCountAggregateOutputType | null
    _min: StorageUnitMinAggregateOutputType | null
    _max: StorageUnitMaxAggregateOutputType | null
  }

  type GetStorageUnitGroupByPayload<T extends StorageUnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StorageUnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StorageUnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StorageUnitGroupByOutputType[P]>
            : GetScalarType<T[P], StorageUnitGroupByOutputType[P]>
        }
      >
    >


  export type StorageUnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    unitNumber?: boolean
    startDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storageUnit"]>

  export type StorageUnitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    unitNumber?: boolean
    startDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storageUnit"]>

  export type StorageUnitSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    unitNumber?: boolean
    startDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $StorageUnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StorageUnit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      status: $Enums.StorageStatus
      unitNumber: string | null
      startDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storageUnit"]>
    composites: {}
  }

  type StorageUnitGetPayload<S extends boolean | null | undefined | StorageUnitDefaultArgs> = $Result.GetResult<Prisma.$StorageUnitPayload, S>

  type StorageUnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StorageUnitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StorageUnitCountAggregateInputType | true
    }

  export interface StorageUnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StorageUnit'], meta: { name: 'StorageUnit' } }
    /**
     * Find zero or one StorageUnit that matches the filter.
     * @param {StorageUnitFindUniqueArgs} args - Arguments to find a StorageUnit
     * @example
     * // Get one StorageUnit
     * const storageUnit = await prisma.storageUnit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StorageUnitFindUniqueArgs>(args: SelectSubset<T, StorageUnitFindUniqueArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StorageUnit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StorageUnitFindUniqueOrThrowArgs} args - Arguments to find a StorageUnit
     * @example
     * // Get one StorageUnit
     * const storageUnit = await prisma.storageUnit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StorageUnitFindUniqueOrThrowArgs>(args: SelectSubset<T, StorageUnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StorageUnit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitFindFirstArgs} args - Arguments to find a StorageUnit
     * @example
     * // Get one StorageUnit
     * const storageUnit = await prisma.storageUnit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StorageUnitFindFirstArgs>(args?: SelectSubset<T, StorageUnitFindFirstArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StorageUnit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitFindFirstOrThrowArgs} args - Arguments to find a StorageUnit
     * @example
     * // Get one StorageUnit
     * const storageUnit = await prisma.storageUnit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StorageUnitFindFirstOrThrowArgs>(args?: SelectSubset<T, StorageUnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StorageUnits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StorageUnits
     * const storageUnits = await prisma.storageUnit.findMany()
     * 
     * // Get first 10 StorageUnits
     * const storageUnits = await prisma.storageUnit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storageUnitWithIdOnly = await prisma.storageUnit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StorageUnitFindManyArgs>(args?: SelectSubset<T, StorageUnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StorageUnit.
     * @param {StorageUnitCreateArgs} args - Arguments to create a StorageUnit.
     * @example
     * // Create one StorageUnit
     * const StorageUnit = await prisma.storageUnit.create({
     *   data: {
     *     // ... data to create a StorageUnit
     *   }
     * })
     * 
     */
    create<T extends StorageUnitCreateArgs>(args: SelectSubset<T, StorageUnitCreateArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StorageUnits.
     * @param {StorageUnitCreateManyArgs} args - Arguments to create many StorageUnits.
     * @example
     * // Create many StorageUnits
     * const storageUnit = await prisma.storageUnit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StorageUnitCreateManyArgs>(args?: SelectSubset<T, StorageUnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StorageUnits and returns the data saved in the database.
     * @param {StorageUnitCreateManyAndReturnArgs} args - Arguments to create many StorageUnits.
     * @example
     * // Create many StorageUnits
     * const storageUnit = await prisma.storageUnit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StorageUnits and only return the `id`
     * const storageUnitWithIdOnly = await prisma.storageUnit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StorageUnitCreateManyAndReturnArgs>(args?: SelectSubset<T, StorageUnitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StorageUnit.
     * @param {StorageUnitDeleteArgs} args - Arguments to delete one StorageUnit.
     * @example
     * // Delete one StorageUnit
     * const StorageUnit = await prisma.storageUnit.delete({
     *   where: {
     *     // ... filter to delete one StorageUnit
     *   }
     * })
     * 
     */
    delete<T extends StorageUnitDeleteArgs>(args: SelectSubset<T, StorageUnitDeleteArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StorageUnit.
     * @param {StorageUnitUpdateArgs} args - Arguments to update one StorageUnit.
     * @example
     * // Update one StorageUnit
     * const storageUnit = await prisma.storageUnit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StorageUnitUpdateArgs>(args: SelectSubset<T, StorageUnitUpdateArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StorageUnits.
     * @param {StorageUnitDeleteManyArgs} args - Arguments to filter StorageUnits to delete.
     * @example
     * // Delete a few StorageUnits
     * const { count } = await prisma.storageUnit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StorageUnitDeleteManyArgs>(args?: SelectSubset<T, StorageUnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StorageUnits
     * const storageUnit = await prisma.storageUnit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StorageUnitUpdateManyArgs>(args: SelectSubset<T, StorageUnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StorageUnit.
     * @param {StorageUnitUpsertArgs} args - Arguments to update or create a StorageUnit.
     * @example
     * // Update or create a StorageUnit
     * const storageUnit = await prisma.storageUnit.upsert({
     *   create: {
     *     // ... data to create a StorageUnit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StorageUnit we want to update
     *   }
     * })
     */
    upsert<T extends StorageUnitUpsertArgs>(args: SelectSubset<T, StorageUnitUpsertArgs<ExtArgs>>): Prisma__StorageUnitClient<$Result.GetResult<Prisma.$StorageUnitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StorageUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitCountArgs} args - Arguments to filter StorageUnits to count.
     * @example
     * // Count the number of StorageUnits
     * const count = await prisma.storageUnit.count({
     *   where: {
     *     // ... the filter for the StorageUnits we want to count
     *   }
     * })
    **/
    count<T extends StorageUnitCountArgs>(
      args?: Subset<T, StorageUnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StorageUnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StorageUnit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StorageUnitAggregateArgs>(args: Subset<T, StorageUnitAggregateArgs>): Prisma.PrismaPromise<GetStorageUnitAggregateType<T>>

    /**
     * Group by StorageUnit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StorageUnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StorageUnitGroupByArgs['orderBy'] }
        : { orderBy?: StorageUnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StorageUnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StorageUnit model
   */
  readonly fields: StorageUnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StorageUnit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StorageUnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StorageUnit model
   */ 
  interface StorageUnitFieldRefs {
    readonly id: FieldRef<"StorageUnit", 'String'>
    readonly name: FieldRef<"StorageUnit", 'String'>
    readonly status: FieldRef<"StorageUnit", 'StorageStatus'>
    readonly unitNumber: FieldRef<"StorageUnit", 'String'>
    readonly startDate: FieldRef<"StorageUnit", 'DateTime'>
    readonly createdAt: FieldRef<"StorageUnit", 'DateTime'>
    readonly updatedAt: FieldRef<"StorageUnit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StorageUnit findUnique
   */
  export type StorageUnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * Filter, which StorageUnit to fetch.
     */
    where: StorageUnitWhereUniqueInput
  }

  /**
   * StorageUnit findUniqueOrThrow
   */
  export type StorageUnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * Filter, which StorageUnit to fetch.
     */
    where: StorageUnitWhereUniqueInput
  }

  /**
   * StorageUnit findFirst
   */
  export type StorageUnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * Filter, which StorageUnit to fetch.
     */
    where?: StorageUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUnits to fetch.
     */
    orderBy?: StorageUnitOrderByWithRelationInput | StorageUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageUnits.
     */
    cursor?: StorageUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUnits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageUnits.
     */
    distinct?: StorageUnitScalarFieldEnum | StorageUnitScalarFieldEnum[]
  }

  /**
   * StorageUnit findFirstOrThrow
   */
  export type StorageUnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * Filter, which StorageUnit to fetch.
     */
    where?: StorageUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUnits to fetch.
     */
    orderBy?: StorageUnitOrderByWithRelationInput | StorageUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageUnits.
     */
    cursor?: StorageUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUnits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageUnits.
     */
    distinct?: StorageUnitScalarFieldEnum | StorageUnitScalarFieldEnum[]
  }

  /**
   * StorageUnit findMany
   */
  export type StorageUnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * Filter, which StorageUnits to fetch.
     */
    where?: StorageUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUnits to fetch.
     */
    orderBy?: StorageUnitOrderByWithRelationInput | StorageUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StorageUnits.
     */
    cursor?: StorageUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUnits.
     */
    skip?: number
    distinct?: StorageUnitScalarFieldEnum | StorageUnitScalarFieldEnum[]
  }

  /**
   * StorageUnit create
   */
  export type StorageUnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * The data needed to create a StorageUnit.
     */
    data: XOR<StorageUnitCreateInput, StorageUnitUncheckedCreateInput>
  }

  /**
   * StorageUnit createMany
   */
  export type StorageUnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StorageUnits.
     */
    data: StorageUnitCreateManyInput | StorageUnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageUnit createManyAndReturn
   */
  export type StorageUnitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StorageUnits.
     */
    data: StorageUnitCreateManyInput | StorageUnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageUnit update
   */
  export type StorageUnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * The data needed to update a StorageUnit.
     */
    data: XOR<StorageUnitUpdateInput, StorageUnitUncheckedUpdateInput>
    /**
     * Choose, which StorageUnit to update.
     */
    where: StorageUnitWhereUniqueInput
  }

  /**
   * StorageUnit updateMany
   */
  export type StorageUnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StorageUnits.
     */
    data: XOR<StorageUnitUpdateManyMutationInput, StorageUnitUncheckedUpdateManyInput>
    /**
     * Filter which StorageUnits to update
     */
    where?: StorageUnitWhereInput
  }

  /**
   * StorageUnit upsert
   */
  export type StorageUnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * The filter to search for the StorageUnit to update in case it exists.
     */
    where: StorageUnitWhereUniqueInput
    /**
     * In case the StorageUnit found by the `where` argument doesn't exist, create a new StorageUnit with this data.
     */
    create: XOR<StorageUnitCreateInput, StorageUnitUncheckedCreateInput>
    /**
     * In case the StorageUnit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StorageUnitUpdateInput, StorageUnitUncheckedUpdateInput>
  }

  /**
   * StorageUnit delete
   */
  export type StorageUnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
    /**
     * Filter which StorageUnit to delete.
     */
    where: StorageUnitWhereUniqueInput
  }

  /**
   * StorageUnit deleteMany
   */
  export type StorageUnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageUnits to delete
     */
    where?: StorageUnitWhereInput
  }

  /**
   * StorageUnit without action
   */
  export type StorageUnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUnit
     */
    select?: StorageUnitSelect<ExtArgs> | null
  }


  /**
   * Model StorageWaitlistEntry
   */

  export type AggregateStorageWaitlistEntry = {
    _count: StorageWaitlistEntryCountAggregateOutputType | null
    _min: StorageWaitlistEntryMinAggregateOutputType | null
    _max: StorageWaitlistEntryMaxAggregateOutputType | null
  }

  export type StorageWaitlistEntryMinAggregateOutputType = {
    id: string | null
    unitNumber: string | null
    requestDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageWaitlistEntryMaxAggregateOutputType = {
    id: string | null
    unitNumber: string | null
    requestDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageWaitlistEntryCountAggregateOutputType = {
    id: number
    unitNumber: number
    requestDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StorageWaitlistEntryMinAggregateInputType = {
    id?: true
    unitNumber?: true
    requestDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageWaitlistEntryMaxAggregateInputType = {
    id?: true
    unitNumber?: true
    requestDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageWaitlistEntryCountAggregateInputType = {
    id?: true
    unitNumber?: true
    requestDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StorageWaitlistEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageWaitlistEntry to aggregate.
     */
    where?: StorageWaitlistEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageWaitlistEntries to fetch.
     */
    orderBy?: StorageWaitlistEntryOrderByWithRelationInput | StorageWaitlistEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StorageWaitlistEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageWaitlistEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageWaitlistEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StorageWaitlistEntries
    **/
    _count?: true | StorageWaitlistEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StorageWaitlistEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StorageWaitlistEntryMaxAggregateInputType
  }

  export type GetStorageWaitlistEntryAggregateType<T extends StorageWaitlistEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateStorageWaitlistEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStorageWaitlistEntry[P]>
      : GetScalarType<T[P], AggregateStorageWaitlistEntry[P]>
  }




  export type StorageWaitlistEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageWaitlistEntryWhereInput
    orderBy?: StorageWaitlistEntryOrderByWithAggregationInput | StorageWaitlistEntryOrderByWithAggregationInput[]
    by: StorageWaitlistEntryScalarFieldEnum[] | StorageWaitlistEntryScalarFieldEnum
    having?: StorageWaitlistEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StorageWaitlistEntryCountAggregateInputType | true
    _min?: StorageWaitlistEntryMinAggregateInputType
    _max?: StorageWaitlistEntryMaxAggregateInputType
  }

  export type StorageWaitlistEntryGroupByOutputType = {
    id: string
    unitNumber: string
    requestDate: Date
    createdAt: Date
    updatedAt: Date
    _count: StorageWaitlistEntryCountAggregateOutputType | null
    _min: StorageWaitlistEntryMinAggregateOutputType | null
    _max: StorageWaitlistEntryMaxAggregateOutputType | null
  }

  type GetStorageWaitlistEntryGroupByPayload<T extends StorageWaitlistEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StorageWaitlistEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StorageWaitlistEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StorageWaitlistEntryGroupByOutputType[P]>
            : GetScalarType<T[P], StorageWaitlistEntryGroupByOutputType[P]>
        }
      >
    >


  export type StorageWaitlistEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitNumber?: boolean
    requestDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storageWaitlistEntry"]>

  export type StorageWaitlistEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitNumber?: boolean
    requestDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storageWaitlistEntry"]>

  export type StorageWaitlistEntrySelectScalar = {
    id?: boolean
    unitNumber?: boolean
    requestDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $StorageWaitlistEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StorageWaitlistEntry"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      unitNumber: string
      requestDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storageWaitlistEntry"]>
    composites: {}
  }

  type StorageWaitlistEntryGetPayload<S extends boolean | null | undefined | StorageWaitlistEntryDefaultArgs> = $Result.GetResult<Prisma.$StorageWaitlistEntryPayload, S>

  type StorageWaitlistEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StorageWaitlistEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StorageWaitlistEntryCountAggregateInputType | true
    }

  export interface StorageWaitlistEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StorageWaitlistEntry'], meta: { name: 'StorageWaitlistEntry' } }
    /**
     * Find zero or one StorageWaitlistEntry that matches the filter.
     * @param {StorageWaitlistEntryFindUniqueArgs} args - Arguments to find a StorageWaitlistEntry
     * @example
     * // Get one StorageWaitlistEntry
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StorageWaitlistEntryFindUniqueArgs>(args: SelectSubset<T, StorageWaitlistEntryFindUniqueArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StorageWaitlistEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StorageWaitlistEntryFindUniqueOrThrowArgs} args - Arguments to find a StorageWaitlistEntry
     * @example
     * // Get one StorageWaitlistEntry
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StorageWaitlistEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, StorageWaitlistEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StorageWaitlistEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryFindFirstArgs} args - Arguments to find a StorageWaitlistEntry
     * @example
     * // Get one StorageWaitlistEntry
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StorageWaitlistEntryFindFirstArgs>(args?: SelectSubset<T, StorageWaitlistEntryFindFirstArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StorageWaitlistEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryFindFirstOrThrowArgs} args - Arguments to find a StorageWaitlistEntry
     * @example
     * // Get one StorageWaitlistEntry
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StorageWaitlistEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, StorageWaitlistEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StorageWaitlistEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StorageWaitlistEntries
     * const storageWaitlistEntries = await prisma.storageWaitlistEntry.findMany()
     * 
     * // Get first 10 StorageWaitlistEntries
     * const storageWaitlistEntries = await prisma.storageWaitlistEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storageWaitlistEntryWithIdOnly = await prisma.storageWaitlistEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StorageWaitlistEntryFindManyArgs>(args?: SelectSubset<T, StorageWaitlistEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StorageWaitlistEntry.
     * @param {StorageWaitlistEntryCreateArgs} args - Arguments to create a StorageWaitlistEntry.
     * @example
     * // Create one StorageWaitlistEntry
     * const StorageWaitlistEntry = await prisma.storageWaitlistEntry.create({
     *   data: {
     *     // ... data to create a StorageWaitlistEntry
     *   }
     * })
     * 
     */
    create<T extends StorageWaitlistEntryCreateArgs>(args: SelectSubset<T, StorageWaitlistEntryCreateArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StorageWaitlistEntries.
     * @param {StorageWaitlistEntryCreateManyArgs} args - Arguments to create many StorageWaitlistEntries.
     * @example
     * // Create many StorageWaitlistEntries
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StorageWaitlistEntryCreateManyArgs>(args?: SelectSubset<T, StorageWaitlistEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StorageWaitlistEntries and returns the data saved in the database.
     * @param {StorageWaitlistEntryCreateManyAndReturnArgs} args - Arguments to create many StorageWaitlistEntries.
     * @example
     * // Create many StorageWaitlistEntries
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StorageWaitlistEntries and only return the `id`
     * const storageWaitlistEntryWithIdOnly = await prisma.storageWaitlistEntry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StorageWaitlistEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, StorageWaitlistEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StorageWaitlistEntry.
     * @param {StorageWaitlistEntryDeleteArgs} args - Arguments to delete one StorageWaitlistEntry.
     * @example
     * // Delete one StorageWaitlistEntry
     * const StorageWaitlistEntry = await prisma.storageWaitlistEntry.delete({
     *   where: {
     *     // ... filter to delete one StorageWaitlistEntry
     *   }
     * })
     * 
     */
    delete<T extends StorageWaitlistEntryDeleteArgs>(args: SelectSubset<T, StorageWaitlistEntryDeleteArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StorageWaitlistEntry.
     * @param {StorageWaitlistEntryUpdateArgs} args - Arguments to update one StorageWaitlistEntry.
     * @example
     * // Update one StorageWaitlistEntry
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StorageWaitlistEntryUpdateArgs>(args: SelectSubset<T, StorageWaitlistEntryUpdateArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StorageWaitlistEntries.
     * @param {StorageWaitlistEntryDeleteManyArgs} args - Arguments to filter StorageWaitlistEntries to delete.
     * @example
     * // Delete a few StorageWaitlistEntries
     * const { count } = await prisma.storageWaitlistEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StorageWaitlistEntryDeleteManyArgs>(args?: SelectSubset<T, StorageWaitlistEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageWaitlistEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StorageWaitlistEntries
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StorageWaitlistEntryUpdateManyArgs>(args: SelectSubset<T, StorageWaitlistEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StorageWaitlistEntry.
     * @param {StorageWaitlistEntryUpsertArgs} args - Arguments to update or create a StorageWaitlistEntry.
     * @example
     * // Update or create a StorageWaitlistEntry
     * const storageWaitlistEntry = await prisma.storageWaitlistEntry.upsert({
     *   create: {
     *     // ... data to create a StorageWaitlistEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StorageWaitlistEntry we want to update
     *   }
     * })
     */
    upsert<T extends StorageWaitlistEntryUpsertArgs>(args: SelectSubset<T, StorageWaitlistEntryUpsertArgs<ExtArgs>>): Prisma__StorageWaitlistEntryClient<$Result.GetResult<Prisma.$StorageWaitlistEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StorageWaitlistEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryCountArgs} args - Arguments to filter StorageWaitlistEntries to count.
     * @example
     * // Count the number of StorageWaitlistEntries
     * const count = await prisma.storageWaitlistEntry.count({
     *   where: {
     *     // ... the filter for the StorageWaitlistEntries we want to count
     *   }
     * })
    **/
    count<T extends StorageWaitlistEntryCountArgs>(
      args?: Subset<T, StorageWaitlistEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StorageWaitlistEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StorageWaitlistEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StorageWaitlistEntryAggregateArgs>(args: Subset<T, StorageWaitlistEntryAggregateArgs>): Prisma.PrismaPromise<GetStorageWaitlistEntryAggregateType<T>>

    /**
     * Group by StorageWaitlistEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageWaitlistEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StorageWaitlistEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StorageWaitlistEntryGroupByArgs['orderBy'] }
        : { orderBy?: StorageWaitlistEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StorageWaitlistEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageWaitlistEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StorageWaitlistEntry model
   */
  readonly fields: StorageWaitlistEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StorageWaitlistEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StorageWaitlistEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StorageWaitlistEntry model
   */ 
  interface StorageWaitlistEntryFieldRefs {
    readonly id: FieldRef<"StorageWaitlistEntry", 'String'>
    readonly unitNumber: FieldRef<"StorageWaitlistEntry", 'String'>
    readonly requestDate: FieldRef<"StorageWaitlistEntry", 'DateTime'>
    readonly createdAt: FieldRef<"StorageWaitlistEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"StorageWaitlistEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StorageWaitlistEntry findUnique
   */
  export type StorageWaitlistEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * Filter, which StorageWaitlistEntry to fetch.
     */
    where: StorageWaitlistEntryWhereUniqueInput
  }

  /**
   * StorageWaitlistEntry findUniqueOrThrow
   */
  export type StorageWaitlistEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * Filter, which StorageWaitlistEntry to fetch.
     */
    where: StorageWaitlistEntryWhereUniqueInput
  }

  /**
   * StorageWaitlistEntry findFirst
   */
  export type StorageWaitlistEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * Filter, which StorageWaitlistEntry to fetch.
     */
    where?: StorageWaitlistEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageWaitlistEntries to fetch.
     */
    orderBy?: StorageWaitlistEntryOrderByWithRelationInput | StorageWaitlistEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageWaitlistEntries.
     */
    cursor?: StorageWaitlistEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageWaitlistEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageWaitlistEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageWaitlistEntries.
     */
    distinct?: StorageWaitlistEntryScalarFieldEnum | StorageWaitlistEntryScalarFieldEnum[]
  }

  /**
   * StorageWaitlistEntry findFirstOrThrow
   */
  export type StorageWaitlistEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * Filter, which StorageWaitlistEntry to fetch.
     */
    where?: StorageWaitlistEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageWaitlistEntries to fetch.
     */
    orderBy?: StorageWaitlistEntryOrderByWithRelationInput | StorageWaitlistEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageWaitlistEntries.
     */
    cursor?: StorageWaitlistEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageWaitlistEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageWaitlistEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageWaitlistEntries.
     */
    distinct?: StorageWaitlistEntryScalarFieldEnum | StorageWaitlistEntryScalarFieldEnum[]
  }

  /**
   * StorageWaitlistEntry findMany
   */
  export type StorageWaitlistEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * Filter, which StorageWaitlistEntries to fetch.
     */
    where?: StorageWaitlistEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageWaitlistEntries to fetch.
     */
    orderBy?: StorageWaitlistEntryOrderByWithRelationInput | StorageWaitlistEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StorageWaitlistEntries.
     */
    cursor?: StorageWaitlistEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageWaitlistEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageWaitlistEntries.
     */
    skip?: number
    distinct?: StorageWaitlistEntryScalarFieldEnum | StorageWaitlistEntryScalarFieldEnum[]
  }

  /**
   * StorageWaitlistEntry create
   */
  export type StorageWaitlistEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * The data needed to create a StorageWaitlistEntry.
     */
    data: XOR<StorageWaitlistEntryCreateInput, StorageWaitlistEntryUncheckedCreateInput>
  }

  /**
   * StorageWaitlistEntry createMany
   */
  export type StorageWaitlistEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StorageWaitlistEntries.
     */
    data: StorageWaitlistEntryCreateManyInput | StorageWaitlistEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageWaitlistEntry createManyAndReturn
   */
  export type StorageWaitlistEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StorageWaitlistEntries.
     */
    data: StorageWaitlistEntryCreateManyInput | StorageWaitlistEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageWaitlistEntry update
   */
  export type StorageWaitlistEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * The data needed to update a StorageWaitlistEntry.
     */
    data: XOR<StorageWaitlistEntryUpdateInput, StorageWaitlistEntryUncheckedUpdateInput>
    /**
     * Choose, which StorageWaitlistEntry to update.
     */
    where: StorageWaitlistEntryWhereUniqueInput
  }

  /**
   * StorageWaitlistEntry updateMany
   */
  export type StorageWaitlistEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StorageWaitlistEntries.
     */
    data: XOR<StorageWaitlistEntryUpdateManyMutationInput, StorageWaitlistEntryUncheckedUpdateManyInput>
    /**
     * Filter which StorageWaitlistEntries to update
     */
    where?: StorageWaitlistEntryWhereInput
  }

  /**
   * StorageWaitlistEntry upsert
   */
  export type StorageWaitlistEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * The filter to search for the StorageWaitlistEntry to update in case it exists.
     */
    where: StorageWaitlistEntryWhereUniqueInput
    /**
     * In case the StorageWaitlistEntry found by the `where` argument doesn't exist, create a new StorageWaitlistEntry with this data.
     */
    create: XOR<StorageWaitlistEntryCreateInput, StorageWaitlistEntryUncheckedCreateInput>
    /**
     * In case the StorageWaitlistEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StorageWaitlistEntryUpdateInput, StorageWaitlistEntryUncheckedUpdateInput>
  }

  /**
   * StorageWaitlistEntry delete
   */
  export type StorageWaitlistEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
    /**
     * Filter which StorageWaitlistEntry to delete.
     */
    where: StorageWaitlistEntryWhereUniqueInput
  }

  /**
   * StorageWaitlistEntry deleteMany
   */
  export type StorageWaitlistEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageWaitlistEntries to delete
     */
    where?: StorageWaitlistEntryWhereInput
  }

  /**
   * StorageWaitlistEntry without action
   */
  export type StorageWaitlistEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageWaitlistEntry
     */
    select?: StorageWaitlistEntrySelect<ExtArgs> | null
  }


  /**
   * Model PatrolLog
   */

  export type AggregatePatrolLog = {
    _count: PatrolLogCountAggregateOutputType | null
    _min: PatrolLogMinAggregateOutputType | null
    _max: PatrolLogMaxAggregateOutputType | null
  }

  export type PatrolLogMinAggregateOutputType = {
    id: string | null
    reportedAt: Date | null
    notes: string | null
    isNothingToReport: boolean | null
    reporterId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatrolLogMaxAggregateOutputType = {
    id: string | null
    reportedAt: Date | null
    notes: string | null
    isNothingToReport: boolean | null
    reporterId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatrolLogCountAggregateOutputType = {
    id: number
    reportedAt: number
    notes: number
    isNothingToReport: number
    reporterId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatrolLogMinAggregateInputType = {
    id?: true
    reportedAt?: true
    notes?: true
    isNothingToReport?: true
    reporterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatrolLogMaxAggregateInputType = {
    id?: true
    reportedAt?: true
    notes?: true
    isNothingToReport?: true
    reporterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatrolLogCountAggregateInputType = {
    id?: true
    reportedAt?: true
    notes?: true
    isNothingToReport?: true
    reporterId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatrolLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatrolLog to aggregate.
     */
    where?: PatrolLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogs to fetch.
     */
    orderBy?: PatrolLogOrderByWithRelationInput | PatrolLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatrolLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatrolLogs
    **/
    _count?: true | PatrolLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatrolLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatrolLogMaxAggregateInputType
  }

  export type GetPatrolLogAggregateType<T extends PatrolLogAggregateArgs> = {
        [P in keyof T & keyof AggregatePatrolLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatrolLog[P]>
      : GetScalarType<T[P], AggregatePatrolLog[P]>
  }




  export type PatrolLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatrolLogWhereInput
    orderBy?: PatrolLogOrderByWithAggregationInput | PatrolLogOrderByWithAggregationInput[]
    by: PatrolLogScalarFieldEnum[] | PatrolLogScalarFieldEnum
    having?: PatrolLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatrolLogCountAggregateInputType | true
    _min?: PatrolLogMinAggregateInputType
    _max?: PatrolLogMaxAggregateInputType
  }

  export type PatrolLogGroupByOutputType = {
    id: string
    reportedAt: Date
    notes: string
    isNothingToReport: boolean
    reporterId: string
    createdAt: Date
    updatedAt: Date
    _count: PatrolLogCountAggregateOutputType | null
    _min: PatrolLogMinAggregateOutputType | null
    _max: PatrolLogMaxAggregateOutputType | null
  }

  type GetPatrolLogGroupByPayload<T extends PatrolLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatrolLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatrolLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatrolLogGroupByOutputType[P]>
            : GetScalarType<T[P], PatrolLogGroupByOutputType[P]>
        }
      >
    >


  export type PatrolLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportedAt?: boolean
    notes?: boolean
    isNothingToReport?: boolean
    reporterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    images?: boolean | PatrolLog$imagesArgs<ExtArgs>
    _count?: boolean | PatrolLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patrolLog"]>

  export type PatrolLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportedAt?: boolean
    notes?: boolean
    isNothingToReport?: boolean
    reporterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patrolLog"]>

  export type PatrolLogSelectScalar = {
    id?: boolean
    reportedAt?: boolean
    notes?: boolean
    isNothingToReport?: boolean
    reporterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatrolLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    images?: boolean | PatrolLog$imagesArgs<ExtArgs>
    _count?: boolean | PatrolLogCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatrolLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatrolLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatrolLog"
    objects: {
      reporter: Prisma.$UserPayload<ExtArgs>
      images: Prisma.$PatrolLogImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportedAt: Date
      notes: string
      isNothingToReport: boolean
      reporterId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patrolLog"]>
    composites: {}
  }

  type PatrolLogGetPayload<S extends boolean | null | undefined | PatrolLogDefaultArgs> = $Result.GetResult<Prisma.$PatrolLogPayload, S>

  type PatrolLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatrolLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatrolLogCountAggregateInputType | true
    }

  export interface PatrolLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatrolLog'], meta: { name: 'PatrolLog' } }
    /**
     * Find zero or one PatrolLog that matches the filter.
     * @param {PatrolLogFindUniqueArgs} args - Arguments to find a PatrolLog
     * @example
     * // Get one PatrolLog
     * const patrolLog = await prisma.patrolLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatrolLogFindUniqueArgs>(args: SelectSubset<T, PatrolLogFindUniqueArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatrolLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatrolLogFindUniqueOrThrowArgs} args - Arguments to find a PatrolLog
     * @example
     * // Get one PatrolLog
     * const patrolLog = await prisma.patrolLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatrolLogFindUniqueOrThrowArgs>(args: SelectSubset<T, PatrolLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatrolLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogFindFirstArgs} args - Arguments to find a PatrolLog
     * @example
     * // Get one PatrolLog
     * const patrolLog = await prisma.patrolLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatrolLogFindFirstArgs>(args?: SelectSubset<T, PatrolLogFindFirstArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatrolLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogFindFirstOrThrowArgs} args - Arguments to find a PatrolLog
     * @example
     * // Get one PatrolLog
     * const patrolLog = await prisma.patrolLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatrolLogFindFirstOrThrowArgs>(args?: SelectSubset<T, PatrolLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatrolLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatrolLogs
     * const patrolLogs = await prisma.patrolLog.findMany()
     * 
     * // Get first 10 PatrolLogs
     * const patrolLogs = await prisma.patrolLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patrolLogWithIdOnly = await prisma.patrolLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatrolLogFindManyArgs>(args?: SelectSubset<T, PatrolLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatrolLog.
     * @param {PatrolLogCreateArgs} args - Arguments to create a PatrolLog.
     * @example
     * // Create one PatrolLog
     * const PatrolLog = await prisma.patrolLog.create({
     *   data: {
     *     // ... data to create a PatrolLog
     *   }
     * })
     * 
     */
    create<T extends PatrolLogCreateArgs>(args: SelectSubset<T, PatrolLogCreateArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatrolLogs.
     * @param {PatrolLogCreateManyArgs} args - Arguments to create many PatrolLogs.
     * @example
     * // Create many PatrolLogs
     * const patrolLog = await prisma.patrolLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatrolLogCreateManyArgs>(args?: SelectSubset<T, PatrolLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatrolLogs and returns the data saved in the database.
     * @param {PatrolLogCreateManyAndReturnArgs} args - Arguments to create many PatrolLogs.
     * @example
     * // Create many PatrolLogs
     * const patrolLog = await prisma.patrolLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatrolLogs and only return the `id`
     * const patrolLogWithIdOnly = await prisma.patrolLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatrolLogCreateManyAndReturnArgs>(args?: SelectSubset<T, PatrolLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatrolLog.
     * @param {PatrolLogDeleteArgs} args - Arguments to delete one PatrolLog.
     * @example
     * // Delete one PatrolLog
     * const PatrolLog = await prisma.patrolLog.delete({
     *   where: {
     *     // ... filter to delete one PatrolLog
     *   }
     * })
     * 
     */
    delete<T extends PatrolLogDeleteArgs>(args: SelectSubset<T, PatrolLogDeleteArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatrolLog.
     * @param {PatrolLogUpdateArgs} args - Arguments to update one PatrolLog.
     * @example
     * // Update one PatrolLog
     * const patrolLog = await prisma.patrolLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatrolLogUpdateArgs>(args: SelectSubset<T, PatrolLogUpdateArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatrolLogs.
     * @param {PatrolLogDeleteManyArgs} args - Arguments to filter PatrolLogs to delete.
     * @example
     * // Delete a few PatrolLogs
     * const { count } = await prisma.patrolLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatrolLogDeleteManyArgs>(args?: SelectSubset<T, PatrolLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatrolLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatrolLogs
     * const patrolLog = await prisma.patrolLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatrolLogUpdateManyArgs>(args: SelectSubset<T, PatrolLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatrolLog.
     * @param {PatrolLogUpsertArgs} args - Arguments to update or create a PatrolLog.
     * @example
     * // Update or create a PatrolLog
     * const patrolLog = await prisma.patrolLog.upsert({
     *   create: {
     *     // ... data to create a PatrolLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatrolLog we want to update
     *   }
     * })
     */
    upsert<T extends PatrolLogUpsertArgs>(args: SelectSubset<T, PatrolLogUpsertArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatrolLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogCountArgs} args - Arguments to filter PatrolLogs to count.
     * @example
     * // Count the number of PatrolLogs
     * const count = await prisma.patrolLog.count({
     *   where: {
     *     // ... the filter for the PatrolLogs we want to count
     *   }
     * })
    **/
    count<T extends PatrolLogCountArgs>(
      args?: Subset<T, PatrolLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatrolLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatrolLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatrolLogAggregateArgs>(args: Subset<T, PatrolLogAggregateArgs>): Prisma.PrismaPromise<GetPatrolLogAggregateType<T>>

    /**
     * Group by PatrolLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatrolLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatrolLogGroupByArgs['orderBy'] }
        : { orderBy?: PatrolLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatrolLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatrolLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatrolLog model
   */
  readonly fields: PatrolLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatrolLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatrolLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reporter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    images<T extends PatrolLog$imagesArgs<ExtArgs> = {}>(args?: Subset<T, PatrolLog$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatrolLog model
   */ 
  interface PatrolLogFieldRefs {
    readonly id: FieldRef<"PatrolLog", 'String'>
    readonly reportedAt: FieldRef<"PatrolLog", 'DateTime'>
    readonly notes: FieldRef<"PatrolLog", 'String'>
    readonly isNothingToReport: FieldRef<"PatrolLog", 'Boolean'>
    readonly reporterId: FieldRef<"PatrolLog", 'String'>
    readonly createdAt: FieldRef<"PatrolLog", 'DateTime'>
    readonly updatedAt: FieldRef<"PatrolLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatrolLog findUnique
   */
  export type PatrolLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLog to fetch.
     */
    where: PatrolLogWhereUniqueInput
  }

  /**
   * PatrolLog findUniqueOrThrow
   */
  export type PatrolLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLog to fetch.
     */
    where: PatrolLogWhereUniqueInput
  }

  /**
   * PatrolLog findFirst
   */
  export type PatrolLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLog to fetch.
     */
    where?: PatrolLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogs to fetch.
     */
    orderBy?: PatrolLogOrderByWithRelationInput | PatrolLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatrolLogs.
     */
    cursor?: PatrolLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatrolLogs.
     */
    distinct?: PatrolLogScalarFieldEnum | PatrolLogScalarFieldEnum[]
  }

  /**
   * PatrolLog findFirstOrThrow
   */
  export type PatrolLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLog to fetch.
     */
    where?: PatrolLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogs to fetch.
     */
    orderBy?: PatrolLogOrderByWithRelationInput | PatrolLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatrolLogs.
     */
    cursor?: PatrolLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatrolLogs.
     */
    distinct?: PatrolLogScalarFieldEnum | PatrolLogScalarFieldEnum[]
  }

  /**
   * PatrolLog findMany
   */
  export type PatrolLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLogs to fetch.
     */
    where?: PatrolLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogs to fetch.
     */
    orderBy?: PatrolLogOrderByWithRelationInput | PatrolLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatrolLogs.
     */
    cursor?: PatrolLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogs.
     */
    skip?: number
    distinct?: PatrolLogScalarFieldEnum | PatrolLogScalarFieldEnum[]
  }

  /**
   * PatrolLog create
   */
  export type PatrolLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * The data needed to create a PatrolLog.
     */
    data: XOR<PatrolLogCreateInput, PatrolLogUncheckedCreateInput>
  }

  /**
   * PatrolLog createMany
   */
  export type PatrolLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatrolLogs.
     */
    data: PatrolLogCreateManyInput | PatrolLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatrolLog createManyAndReturn
   */
  export type PatrolLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatrolLogs.
     */
    data: PatrolLogCreateManyInput | PatrolLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatrolLog update
   */
  export type PatrolLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * The data needed to update a PatrolLog.
     */
    data: XOR<PatrolLogUpdateInput, PatrolLogUncheckedUpdateInput>
    /**
     * Choose, which PatrolLog to update.
     */
    where: PatrolLogWhereUniqueInput
  }

  /**
   * PatrolLog updateMany
   */
  export type PatrolLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatrolLogs.
     */
    data: XOR<PatrolLogUpdateManyMutationInput, PatrolLogUncheckedUpdateManyInput>
    /**
     * Filter which PatrolLogs to update
     */
    where?: PatrolLogWhereInput
  }

  /**
   * PatrolLog upsert
   */
  export type PatrolLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * The filter to search for the PatrolLog to update in case it exists.
     */
    where: PatrolLogWhereUniqueInput
    /**
     * In case the PatrolLog found by the `where` argument doesn't exist, create a new PatrolLog with this data.
     */
    create: XOR<PatrolLogCreateInput, PatrolLogUncheckedCreateInput>
    /**
     * In case the PatrolLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatrolLogUpdateInput, PatrolLogUncheckedUpdateInput>
  }

  /**
   * PatrolLog delete
   */
  export type PatrolLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
    /**
     * Filter which PatrolLog to delete.
     */
    where: PatrolLogWhereUniqueInput
  }

  /**
   * PatrolLog deleteMany
   */
  export type PatrolLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatrolLogs to delete
     */
    where?: PatrolLogWhereInput
  }

  /**
   * PatrolLog.images
   */
  export type PatrolLog$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    where?: PatrolLogImageWhereInput
    orderBy?: PatrolLogImageOrderByWithRelationInput | PatrolLogImageOrderByWithRelationInput[]
    cursor?: PatrolLogImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatrolLogImageScalarFieldEnum | PatrolLogImageScalarFieldEnum[]
  }

  /**
   * PatrolLog without action
   */
  export type PatrolLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLog
     */
    select?: PatrolLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogInclude<ExtArgs> | null
  }


  /**
   * Model PatrolLogImage
   */

  export type AggregatePatrolLogImage = {
    _count: PatrolLogImageCountAggregateOutputType | null
    _min: PatrolLogImageMinAggregateOutputType | null
    _max: PatrolLogImageMaxAggregateOutputType | null
  }

  export type PatrolLogImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    patrolLogId: string | null
    createdAt: Date | null
  }

  export type PatrolLogImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    patrolLogId: string | null
    createdAt: Date | null
  }

  export type PatrolLogImageCountAggregateOutputType = {
    id: number
    url: number
    patrolLogId: number
    createdAt: number
    _all: number
  }


  export type PatrolLogImageMinAggregateInputType = {
    id?: true
    url?: true
    patrolLogId?: true
    createdAt?: true
  }

  export type PatrolLogImageMaxAggregateInputType = {
    id?: true
    url?: true
    patrolLogId?: true
    createdAt?: true
  }

  export type PatrolLogImageCountAggregateInputType = {
    id?: true
    url?: true
    patrolLogId?: true
    createdAt?: true
    _all?: true
  }

  export type PatrolLogImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatrolLogImage to aggregate.
     */
    where?: PatrolLogImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogImages to fetch.
     */
    orderBy?: PatrolLogImageOrderByWithRelationInput | PatrolLogImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatrolLogImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatrolLogImages
    **/
    _count?: true | PatrolLogImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatrolLogImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatrolLogImageMaxAggregateInputType
  }

  export type GetPatrolLogImageAggregateType<T extends PatrolLogImageAggregateArgs> = {
        [P in keyof T & keyof AggregatePatrolLogImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatrolLogImage[P]>
      : GetScalarType<T[P], AggregatePatrolLogImage[P]>
  }




  export type PatrolLogImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatrolLogImageWhereInput
    orderBy?: PatrolLogImageOrderByWithAggregationInput | PatrolLogImageOrderByWithAggregationInput[]
    by: PatrolLogImageScalarFieldEnum[] | PatrolLogImageScalarFieldEnum
    having?: PatrolLogImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatrolLogImageCountAggregateInputType | true
    _min?: PatrolLogImageMinAggregateInputType
    _max?: PatrolLogImageMaxAggregateInputType
  }

  export type PatrolLogImageGroupByOutputType = {
    id: string
    url: string
    patrolLogId: string
    createdAt: Date
    _count: PatrolLogImageCountAggregateOutputType | null
    _min: PatrolLogImageMinAggregateOutputType | null
    _max: PatrolLogImageMaxAggregateOutputType | null
  }

  type GetPatrolLogImageGroupByPayload<T extends PatrolLogImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatrolLogImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatrolLogImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatrolLogImageGroupByOutputType[P]>
            : GetScalarType<T[P], PatrolLogImageGroupByOutputType[P]>
        }
      >
    >


  export type PatrolLogImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    patrolLogId?: boolean
    createdAt?: boolean
    patrolLog?: boolean | PatrolLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patrolLogImage"]>

  export type PatrolLogImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    patrolLogId?: boolean
    createdAt?: boolean
    patrolLog?: boolean | PatrolLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patrolLogImage"]>

  export type PatrolLogImageSelectScalar = {
    id?: boolean
    url?: boolean
    patrolLogId?: boolean
    createdAt?: boolean
  }

  export type PatrolLogImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patrolLog?: boolean | PatrolLogDefaultArgs<ExtArgs>
  }
  export type PatrolLogImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patrolLog?: boolean | PatrolLogDefaultArgs<ExtArgs>
  }

  export type $PatrolLogImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatrolLogImage"
    objects: {
      patrolLog: Prisma.$PatrolLogPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      patrolLogId: string
      createdAt: Date
    }, ExtArgs["result"]["patrolLogImage"]>
    composites: {}
  }

  type PatrolLogImageGetPayload<S extends boolean | null | undefined | PatrolLogImageDefaultArgs> = $Result.GetResult<Prisma.$PatrolLogImagePayload, S>

  type PatrolLogImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatrolLogImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatrolLogImageCountAggregateInputType | true
    }

  export interface PatrolLogImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatrolLogImage'], meta: { name: 'PatrolLogImage' } }
    /**
     * Find zero or one PatrolLogImage that matches the filter.
     * @param {PatrolLogImageFindUniqueArgs} args - Arguments to find a PatrolLogImage
     * @example
     * // Get one PatrolLogImage
     * const patrolLogImage = await prisma.patrolLogImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatrolLogImageFindUniqueArgs>(args: SelectSubset<T, PatrolLogImageFindUniqueArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatrolLogImage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatrolLogImageFindUniqueOrThrowArgs} args - Arguments to find a PatrolLogImage
     * @example
     * // Get one PatrolLogImage
     * const patrolLogImage = await prisma.patrolLogImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatrolLogImageFindUniqueOrThrowArgs>(args: SelectSubset<T, PatrolLogImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatrolLogImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageFindFirstArgs} args - Arguments to find a PatrolLogImage
     * @example
     * // Get one PatrolLogImage
     * const patrolLogImage = await prisma.patrolLogImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatrolLogImageFindFirstArgs>(args?: SelectSubset<T, PatrolLogImageFindFirstArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatrolLogImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageFindFirstOrThrowArgs} args - Arguments to find a PatrolLogImage
     * @example
     * // Get one PatrolLogImage
     * const patrolLogImage = await prisma.patrolLogImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatrolLogImageFindFirstOrThrowArgs>(args?: SelectSubset<T, PatrolLogImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatrolLogImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatrolLogImages
     * const patrolLogImages = await prisma.patrolLogImage.findMany()
     * 
     * // Get first 10 PatrolLogImages
     * const patrolLogImages = await prisma.patrolLogImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patrolLogImageWithIdOnly = await prisma.patrolLogImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatrolLogImageFindManyArgs>(args?: SelectSubset<T, PatrolLogImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatrolLogImage.
     * @param {PatrolLogImageCreateArgs} args - Arguments to create a PatrolLogImage.
     * @example
     * // Create one PatrolLogImage
     * const PatrolLogImage = await prisma.patrolLogImage.create({
     *   data: {
     *     // ... data to create a PatrolLogImage
     *   }
     * })
     * 
     */
    create<T extends PatrolLogImageCreateArgs>(args: SelectSubset<T, PatrolLogImageCreateArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatrolLogImages.
     * @param {PatrolLogImageCreateManyArgs} args - Arguments to create many PatrolLogImages.
     * @example
     * // Create many PatrolLogImages
     * const patrolLogImage = await prisma.patrolLogImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatrolLogImageCreateManyArgs>(args?: SelectSubset<T, PatrolLogImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatrolLogImages and returns the data saved in the database.
     * @param {PatrolLogImageCreateManyAndReturnArgs} args - Arguments to create many PatrolLogImages.
     * @example
     * // Create many PatrolLogImages
     * const patrolLogImage = await prisma.patrolLogImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatrolLogImages and only return the `id`
     * const patrolLogImageWithIdOnly = await prisma.patrolLogImage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatrolLogImageCreateManyAndReturnArgs>(args?: SelectSubset<T, PatrolLogImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatrolLogImage.
     * @param {PatrolLogImageDeleteArgs} args - Arguments to delete one PatrolLogImage.
     * @example
     * // Delete one PatrolLogImage
     * const PatrolLogImage = await prisma.patrolLogImage.delete({
     *   where: {
     *     // ... filter to delete one PatrolLogImage
     *   }
     * })
     * 
     */
    delete<T extends PatrolLogImageDeleteArgs>(args: SelectSubset<T, PatrolLogImageDeleteArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatrolLogImage.
     * @param {PatrolLogImageUpdateArgs} args - Arguments to update one PatrolLogImage.
     * @example
     * // Update one PatrolLogImage
     * const patrolLogImage = await prisma.patrolLogImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatrolLogImageUpdateArgs>(args: SelectSubset<T, PatrolLogImageUpdateArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatrolLogImages.
     * @param {PatrolLogImageDeleteManyArgs} args - Arguments to filter PatrolLogImages to delete.
     * @example
     * // Delete a few PatrolLogImages
     * const { count } = await prisma.patrolLogImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatrolLogImageDeleteManyArgs>(args?: SelectSubset<T, PatrolLogImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatrolLogImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatrolLogImages
     * const patrolLogImage = await prisma.patrolLogImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatrolLogImageUpdateManyArgs>(args: SelectSubset<T, PatrolLogImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatrolLogImage.
     * @param {PatrolLogImageUpsertArgs} args - Arguments to update or create a PatrolLogImage.
     * @example
     * // Update or create a PatrolLogImage
     * const patrolLogImage = await prisma.patrolLogImage.upsert({
     *   create: {
     *     // ... data to create a PatrolLogImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatrolLogImage we want to update
     *   }
     * })
     */
    upsert<T extends PatrolLogImageUpsertArgs>(args: SelectSubset<T, PatrolLogImageUpsertArgs<ExtArgs>>): Prisma__PatrolLogImageClient<$Result.GetResult<Prisma.$PatrolLogImagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatrolLogImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageCountArgs} args - Arguments to filter PatrolLogImages to count.
     * @example
     * // Count the number of PatrolLogImages
     * const count = await prisma.patrolLogImage.count({
     *   where: {
     *     // ... the filter for the PatrolLogImages we want to count
     *   }
     * })
    **/
    count<T extends PatrolLogImageCountArgs>(
      args?: Subset<T, PatrolLogImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatrolLogImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatrolLogImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatrolLogImageAggregateArgs>(args: Subset<T, PatrolLogImageAggregateArgs>): Prisma.PrismaPromise<GetPatrolLogImageAggregateType<T>>

    /**
     * Group by PatrolLogImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatrolLogImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatrolLogImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatrolLogImageGroupByArgs['orderBy'] }
        : { orderBy?: PatrolLogImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatrolLogImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatrolLogImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatrolLogImage model
   */
  readonly fields: PatrolLogImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatrolLogImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatrolLogImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patrolLog<T extends PatrolLogDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatrolLogDefaultArgs<ExtArgs>>): Prisma__PatrolLogClient<$Result.GetResult<Prisma.$PatrolLogPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatrolLogImage model
   */ 
  interface PatrolLogImageFieldRefs {
    readonly id: FieldRef<"PatrolLogImage", 'String'>
    readonly url: FieldRef<"PatrolLogImage", 'String'>
    readonly patrolLogId: FieldRef<"PatrolLogImage", 'String'>
    readonly createdAt: FieldRef<"PatrolLogImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatrolLogImage findUnique
   */
  export type PatrolLogImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLogImage to fetch.
     */
    where: PatrolLogImageWhereUniqueInput
  }

  /**
   * PatrolLogImage findUniqueOrThrow
   */
  export type PatrolLogImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLogImage to fetch.
     */
    where: PatrolLogImageWhereUniqueInput
  }

  /**
   * PatrolLogImage findFirst
   */
  export type PatrolLogImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLogImage to fetch.
     */
    where?: PatrolLogImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogImages to fetch.
     */
    orderBy?: PatrolLogImageOrderByWithRelationInput | PatrolLogImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatrolLogImages.
     */
    cursor?: PatrolLogImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatrolLogImages.
     */
    distinct?: PatrolLogImageScalarFieldEnum | PatrolLogImageScalarFieldEnum[]
  }

  /**
   * PatrolLogImage findFirstOrThrow
   */
  export type PatrolLogImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLogImage to fetch.
     */
    where?: PatrolLogImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogImages to fetch.
     */
    orderBy?: PatrolLogImageOrderByWithRelationInput | PatrolLogImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatrolLogImages.
     */
    cursor?: PatrolLogImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatrolLogImages.
     */
    distinct?: PatrolLogImageScalarFieldEnum | PatrolLogImageScalarFieldEnum[]
  }

  /**
   * PatrolLogImage findMany
   */
  export type PatrolLogImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * Filter, which PatrolLogImages to fetch.
     */
    where?: PatrolLogImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatrolLogImages to fetch.
     */
    orderBy?: PatrolLogImageOrderByWithRelationInput | PatrolLogImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatrolLogImages.
     */
    cursor?: PatrolLogImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatrolLogImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatrolLogImages.
     */
    skip?: number
    distinct?: PatrolLogImageScalarFieldEnum | PatrolLogImageScalarFieldEnum[]
  }

  /**
   * PatrolLogImage create
   */
  export type PatrolLogImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * The data needed to create a PatrolLogImage.
     */
    data: XOR<PatrolLogImageCreateInput, PatrolLogImageUncheckedCreateInput>
  }

  /**
   * PatrolLogImage createMany
   */
  export type PatrolLogImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatrolLogImages.
     */
    data: PatrolLogImageCreateManyInput | PatrolLogImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatrolLogImage createManyAndReturn
   */
  export type PatrolLogImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatrolLogImages.
     */
    data: PatrolLogImageCreateManyInput | PatrolLogImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatrolLogImage update
   */
  export type PatrolLogImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * The data needed to update a PatrolLogImage.
     */
    data: XOR<PatrolLogImageUpdateInput, PatrolLogImageUncheckedUpdateInput>
    /**
     * Choose, which PatrolLogImage to update.
     */
    where: PatrolLogImageWhereUniqueInput
  }

  /**
   * PatrolLogImage updateMany
   */
  export type PatrolLogImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatrolLogImages.
     */
    data: XOR<PatrolLogImageUpdateManyMutationInput, PatrolLogImageUncheckedUpdateManyInput>
    /**
     * Filter which PatrolLogImages to update
     */
    where?: PatrolLogImageWhereInput
  }

  /**
   * PatrolLogImage upsert
   */
  export type PatrolLogImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * The filter to search for the PatrolLogImage to update in case it exists.
     */
    where: PatrolLogImageWhereUniqueInput
    /**
     * In case the PatrolLogImage found by the `where` argument doesn't exist, create a new PatrolLogImage with this data.
     */
    create: XOR<PatrolLogImageCreateInput, PatrolLogImageUncheckedCreateInput>
    /**
     * In case the PatrolLogImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatrolLogImageUpdateInput, PatrolLogImageUncheckedUpdateInput>
  }

  /**
   * PatrolLogImage delete
   */
  export type PatrolLogImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
    /**
     * Filter which PatrolLogImage to delete.
     */
    where: PatrolLogImageWhereUniqueInput
  }

  /**
   * PatrolLogImage deleteMany
   */
  export type PatrolLogImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatrolLogImages to delete
     */
    where?: PatrolLogImageWhereInput
  }

  /**
   * PatrolLogImage without action
   */
  export type PatrolLogImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatrolLogImage
     */
    select?: PatrolLogImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatrolLogImageInclude<ExtArgs> | null
  }


  /**
   * Model RenovationWork
   */

  export type AggregateRenovationWork = {
    _count: RenovationWorkCountAggregateOutputType | null
    _min: RenovationWorkMinAggregateOutputType | null
    _max: RenovationWorkMaxAggregateOutputType | null
  }

  export type RenovationWorkMinAggregateOutputType = {
    id: string | null
    unitNumber: string | null
    startDate: Date | null
    endDate: Date | null
    damageDepositCheckNumber: string | null
    isExempted: boolean | null
    description: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RenovationWorkMaxAggregateOutputType = {
    id: string | null
    unitNumber: string | null
    startDate: Date | null
    endDate: Date | null
    damageDepositCheckNumber: string | null
    isExempted: boolean | null
    description: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RenovationWorkCountAggregateOutputType = {
    id: number
    unitNumber: number
    startDate: number
    endDate: number
    damageDepositCheckNumber: number
    isExempted: number
    description: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RenovationWorkMinAggregateInputType = {
    id?: true
    unitNumber?: true
    startDate?: true
    endDate?: true
    damageDepositCheckNumber?: true
    isExempted?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RenovationWorkMaxAggregateInputType = {
    id?: true
    unitNumber?: true
    startDate?: true
    endDate?: true
    damageDepositCheckNumber?: true
    isExempted?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RenovationWorkCountAggregateInputType = {
    id?: true
    unitNumber?: true
    startDate?: true
    endDate?: true
    damageDepositCheckNumber?: true
    isExempted?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RenovationWorkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RenovationWork to aggregate.
     */
    where?: RenovationWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorks to fetch.
     */
    orderBy?: RenovationWorkOrderByWithRelationInput | RenovationWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RenovationWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RenovationWorks
    **/
    _count?: true | RenovationWorkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RenovationWorkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RenovationWorkMaxAggregateInputType
  }

  export type GetRenovationWorkAggregateType<T extends RenovationWorkAggregateArgs> = {
        [P in keyof T & keyof AggregateRenovationWork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRenovationWork[P]>
      : GetScalarType<T[P], AggregateRenovationWork[P]>
  }




  export type RenovationWorkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenovationWorkWhereInput
    orderBy?: RenovationWorkOrderByWithAggregationInput | RenovationWorkOrderByWithAggregationInput[]
    by: RenovationWorkScalarFieldEnum[] | RenovationWorkScalarFieldEnum
    having?: RenovationWorkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RenovationWorkCountAggregateInputType | true
    _min?: RenovationWorkMinAggregateInputType
    _max?: RenovationWorkMaxAggregateInputType
  }

  export type RenovationWorkGroupByOutputType = {
    id: string
    unitNumber: string
    startDate: Date
    endDate: Date
    damageDepositCheckNumber: string | null
    isExempted: boolean
    description: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: RenovationWorkCountAggregateOutputType | null
    _min: RenovationWorkMinAggregateOutputType | null
    _max: RenovationWorkMaxAggregateOutputType | null
  }

  type GetRenovationWorkGroupByPayload<T extends RenovationWorkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RenovationWorkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RenovationWorkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RenovationWorkGroupByOutputType[P]>
            : GetScalarType<T[P], RenovationWorkGroupByOutputType[P]>
        }
      >
    >


  export type RenovationWorkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitNumber?: boolean
    startDate?: boolean
    endDate?: boolean
    damageDepositCheckNumber?: boolean
    isExempted?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    files?: boolean | RenovationWork$filesArgs<ExtArgs>
    _count?: boolean | RenovationWorkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["renovationWork"]>

  export type RenovationWorkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitNumber?: boolean
    startDate?: boolean
    endDate?: boolean
    damageDepositCheckNumber?: boolean
    isExempted?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["renovationWork"]>

  export type RenovationWorkSelectScalar = {
    id?: boolean
    unitNumber?: boolean
    startDate?: boolean
    endDate?: boolean
    damageDepositCheckNumber?: boolean
    isExempted?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RenovationWorkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | RenovationWork$filesArgs<ExtArgs>
    _count?: boolean | RenovationWorkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RenovationWorkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RenovationWorkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RenovationWork"
    objects: {
      files: Prisma.$RenovationWorkFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      unitNumber: string
      startDate: Date
      endDate: Date
      damageDepositCheckNumber: string | null
      isExempted: boolean
      description: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["renovationWork"]>
    composites: {}
  }

  type RenovationWorkGetPayload<S extends boolean | null | undefined | RenovationWorkDefaultArgs> = $Result.GetResult<Prisma.$RenovationWorkPayload, S>

  type RenovationWorkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RenovationWorkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RenovationWorkCountAggregateInputType | true
    }

  export interface RenovationWorkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RenovationWork'], meta: { name: 'RenovationWork' } }
    /**
     * Find zero or one RenovationWork that matches the filter.
     * @param {RenovationWorkFindUniqueArgs} args - Arguments to find a RenovationWork
     * @example
     * // Get one RenovationWork
     * const renovationWork = await prisma.renovationWork.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RenovationWorkFindUniqueArgs>(args: SelectSubset<T, RenovationWorkFindUniqueArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RenovationWork that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RenovationWorkFindUniqueOrThrowArgs} args - Arguments to find a RenovationWork
     * @example
     * // Get one RenovationWork
     * const renovationWork = await prisma.renovationWork.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RenovationWorkFindUniqueOrThrowArgs>(args: SelectSubset<T, RenovationWorkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RenovationWork that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFindFirstArgs} args - Arguments to find a RenovationWork
     * @example
     * // Get one RenovationWork
     * const renovationWork = await prisma.renovationWork.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RenovationWorkFindFirstArgs>(args?: SelectSubset<T, RenovationWorkFindFirstArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RenovationWork that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFindFirstOrThrowArgs} args - Arguments to find a RenovationWork
     * @example
     * // Get one RenovationWork
     * const renovationWork = await prisma.renovationWork.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RenovationWorkFindFirstOrThrowArgs>(args?: SelectSubset<T, RenovationWorkFindFirstOrThrowArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RenovationWorks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RenovationWorks
     * const renovationWorks = await prisma.renovationWork.findMany()
     * 
     * // Get first 10 RenovationWorks
     * const renovationWorks = await prisma.renovationWork.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const renovationWorkWithIdOnly = await prisma.renovationWork.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RenovationWorkFindManyArgs>(args?: SelectSubset<T, RenovationWorkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RenovationWork.
     * @param {RenovationWorkCreateArgs} args - Arguments to create a RenovationWork.
     * @example
     * // Create one RenovationWork
     * const RenovationWork = await prisma.renovationWork.create({
     *   data: {
     *     // ... data to create a RenovationWork
     *   }
     * })
     * 
     */
    create<T extends RenovationWorkCreateArgs>(args: SelectSubset<T, RenovationWorkCreateArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RenovationWorks.
     * @param {RenovationWorkCreateManyArgs} args - Arguments to create many RenovationWorks.
     * @example
     * // Create many RenovationWorks
     * const renovationWork = await prisma.renovationWork.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RenovationWorkCreateManyArgs>(args?: SelectSubset<T, RenovationWorkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RenovationWorks and returns the data saved in the database.
     * @param {RenovationWorkCreateManyAndReturnArgs} args - Arguments to create many RenovationWorks.
     * @example
     * // Create many RenovationWorks
     * const renovationWork = await prisma.renovationWork.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RenovationWorks and only return the `id`
     * const renovationWorkWithIdOnly = await prisma.renovationWork.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RenovationWorkCreateManyAndReturnArgs>(args?: SelectSubset<T, RenovationWorkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RenovationWork.
     * @param {RenovationWorkDeleteArgs} args - Arguments to delete one RenovationWork.
     * @example
     * // Delete one RenovationWork
     * const RenovationWork = await prisma.renovationWork.delete({
     *   where: {
     *     // ... filter to delete one RenovationWork
     *   }
     * })
     * 
     */
    delete<T extends RenovationWorkDeleteArgs>(args: SelectSubset<T, RenovationWorkDeleteArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RenovationWork.
     * @param {RenovationWorkUpdateArgs} args - Arguments to update one RenovationWork.
     * @example
     * // Update one RenovationWork
     * const renovationWork = await prisma.renovationWork.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RenovationWorkUpdateArgs>(args: SelectSubset<T, RenovationWorkUpdateArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RenovationWorks.
     * @param {RenovationWorkDeleteManyArgs} args - Arguments to filter RenovationWorks to delete.
     * @example
     * // Delete a few RenovationWorks
     * const { count } = await prisma.renovationWork.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RenovationWorkDeleteManyArgs>(args?: SelectSubset<T, RenovationWorkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RenovationWorks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RenovationWorks
     * const renovationWork = await prisma.renovationWork.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RenovationWorkUpdateManyArgs>(args: SelectSubset<T, RenovationWorkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RenovationWork.
     * @param {RenovationWorkUpsertArgs} args - Arguments to update or create a RenovationWork.
     * @example
     * // Update or create a RenovationWork
     * const renovationWork = await prisma.renovationWork.upsert({
     *   create: {
     *     // ... data to create a RenovationWork
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RenovationWork we want to update
     *   }
     * })
     */
    upsert<T extends RenovationWorkUpsertArgs>(args: SelectSubset<T, RenovationWorkUpsertArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RenovationWorks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkCountArgs} args - Arguments to filter RenovationWorks to count.
     * @example
     * // Count the number of RenovationWorks
     * const count = await prisma.renovationWork.count({
     *   where: {
     *     // ... the filter for the RenovationWorks we want to count
     *   }
     * })
    **/
    count<T extends RenovationWorkCountArgs>(
      args?: Subset<T, RenovationWorkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RenovationWorkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RenovationWork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RenovationWorkAggregateArgs>(args: Subset<T, RenovationWorkAggregateArgs>): Prisma.PrismaPromise<GetRenovationWorkAggregateType<T>>

    /**
     * Group by RenovationWork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RenovationWorkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RenovationWorkGroupByArgs['orderBy'] }
        : { orderBy?: RenovationWorkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RenovationWorkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRenovationWorkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RenovationWork model
   */
  readonly fields: RenovationWorkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RenovationWork.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RenovationWorkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    files<T extends RenovationWork$filesArgs<ExtArgs> = {}>(args?: Subset<T, RenovationWork$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RenovationWork model
   */ 
  interface RenovationWorkFieldRefs {
    readonly id: FieldRef<"RenovationWork", 'String'>
    readonly unitNumber: FieldRef<"RenovationWork", 'String'>
    readonly startDate: FieldRef<"RenovationWork", 'DateTime'>
    readonly endDate: FieldRef<"RenovationWork", 'DateTime'>
    readonly damageDepositCheckNumber: FieldRef<"RenovationWork", 'String'>
    readonly isExempted: FieldRef<"RenovationWork", 'Boolean'>
    readonly description: FieldRef<"RenovationWork", 'String'>
    readonly status: FieldRef<"RenovationWork", 'String'>
    readonly createdAt: FieldRef<"RenovationWork", 'DateTime'>
    readonly updatedAt: FieldRef<"RenovationWork", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RenovationWork findUnique
   */
  export type RenovationWorkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWork to fetch.
     */
    where: RenovationWorkWhereUniqueInput
  }

  /**
   * RenovationWork findUniqueOrThrow
   */
  export type RenovationWorkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWork to fetch.
     */
    where: RenovationWorkWhereUniqueInput
  }

  /**
   * RenovationWork findFirst
   */
  export type RenovationWorkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWork to fetch.
     */
    where?: RenovationWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorks to fetch.
     */
    orderBy?: RenovationWorkOrderByWithRelationInput | RenovationWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RenovationWorks.
     */
    cursor?: RenovationWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RenovationWorks.
     */
    distinct?: RenovationWorkScalarFieldEnum | RenovationWorkScalarFieldEnum[]
  }

  /**
   * RenovationWork findFirstOrThrow
   */
  export type RenovationWorkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWork to fetch.
     */
    where?: RenovationWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorks to fetch.
     */
    orderBy?: RenovationWorkOrderByWithRelationInput | RenovationWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RenovationWorks.
     */
    cursor?: RenovationWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RenovationWorks.
     */
    distinct?: RenovationWorkScalarFieldEnum | RenovationWorkScalarFieldEnum[]
  }

  /**
   * RenovationWork findMany
   */
  export type RenovationWorkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWorks to fetch.
     */
    where?: RenovationWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorks to fetch.
     */
    orderBy?: RenovationWorkOrderByWithRelationInput | RenovationWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RenovationWorks.
     */
    cursor?: RenovationWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorks.
     */
    skip?: number
    distinct?: RenovationWorkScalarFieldEnum | RenovationWorkScalarFieldEnum[]
  }

  /**
   * RenovationWork create
   */
  export type RenovationWorkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * The data needed to create a RenovationWork.
     */
    data: XOR<RenovationWorkCreateInput, RenovationWorkUncheckedCreateInput>
  }

  /**
   * RenovationWork createMany
   */
  export type RenovationWorkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RenovationWorks.
     */
    data: RenovationWorkCreateManyInput | RenovationWorkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RenovationWork createManyAndReturn
   */
  export type RenovationWorkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RenovationWorks.
     */
    data: RenovationWorkCreateManyInput | RenovationWorkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RenovationWork update
   */
  export type RenovationWorkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * The data needed to update a RenovationWork.
     */
    data: XOR<RenovationWorkUpdateInput, RenovationWorkUncheckedUpdateInput>
    /**
     * Choose, which RenovationWork to update.
     */
    where: RenovationWorkWhereUniqueInput
  }

  /**
   * RenovationWork updateMany
   */
  export type RenovationWorkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RenovationWorks.
     */
    data: XOR<RenovationWorkUpdateManyMutationInput, RenovationWorkUncheckedUpdateManyInput>
    /**
     * Filter which RenovationWorks to update
     */
    where?: RenovationWorkWhereInput
  }

  /**
   * RenovationWork upsert
   */
  export type RenovationWorkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * The filter to search for the RenovationWork to update in case it exists.
     */
    where: RenovationWorkWhereUniqueInput
    /**
     * In case the RenovationWork found by the `where` argument doesn't exist, create a new RenovationWork with this data.
     */
    create: XOR<RenovationWorkCreateInput, RenovationWorkUncheckedCreateInput>
    /**
     * In case the RenovationWork was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RenovationWorkUpdateInput, RenovationWorkUncheckedUpdateInput>
  }

  /**
   * RenovationWork delete
   */
  export type RenovationWorkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
    /**
     * Filter which RenovationWork to delete.
     */
    where: RenovationWorkWhereUniqueInput
  }

  /**
   * RenovationWork deleteMany
   */
  export type RenovationWorkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RenovationWorks to delete
     */
    where?: RenovationWorkWhereInput
  }

  /**
   * RenovationWork.files
   */
  export type RenovationWork$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    where?: RenovationWorkFileWhereInput
    orderBy?: RenovationWorkFileOrderByWithRelationInput | RenovationWorkFileOrderByWithRelationInput[]
    cursor?: RenovationWorkFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RenovationWorkFileScalarFieldEnum | RenovationWorkFileScalarFieldEnum[]
  }

  /**
   * RenovationWork without action
   */
  export type RenovationWorkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWork
     */
    select?: RenovationWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkInclude<ExtArgs> | null
  }


  /**
   * Model RenovationWorkFile
   */

  export type AggregateRenovationWorkFile = {
    _count: RenovationWorkFileCountAggregateOutputType | null
    _min: RenovationWorkFileMinAggregateOutputType | null
    _max: RenovationWorkFileMaxAggregateOutputType | null
  }

  export type RenovationWorkFileMinAggregateOutputType = {
    id: string | null
    renovationWorkId: string | null
    fileName: string | null
    fileUrl: string | null
    fileType: string | null
    createdAt: Date | null
  }

  export type RenovationWorkFileMaxAggregateOutputType = {
    id: string | null
    renovationWorkId: string | null
    fileName: string | null
    fileUrl: string | null
    fileType: string | null
    createdAt: Date | null
  }

  export type RenovationWorkFileCountAggregateOutputType = {
    id: number
    renovationWorkId: number
    fileName: number
    fileUrl: number
    fileType: number
    createdAt: number
    _all: number
  }


  export type RenovationWorkFileMinAggregateInputType = {
    id?: true
    renovationWorkId?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    createdAt?: true
  }

  export type RenovationWorkFileMaxAggregateInputType = {
    id?: true
    renovationWorkId?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    createdAt?: true
  }

  export type RenovationWorkFileCountAggregateInputType = {
    id?: true
    renovationWorkId?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    createdAt?: true
    _all?: true
  }

  export type RenovationWorkFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RenovationWorkFile to aggregate.
     */
    where?: RenovationWorkFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorkFiles to fetch.
     */
    orderBy?: RenovationWorkFileOrderByWithRelationInput | RenovationWorkFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RenovationWorkFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorkFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorkFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RenovationWorkFiles
    **/
    _count?: true | RenovationWorkFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RenovationWorkFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RenovationWorkFileMaxAggregateInputType
  }

  export type GetRenovationWorkFileAggregateType<T extends RenovationWorkFileAggregateArgs> = {
        [P in keyof T & keyof AggregateRenovationWorkFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRenovationWorkFile[P]>
      : GetScalarType<T[P], AggregateRenovationWorkFile[P]>
  }




  export type RenovationWorkFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenovationWorkFileWhereInput
    orderBy?: RenovationWorkFileOrderByWithAggregationInput | RenovationWorkFileOrderByWithAggregationInput[]
    by: RenovationWorkFileScalarFieldEnum[] | RenovationWorkFileScalarFieldEnum
    having?: RenovationWorkFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RenovationWorkFileCountAggregateInputType | true
    _min?: RenovationWorkFileMinAggregateInputType
    _max?: RenovationWorkFileMaxAggregateInputType
  }

  export type RenovationWorkFileGroupByOutputType = {
    id: string
    renovationWorkId: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt: Date
    _count: RenovationWorkFileCountAggregateOutputType | null
    _min: RenovationWorkFileMinAggregateOutputType | null
    _max: RenovationWorkFileMaxAggregateOutputType | null
  }

  type GetRenovationWorkFileGroupByPayload<T extends RenovationWorkFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RenovationWorkFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RenovationWorkFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RenovationWorkFileGroupByOutputType[P]>
            : GetScalarType<T[P], RenovationWorkFileGroupByOutputType[P]>
        }
      >
    >


  export type RenovationWorkFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    renovationWorkId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    createdAt?: boolean
    renovationWork?: boolean | RenovationWorkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["renovationWorkFile"]>

  export type RenovationWorkFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    renovationWorkId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    createdAt?: boolean
    renovationWork?: boolean | RenovationWorkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["renovationWorkFile"]>

  export type RenovationWorkFileSelectScalar = {
    id?: boolean
    renovationWorkId?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    createdAt?: boolean
  }

  export type RenovationWorkFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renovationWork?: boolean | RenovationWorkDefaultArgs<ExtArgs>
  }
  export type RenovationWorkFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renovationWork?: boolean | RenovationWorkDefaultArgs<ExtArgs>
  }

  export type $RenovationWorkFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RenovationWorkFile"
    objects: {
      renovationWork: Prisma.$RenovationWorkPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      renovationWorkId: string
      fileName: string
      fileUrl: string
      fileType: string
      createdAt: Date
    }, ExtArgs["result"]["renovationWorkFile"]>
    composites: {}
  }

  type RenovationWorkFileGetPayload<S extends boolean | null | undefined | RenovationWorkFileDefaultArgs> = $Result.GetResult<Prisma.$RenovationWorkFilePayload, S>

  type RenovationWorkFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RenovationWorkFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RenovationWorkFileCountAggregateInputType | true
    }

  export interface RenovationWorkFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RenovationWorkFile'], meta: { name: 'RenovationWorkFile' } }
    /**
     * Find zero or one RenovationWorkFile that matches the filter.
     * @param {RenovationWorkFileFindUniqueArgs} args - Arguments to find a RenovationWorkFile
     * @example
     * // Get one RenovationWorkFile
     * const renovationWorkFile = await prisma.renovationWorkFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RenovationWorkFileFindUniqueArgs>(args: SelectSubset<T, RenovationWorkFileFindUniqueArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RenovationWorkFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RenovationWorkFileFindUniqueOrThrowArgs} args - Arguments to find a RenovationWorkFile
     * @example
     * // Get one RenovationWorkFile
     * const renovationWorkFile = await prisma.renovationWorkFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RenovationWorkFileFindUniqueOrThrowArgs>(args: SelectSubset<T, RenovationWorkFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RenovationWorkFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileFindFirstArgs} args - Arguments to find a RenovationWorkFile
     * @example
     * // Get one RenovationWorkFile
     * const renovationWorkFile = await prisma.renovationWorkFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RenovationWorkFileFindFirstArgs>(args?: SelectSubset<T, RenovationWorkFileFindFirstArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RenovationWorkFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileFindFirstOrThrowArgs} args - Arguments to find a RenovationWorkFile
     * @example
     * // Get one RenovationWorkFile
     * const renovationWorkFile = await prisma.renovationWorkFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RenovationWorkFileFindFirstOrThrowArgs>(args?: SelectSubset<T, RenovationWorkFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RenovationWorkFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RenovationWorkFiles
     * const renovationWorkFiles = await prisma.renovationWorkFile.findMany()
     * 
     * // Get first 10 RenovationWorkFiles
     * const renovationWorkFiles = await prisma.renovationWorkFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const renovationWorkFileWithIdOnly = await prisma.renovationWorkFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RenovationWorkFileFindManyArgs>(args?: SelectSubset<T, RenovationWorkFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RenovationWorkFile.
     * @param {RenovationWorkFileCreateArgs} args - Arguments to create a RenovationWorkFile.
     * @example
     * // Create one RenovationWorkFile
     * const RenovationWorkFile = await prisma.renovationWorkFile.create({
     *   data: {
     *     // ... data to create a RenovationWorkFile
     *   }
     * })
     * 
     */
    create<T extends RenovationWorkFileCreateArgs>(args: SelectSubset<T, RenovationWorkFileCreateArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RenovationWorkFiles.
     * @param {RenovationWorkFileCreateManyArgs} args - Arguments to create many RenovationWorkFiles.
     * @example
     * // Create many RenovationWorkFiles
     * const renovationWorkFile = await prisma.renovationWorkFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RenovationWorkFileCreateManyArgs>(args?: SelectSubset<T, RenovationWorkFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RenovationWorkFiles and returns the data saved in the database.
     * @param {RenovationWorkFileCreateManyAndReturnArgs} args - Arguments to create many RenovationWorkFiles.
     * @example
     * // Create many RenovationWorkFiles
     * const renovationWorkFile = await prisma.renovationWorkFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RenovationWorkFiles and only return the `id`
     * const renovationWorkFileWithIdOnly = await prisma.renovationWorkFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RenovationWorkFileCreateManyAndReturnArgs>(args?: SelectSubset<T, RenovationWorkFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RenovationWorkFile.
     * @param {RenovationWorkFileDeleteArgs} args - Arguments to delete one RenovationWorkFile.
     * @example
     * // Delete one RenovationWorkFile
     * const RenovationWorkFile = await prisma.renovationWorkFile.delete({
     *   where: {
     *     // ... filter to delete one RenovationWorkFile
     *   }
     * })
     * 
     */
    delete<T extends RenovationWorkFileDeleteArgs>(args: SelectSubset<T, RenovationWorkFileDeleteArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RenovationWorkFile.
     * @param {RenovationWorkFileUpdateArgs} args - Arguments to update one RenovationWorkFile.
     * @example
     * // Update one RenovationWorkFile
     * const renovationWorkFile = await prisma.renovationWorkFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RenovationWorkFileUpdateArgs>(args: SelectSubset<T, RenovationWorkFileUpdateArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RenovationWorkFiles.
     * @param {RenovationWorkFileDeleteManyArgs} args - Arguments to filter RenovationWorkFiles to delete.
     * @example
     * // Delete a few RenovationWorkFiles
     * const { count } = await prisma.renovationWorkFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RenovationWorkFileDeleteManyArgs>(args?: SelectSubset<T, RenovationWorkFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RenovationWorkFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RenovationWorkFiles
     * const renovationWorkFile = await prisma.renovationWorkFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RenovationWorkFileUpdateManyArgs>(args: SelectSubset<T, RenovationWorkFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RenovationWorkFile.
     * @param {RenovationWorkFileUpsertArgs} args - Arguments to update or create a RenovationWorkFile.
     * @example
     * // Update or create a RenovationWorkFile
     * const renovationWorkFile = await prisma.renovationWorkFile.upsert({
     *   create: {
     *     // ... data to create a RenovationWorkFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RenovationWorkFile we want to update
     *   }
     * })
     */
    upsert<T extends RenovationWorkFileUpsertArgs>(args: SelectSubset<T, RenovationWorkFileUpsertArgs<ExtArgs>>): Prisma__RenovationWorkFileClient<$Result.GetResult<Prisma.$RenovationWorkFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RenovationWorkFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileCountArgs} args - Arguments to filter RenovationWorkFiles to count.
     * @example
     * // Count the number of RenovationWorkFiles
     * const count = await prisma.renovationWorkFile.count({
     *   where: {
     *     // ... the filter for the RenovationWorkFiles we want to count
     *   }
     * })
    **/
    count<T extends RenovationWorkFileCountArgs>(
      args?: Subset<T, RenovationWorkFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RenovationWorkFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RenovationWorkFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RenovationWorkFileAggregateArgs>(args: Subset<T, RenovationWorkFileAggregateArgs>): Prisma.PrismaPromise<GetRenovationWorkFileAggregateType<T>>

    /**
     * Group by RenovationWorkFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenovationWorkFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RenovationWorkFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RenovationWorkFileGroupByArgs['orderBy'] }
        : { orderBy?: RenovationWorkFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RenovationWorkFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRenovationWorkFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RenovationWorkFile model
   */
  readonly fields: RenovationWorkFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RenovationWorkFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RenovationWorkFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    renovationWork<T extends RenovationWorkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RenovationWorkDefaultArgs<ExtArgs>>): Prisma__RenovationWorkClient<$Result.GetResult<Prisma.$RenovationWorkPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RenovationWorkFile model
   */ 
  interface RenovationWorkFileFieldRefs {
    readonly id: FieldRef<"RenovationWorkFile", 'String'>
    readonly renovationWorkId: FieldRef<"RenovationWorkFile", 'String'>
    readonly fileName: FieldRef<"RenovationWorkFile", 'String'>
    readonly fileUrl: FieldRef<"RenovationWorkFile", 'String'>
    readonly fileType: FieldRef<"RenovationWorkFile", 'String'>
    readonly createdAt: FieldRef<"RenovationWorkFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RenovationWorkFile findUnique
   */
  export type RenovationWorkFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWorkFile to fetch.
     */
    where: RenovationWorkFileWhereUniqueInput
  }

  /**
   * RenovationWorkFile findUniqueOrThrow
   */
  export type RenovationWorkFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWorkFile to fetch.
     */
    where: RenovationWorkFileWhereUniqueInput
  }

  /**
   * RenovationWorkFile findFirst
   */
  export type RenovationWorkFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWorkFile to fetch.
     */
    where?: RenovationWorkFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorkFiles to fetch.
     */
    orderBy?: RenovationWorkFileOrderByWithRelationInput | RenovationWorkFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RenovationWorkFiles.
     */
    cursor?: RenovationWorkFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorkFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorkFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RenovationWorkFiles.
     */
    distinct?: RenovationWorkFileScalarFieldEnum | RenovationWorkFileScalarFieldEnum[]
  }

  /**
   * RenovationWorkFile findFirstOrThrow
   */
  export type RenovationWorkFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWorkFile to fetch.
     */
    where?: RenovationWorkFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorkFiles to fetch.
     */
    orderBy?: RenovationWorkFileOrderByWithRelationInput | RenovationWorkFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RenovationWorkFiles.
     */
    cursor?: RenovationWorkFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorkFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorkFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RenovationWorkFiles.
     */
    distinct?: RenovationWorkFileScalarFieldEnum | RenovationWorkFileScalarFieldEnum[]
  }

  /**
   * RenovationWorkFile findMany
   */
  export type RenovationWorkFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * Filter, which RenovationWorkFiles to fetch.
     */
    where?: RenovationWorkFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RenovationWorkFiles to fetch.
     */
    orderBy?: RenovationWorkFileOrderByWithRelationInput | RenovationWorkFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RenovationWorkFiles.
     */
    cursor?: RenovationWorkFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RenovationWorkFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RenovationWorkFiles.
     */
    skip?: number
    distinct?: RenovationWorkFileScalarFieldEnum | RenovationWorkFileScalarFieldEnum[]
  }

  /**
   * RenovationWorkFile create
   */
  export type RenovationWorkFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * The data needed to create a RenovationWorkFile.
     */
    data: XOR<RenovationWorkFileCreateInput, RenovationWorkFileUncheckedCreateInput>
  }

  /**
   * RenovationWorkFile createMany
   */
  export type RenovationWorkFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RenovationWorkFiles.
     */
    data: RenovationWorkFileCreateManyInput | RenovationWorkFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RenovationWorkFile createManyAndReturn
   */
  export type RenovationWorkFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RenovationWorkFiles.
     */
    data: RenovationWorkFileCreateManyInput | RenovationWorkFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RenovationWorkFile update
   */
  export type RenovationWorkFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * The data needed to update a RenovationWorkFile.
     */
    data: XOR<RenovationWorkFileUpdateInput, RenovationWorkFileUncheckedUpdateInput>
    /**
     * Choose, which RenovationWorkFile to update.
     */
    where: RenovationWorkFileWhereUniqueInput
  }

  /**
   * RenovationWorkFile updateMany
   */
  export type RenovationWorkFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RenovationWorkFiles.
     */
    data: XOR<RenovationWorkFileUpdateManyMutationInput, RenovationWorkFileUncheckedUpdateManyInput>
    /**
     * Filter which RenovationWorkFiles to update
     */
    where?: RenovationWorkFileWhereInput
  }

  /**
   * RenovationWorkFile upsert
   */
  export type RenovationWorkFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * The filter to search for the RenovationWorkFile to update in case it exists.
     */
    where: RenovationWorkFileWhereUniqueInput
    /**
     * In case the RenovationWorkFile found by the `where` argument doesn't exist, create a new RenovationWorkFile with this data.
     */
    create: XOR<RenovationWorkFileCreateInput, RenovationWorkFileUncheckedCreateInput>
    /**
     * In case the RenovationWorkFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RenovationWorkFileUpdateInput, RenovationWorkFileUncheckedUpdateInput>
  }

  /**
   * RenovationWorkFile delete
   */
  export type RenovationWorkFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
    /**
     * Filter which RenovationWorkFile to delete.
     */
    where: RenovationWorkFileWhereUniqueInput
  }

  /**
   * RenovationWorkFile deleteMany
   */
  export type RenovationWorkFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RenovationWorkFiles to delete
     */
    where?: RenovationWorkFileWhereInput
  }

  /**
   * RenovationWorkFile without action
   */
  export type RenovationWorkFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenovationWorkFile
     */
    select?: RenovationWorkFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenovationWorkFileInclude<ExtArgs> | null
  }


  /**
   * Model RegisteredVehicle
   */

  export type AggregateRegisteredVehicle = {
    _count: RegisteredVehicleCountAggregateOutputType | null
    _min: RegisteredVehicleMinAggregateOutputType | null
    _max: RegisteredVehicleMaxAggregateOutputType | null
  }

  export type RegisteredVehicleMinAggregateOutputType = {
    id: string | null
    plateNumber: string | null
    carModel: string | null
    make: string | null
    colour: string | null
    parkingStall: string | null
    unitNumber: string | null
    residentType: $Enums.ResidentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegisteredVehicleMaxAggregateOutputType = {
    id: string | null
    plateNumber: string | null
    carModel: string | null
    make: string | null
    colour: string | null
    parkingStall: string | null
    unitNumber: string | null
    residentType: $Enums.ResidentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegisteredVehicleCountAggregateOutputType = {
    id: number
    plateNumber: number
    carModel: number
    make: number
    colour: number
    parkingStall: number
    unitNumber: number
    residentType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RegisteredVehicleMinAggregateInputType = {
    id?: true
    plateNumber?: true
    carModel?: true
    make?: true
    colour?: true
    parkingStall?: true
    unitNumber?: true
    residentType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegisteredVehicleMaxAggregateInputType = {
    id?: true
    plateNumber?: true
    carModel?: true
    make?: true
    colour?: true
    parkingStall?: true
    unitNumber?: true
    residentType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegisteredVehicleCountAggregateInputType = {
    id?: true
    plateNumber?: true
    carModel?: true
    make?: true
    colour?: true
    parkingStall?: true
    unitNumber?: true
    residentType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegisteredVehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegisteredVehicle to aggregate.
     */
    where?: RegisteredVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredVehicles to fetch.
     */
    orderBy?: RegisteredVehicleOrderByWithRelationInput | RegisteredVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegisteredVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegisteredVehicles
    **/
    _count?: true | RegisteredVehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegisteredVehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegisteredVehicleMaxAggregateInputType
  }

  export type GetRegisteredVehicleAggregateType<T extends RegisteredVehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateRegisteredVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegisteredVehicle[P]>
      : GetScalarType<T[P], AggregateRegisteredVehicle[P]>
  }




  export type RegisteredVehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegisteredVehicleWhereInput
    orderBy?: RegisteredVehicleOrderByWithAggregationInput | RegisteredVehicleOrderByWithAggregationInput[]
    by: RegisteredVehicleScalarFieldEnum[] | RegisteredVehicleScalarFieldEnum
    having?: RegisteredVehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegisteredVehicleCountAggregateInputType | true
    _min?: RegisteredVehicleMinAggregateInputType
    _max?: RegisteredVehicleMaxAggregateInputType
  }

  export type RegisteredVehicleGroupByOutputType = {
    id: string
    plateNumber: string
    carModel: string
    make: string
    colour: string
    parkingStall: string | null
    unitNumber: string
    residentType: $Enums.ResidentType
    createdAt: Date
    updatedAt: Date
    _count: RegisteredVehicleCountAggregateOutputType | null
    _min: RegisteredVehicleMinAggregateOutputType | null
    _max: RegisteredVehicleMaxAggregateOutputType | null
  }

  type GetRegisteredVehicleGroupByPayload<T extends RegisteredVehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegisteredVehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegisteredVehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegisteredVehicleGroupByOutputType[P]>
            : GetScalarType<T[P], RegisteredVehicleGroupByOutputType[P]>
        }
      >
    >


  export type RegisteredVehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plateNumber?: boolean
    carModel?: boolean
    make?: boolean
    colour?: boolean
    parkingStall?: boolean
    unitNumber?: boolean
    residentType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["registeredVehicle"]>

  export type RegisteredVehicleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plateNumber?: boolean
    carModel?: boolean
    make?: boolean
    colour?: boolean
    parkingStall?: boolean
    unitNumber?: boolean
    residentType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["registeredVehicle"]>

  export type RegisteredVehicleSelectScalar = {
    id?: boolean
    plateNumber?: boolean
    carModel?: boolean
    make?: boolean
    colour?: boolean
    parkingStall?: boolean
    unitNumber?: boolean
    residentType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $RegisteredVehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegisteredVehicle"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      plateNumber: string
      carModel: string
      make: string
      colour: string
      parkingStall: string | null
      unitNumber: string
      residentType: $Enums.ResidentType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["registeredVehicle"]>
    composites: {}
  }

  type RegisteredVehicleGetPayload<S extends boolean | null | undefined | RegisteredVehicleDefaultArgs> = $Result.GetResult<Prisma.$RegisteredVehiclePayload, S>

  type RegisteredVehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegisteredVehicleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegisteredVehicleCountAggregateInputType | true
    }

  export interface RegisteredVehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegisteredVehicle'], meta: { name: 'RegisteredVehicle' } }
    /**
     * Find zero or one RegisteredVehicle that matches the filter.
     * @param {RegisteredVehicleFindUniqueArgs} args - Arguments to find a RegisteredVehicle
     * @example
     * // Get one RegisteredVehicle
     * const registeredVehicle = await prisma.registeredVehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegisteredVehicleFindUniqueArgs>(args: SelectSubset<T, RegisteredVehicleFindUniqueArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RegisteredVehicle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegisteredVehicleFindUniqueOrThrowArgs} args - Arguments to find a RegisteredVehicle
     * @example
     * // Get one RegisteredVehicle
     * const registeredVehicle = await prisma.registeredVehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegisteredVehicleFindUniqueOrThrowArgs>(args: SelectSubset<T, RegisteredVehicleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RegisteredVehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleFindFirstArgs} args - Arguments to find a RegisteredVehicle
     * @example
     * // Get one RegisteredVehicle
     * const registeredVehicle = await prisma.registeredVehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegisteredVehicleFindFirstArgs>(args?: SelectSubset<T, RegisteredVehicleFindFirstArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RegisteredVehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleFindFirstOrThrowArgs} args - Arguments to find a RegisteredVehicle
     * @example
     * // Get one RegisteredVehicle
     * const registeredVehicle = await prisma.registeredVehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegisteredVehicleFindFirstOrThrowArgs>(args?: SelectSubset<T, RegisteredVehicleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RegisteredVehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegisteredVehicles
     * const registeredVehicles = await prisma.registeredVehicle.findMany()
     * 
     * // Get first 10 RegisteredVehicles
     * const registeredVehicles = await prisma.registeredVehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registeredVehicleWithIdOnly = await prisma.registeredVehicle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegisteredVehicleFindManyArgs>(args?: SelectSubset<T, RegisteredVehicleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RegisteredVehicle.
     * @param {RegisteredVehicleCreateArgs} args - Arguments to create a RegisteredVehicle.
     * @example
     * // Create one RegisteredVehicle
     * const RegisteredVehicle = await prisma.registeredVehicle.create({
     *   data: {
     *     // ... data to create a RegisteredVehicle
     *   }
     * })
     * 
     */
    create<T extends RegisteredVehicleCreateArgs>(args: SelectSubset<T, RegisteredVehicleCreateArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RegisteredVehicles.
     * @param {RegisteredVehicleCreateManyArgs} args - Arguments to create many RegisteredVehicles.
     * @example
     * // Create many RegisteredVehicles
     * const registeredVehicle = await prisma.registeredVehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegisteredVehicleCreateManyArgs>(args?: SelectSubset<T, RegisteredVehicleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegisteredVehicles and returns the data saved in the database.
     * @param {RegisteredVehicleCreateManyAndReturnArgs} args - Arguments to create many RegisteredVehicles.
     * @example
     * // Create many RegisteredVehicles
     * const registeredVehicle = await prisma.registeredVehicle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegisteredVehicles and only return the `id`
     * const registeredVehicleWithIdOnly = await prisma.registeredVehicle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegisteredVehicleCreateManyAndReturnArgs>(args?: SelectSubset<T, RegisteredVehicleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RegisteredVehicle.
     * @param {RegisteredVehicleDeleteArgs} args - Arguments to delete one RegisteredVehicle.
     * @example
     * // Delete one RegisteredVehicle
     * const RegisteredVehicle = await prisma.registeredVehicle.delete({
     *   where: {
     *     // ... filter to delete one RegisteredVehicle
     *   }
     * })
     * 
     */
    delete<T extends RegisteredVehicleDeleteArgs>(args: SelectSubset<T, RegisteredVehicleDeleteArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RegisteredVehicle.
     * @param {RegisteredVehicleUpdateArgs} args - Arguments to update one RegisteredVehicle.
     * @example
     * // Update one RegisteredVehicle
     * const registeredVehicle = await prisma.registeredVehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegisteredVehicleUpdateArgs>(args: SelectSubset<T, RegisteredVehicleUpdateArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RegisteredVehicles.
     * @param {RegisteredVehicleDeleteManyArgs} args - Arguments to filter RegisteredVehicles to delete.
     * @example
     * // Delete a few RegisteredVehicles
     * const { count } = await prisma.registeredVehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegisteredVehicleDeleteManyArgs>(args?: SelectSubset<T, RegisteredVehicleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegisteredVehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegisteredVehicles
     * const registeredVehicle = await prisma.registeredVehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegisteredVehicleUpdateManyArgs>(args: SelectSubset<T, RegisteredVehicleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RegisteredVehicle.
     * @param {RegisteredVehicleUpsertArgs} args - Arguments to update or create a RegisteredVehicle.
     * @example
     * // Update or create a RegisteredVehicle
     * const registeredVehicle = await prisma.registeredVehicle.upsert({
     *   create: {
     *     // ... data to create a RegisteredVehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegisteredVehicle we want to update
     *   }
     * })
     */
    upsert<T extends RegisteredVehicleUpsertArgs>(args: SelectSubset<T, RegisteredVehicleUpsertArgs<ExtArgs>>): Prisma__RegisteredVehicleClient<$Result.GetResult<Prisma.$RegisteredVehiclePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RegisteredVehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleCountArgs} args - Arguments to filter RegisteredVehicles to count.
     * @example
     * // Count the number of RegisteredVehicles
     * const count = await prisma.registeredVehicle.count({
     *   where: {
     *     // ... the filter for the RegisteredVehicles we want to count
     *   }
     * })
    **/
    count<T extends RegisteredVehicleCountArgs>(
      args?: Subset<T, RegisteredVehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegisteredVehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegisteredVehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegisteredVehicleAggregateArgs>(args: Subset<T, RegisteredVehicleAggregateArgs>): Prisma.PrismaPromise<GetRegisteredVehicleAggregateType<T>>

    /**
     * Group by RegisteredVehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredVehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegisteredVehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegisteredVehicleGroupByArgs['orderBy'] }
        : { orderBy?: RegisteredVehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegisteredVehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegisteredVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegisteredVehicle model
   */
  readonly fields: RegisteredVehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegisteredVehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegisteredVehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegisteredVehicle model
   */ 
  interface RegisteredVehicleFieldRefs {
    readonly id: FieldRef<"RegisteredVehicle", 'String'>
    readonly plateNumber: FieldRef<"RegisteredVehicle", 'String'>
    readonly carModel: FieldRef<"RegisteredVehicle", 'String'>
    readonly make: FieldRef<"RegisteredVehicle", 'String'>
    readonly colour: FieldRef<"RegisteredVehicle", 'String'>
    readonly parkingStall: FieldRef<"RegisteredVehicle", 'String'>
    readonly unitNumber: FieldRef<"RegisteredVehicle", 'String'>
    readonly residentType: FieldRef<"RegisteredVehicle", 'ResidentType'>
    readonly createdAt: FieldRef<"RegisteredVehicle", 'DateTime'>
    readonly updatedAt: FieldRef<"RegisteredVehicle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RegisteredVehicle findUnique
   */
  export type RegisteredVehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * Filter, which RegisteredVehicle to fetch.
     */
    where: RegisteredVehicleWhereUniqueInput
  }

  /**
   * RegisteredVehicle findUniqueOrThrow
   */
  export type RegisteredVehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * Filter, which RegisteredVehicle to fetch.
     */
    where: RegisteredVehicleWhereUniqueInput
  }

  /**
   * RegisteredVehicle findFirst
   */
  export type RegisteredVehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * Filter, which RegisteredVehicle to fetch.
     */
    where?: RegisteredVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredVehicles to fetch.
     */
    orderBy?: RegisteredVehicleOrderByWithRelationInput | RegisteredVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisteredVehicles.
     */
    cursor?: RegisteredVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisteredVehicles.
     */
    distinct?: RegisteredVehicleScalarFieldEnum | RegisteredVehicleScalarFieldEnum[]
  }

  /**
   * RegisteredVehicle findFirstOrThrow
   */
  export type RegisteredVehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * Filter, which RegisteredVehicle to fetch.
     */
    where?: RegisteredVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredVehicles to fetch.
     */
    orderBy?: RegisteredVehicleOrderByWithRelationInput | RegisteredVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisteredVehicles.
     */
    cursor?: RegisteredVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisteredVehicles.
     */
    distinct?: RegisteredVehicleScalarFieldEnum | RegisteredVehicleScalarFieldEnum[]
  }

  /**
   * RegisteredVehicle findMany
   */
  export type RegisteredVehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * Filter, which RegisteredVehicles to fetch.
     */
    where?: RegisteredVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredVehicles to fetch.
     */
    orderBy?: RegisteredVehicleOrderByWithRelationInput | RegisteredVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegisteredVehicles.
     */
    cursor?: RegisteredVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredVehicles.
     */
    skip?: number
    distinct?: RegisteredVehicleScalarFieldEnum | RegisteredVehicleScalarFieldEnum[]
  }

  /**
   * RegisteredVehicle create
   */
  export type RegisteredVehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * The data needed to create a RegisteredVehicle.
     */
    data: XOR<RegisteredVehicleCreateInput, RegisteredVehicleUncheckedCreateInput>
  }

  /**
   * RegisteredVehicle createMany
   */
  export type RegisteredVehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegisteredVehicles.
     */
    data: RegisteredVehicleCreateManyInput | RegisteredVehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegisteredVehicle createManyAndReturn
   */
  export type RegisteredVehicleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RegisteredVehicles.
     */
    data: RegisteredVehicleCreateManyInput | RegisteredVehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegisteredVehicle update
   */
  export type RegisteredVehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * The data needed to update a RegisteredVehicle.
     */
    data: XOR<RegisteredVehicleUpdateInput, RegisteredVehicleUncheckedUpdateInput>
    /**
     * Choose, which RegisteredVehicle to update.
     */
    where: RegisteredVehicleWhereUniqueInput
  }

  /**
   * RegisteredVehicle updateMany
   */
  export type RegisteredVehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegisteredVehicles.
     */
    data: XOR<RegisteredVehicleUpdateManyMutationInput, RegisteredVehicleUncheckedUpdateManyInput>
    /**
     * Filter which RegisteredVehicles to update
     */
    where?: RegisteredVehicleWhereInput
  }

  /**
   * RegisteredVehicle upsert
   */
  export type RegisteredVehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * The filter to search for the RegisteredVehicle to update in case it exists.
     */
    where: RegisteredVehicleWhereUniqueInput
    /**
     * In case the RegisteredVehicle found by the `where` argument doesn't exist, create a new RegisteredVehicle with this data.
     */
    create: XOR<RegisteredVehicleCreateInput, RegisteredVehicleUncheckedCreateInput>
    /**
     * In case the RegisteredVehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegisteredVehicleUpdateInput, RegisteredVehicleUncheckedUpdateInput>
  }

  /**
   * RegisteredVehicle delete
   */
  export type RegisteredVehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
    /**
     * Filter which RegisteredVehicle to delete.
     */
    where: RegisteredVehicleWhereUniqueInput
  }

  /**
   * RegisteredVehicle deleteMany
   */
  export type RegisteredVehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegisteredVehicles to delete
     */
    where?: RegisteredVehicleWhereInput
  }

  /**
   * RegisteredVehicle without action
   */
  export type RegisteredVehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredVehicle
     */
    select?: RegisteredVehicleSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    unit: 'unit',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VisitorParkingRequestScalarFieldEnum: {
    id: 'id',
    vehicleMake: 'vehicleMake',
    plateNumber: 'plateNumber',
    unit: 'unit',
    durationInHours: 'durationInHours',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    violationStatus: 'violationStatus',
    isExpired: 'isExpired'
  };

  export type VisitorParkingRequestScalarFieldEnum = (typeof VisitorParkingRequestScalarFieldEnum)[keyof typeof VisitorParkingRequestScalarFieldEnum]


  export const ViolationScalarFieldEnum: {
    id: 'id',
    permitId: 'permitId',
    plateNumber: 'plateNumber',
    vehicleMake: 'vehicleMake',
    vehicleColor: 'vehicleColor',
    stallNumber: 'stallNumber',
    photoUrl: 'photoUrl',
    violationType: 'violationType',
    notes: 'notes',
    issuedAt: 'issuedAt',
    noticeIssued: 'noticeIssued'
  };

  export type ViolationScalarFieldEnum = (typeof ViolationScalarFieldEnum)[keyof typeof ViolationScalarFieldEnum]


  export const ViolationLetterScalarFieldEnum: {
    id: 'id',
    violationId: 'violationId',
    pdfUrl: 'pdfUrl',
    createdAt: 'createdAt'
  };

  export type ViolationLetterScalarFieldEnum = (typeof ViolationLetterScalarFieldEnum)[keyof typeof ViolationLetterScalarFieldEnum]


  export const ParkingInspectionScalarFieldEnum: {
    id: 'id',
    inspectorId: 'inspectorId',
    inspectedAt: 'inspectedAt',
    plateNumber: 'plateNumber',
    vehicleMake: 'vehicleMake',
    vehicleColor: 'vehicleColor',
    stallNumber: 'stallNumber',
    photoUrl: 'photoUrl',
    notes: 'notes',
    violationId: 'violationId'
  };

  export type ParkingInspectionScalarFieldEnum = (typeof ParkingInspectionScalarFieldEnum)[keyof typeof ParkingInspectionScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    maxDurationHours: 'maxDurationHours',
    consecutiveDaysLimit: 'consecutiveDaysLimit',
    monthlyVisitLimit: 'monthlyVisitLimit',
    updatedAt: 'updatedAt'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const ElevatorBookingScalarFieldEnum: {
    id: 'id',
    unitNumber: 'unitNumber',
    duration: 'duration',
    bookingDate: 'bookingDate',
    reason: 'reason',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ElevatorBookingScalarFieldEnum = (typeof ElevatorBookingScalarFieldEnum)[keyof typeof ElevatorBookingScalarFieldEnum]


  export const StorageUnitScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    unitNumber: 'unitNumber',
    startDate: 'startDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StorageUnitScalarFieldEnum = (typeof StorageUnitScalarFieldEnum)[keyof typeof StorageUnitScalarFieldEnum]


  export const StorageWaitlistEntryScalarFieldEnum: {
    id: 'id',
    unitNumber: 'unitNumber',
    requestDate: 'requestDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StorageWaitlistEntryScalarFieldEnum = (typeof StorageWaitlistEntryScalarFieldEnum)[keyof typeof StorageWaitlistEntryScalarFieldEnum]


  export const PatrolLogScalarFieldEnum: {
    id: 'id',
    reportedAt: 'reportedAt',
    notes: 'notes',
    isNothingToReport: 'isNothingToReport',
    reporterId: 'reporterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatrolLogScalarFieldEnum = (typeof PatrolLogScalarFieldEnum)[keyof typeof PatrolLogScalarFieldEnum]


  export const PatrolLogImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    patrolLogId: 'patrolLogId',
    createdAt: 'createdAt'
  };

  export type PatrolLogImageScalarFieldEnum = (typeof PatrolLogImageScalarFieldEnum)[keyof typeof PatrolLogImageScalarFieldEnum]


  export const RenovationWorkScalarFieldEnum: {
    id: 'id',
    unitNumber: 'unitNumber',
    startDate: 'startDate',
    endDate: 'endDate',
    damageDepositCheckNumber: 'damageDepositCheckNumber',
    isExempted: 'isExempted',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RenovationWorkScalarFieldEnum = (typeof RenovationWorkScalarFieldEnum)[keyof typeof RenovationWorkScalarFieldEnum]


  export const RenovationWorkFileScalarFieldEnum: {
    id: 'id',
    renovationWorkId: 'renovationWorkId',
    fileName: 'fileName',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    createdAt: 'createdAt'
  };

  export type RenovationWorkFileScalarFieldEnum = (typeof RenovationWorkFileScalarFieldEnum)[keyof typeof RenovationWorkFileScalarFieldEnum]


  export const RegisteredVehicleScalarFieldEnum: {
    id: 'id',
    plateNumber: 'plateNumber',
    carModel: 'carModel',
    make: 'make',
    colour: 'colour',
    parkingStall: 'parkingStall',
    unitNumber: 'unitNumber',
    residentType: 'residentType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RegisteredVehicleScalarFieldEnum = (typeof RegisteredVehicleScalarFieldEnum)[keyof typeof RegisteredVehicleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ViolationStatus'
   */
  export type EnumViolationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ViolationStatus'>
    


  /**
   * Reference to a field of type 'ViolationStatus[]'
   */
  export type ListEnumViolationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ViolationStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ElevatorBookingReason'
   */
  export type EnumElevatorBookingReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ElevatorBookingReason'>
    


  /**
   * Reference to a field of type 'ElevatorBookingReason[]'
   */
  export type ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ElevatorBookingReason[]'>
    


  /**
   * Reference to a field of type 'StorageStatus'
   */
  export type EnumStorageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorageStatus'>
    


  /**
   * Reference to a field of type 'StorageStatus[]'
   */
  export type ListEnumStorageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorageStatus[]'>
    


  /**
   * Reference to a field of type 'ResidentType'
   */
  export type EnumResidentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResidentType'>
    


  /**
   * Reference to a field of type 'ResidentType[]'
   */
  export type ListEnumResidentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResidentType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    unit?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    patrolLogs?: PatrolLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    unit?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patrolLogs?: PatrolLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    unit?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    patrolLogs?: PatrolLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    unit?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    unit?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type VisitorParkingRequestWhereInput = {
    AND?: VisitorParkingRequestWhereInput | VisitorParkingRequestWhereInput[]
    OR?: VisitorParkingRequestWhereInput[]
    NOT?: VisitorParkingRequestWhereInput | VisitorParkingRequestWhereInput[]
    id?: StringFilter<"VisitorParkingRequest"> | string
    vehicleMake?: StringFilter<"VisitorParkingRequest"> | string
    plateNumber?: StringFilter<"VisitorParkingRequest"> | string
    unit?: StringFilter<"VisitorParkingRequest"> | string
    durationInHours?: IntFilter<"VisitorParkingRequest"> | number
    createdAt?: DateTimeFilter<"VisitorParkingRequest"> | Date | string
    expiresAt?: DateTimeFilter<"VisitorParkingRequest"> | Date | string
    violationStatus?: EnumViolationStatusFilter<"VisitorParkingRequest"> | $Enums.ViolationStatus
    isExpired?: BoolFilter<"VisitorParkingRequest"> | boolean
    violations?: ViolationListRelationFilter
  }

  export type VisitorParkingRequestOrderByWithRelationInput = {
    id?: SortOrder
    vehicleMake?: SortOrder
    plateNumber?: SortOrder
    unit?: SortOrder
    durationInHours?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    violationStatus?: SortOrder
    isExpired?: SortOrder
    violations?: ViolationOrderByRelationAggregateInput
  }

  export type VisitorParkingRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VisitorParkingRequestWhereInput | VisitorParkingRequestWhereInput[]
    OR?: VisitorParkingRequestWhereInput[]
    NOT?: VisitorParkingRequestWhereInput | VisitorParkingRequestWhereInput[]
    vehicleMake?: StringFilter<"VisitorParkingRequest"> | string
    plateNumber?: StringFilter<"VisitorParkingRequest"> | string
    unit?: StringFilter<"VisitorParkingRequest"> | string
    durationInHours?: IntFilter<"VisitorParkingRequest"> | number
    createdAt?: DateTimeFilter<"VisitorParkingRequest"> | Date | string
    expiresAt?: DateTimeFilter<"VisitorParkingRequest"> | Date | string
    violationStatus?: EnumViolationStatusFilter<"VisitorParkingRequest"> | $Enums.ViolationStatus
    isExpired?: BoolFilter<"VisitorParkingRequest"> | boolean
    violations?: ViolationListRelationFilter
  }, "id">

  export type VisitorParkingRequestOrderByWithAggregationInput = {
    id?: SortOrder
    vehicleMake?: SortOrder
    plateNumber?: SortOrder
    unit?: SortOrder
    durationInHours?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    violationStatus?: SortOrder
    isExpired?: SortOrder
    _count?: VisitorParkingRequestCountOrderByAggregateInput
    _avg?: VisitorParkingRequestAvgOrderByAggregateInput
    _max?: VisitorParkingRequestMaxOrderByAggregateInput
    _min?: VisitorParkingRequestMinOrderByAggregateInput
    _sum?: VisitorParkingRequestSumOrderByAggregateInput
  }

  export type VisitorParkingRequestScalarWhereWithAggregatesInput = {
    AND?: VisitorParkingRequestScalarWhereWithAggregatesInput | VisitorParkingRequestScalarWhereWithAggregatesInput[]
    OR?: VisitorParkingRequestScalarWhereWithAggregatesInput[]
    NOT?: VisitorParkingRequestScalarWhereWithAggregatesInput | VisitorParkingRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VisitorParkingRequest"> | string
    vehicleMake?: StringWithAggregatesFilter<"VisitorParkingRequest"> | string
    plateNumber?: StringWithAggregatesFilter<"VisitorParkingRequest"> | string
    unit?: StringWithAggregatesFilter<"VisitorParkingRequest"> | string
    durationInHours?: IntWithAggregatesFilter<"VisitorParkingRequest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"VisitorParkingRequest"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"VisitorParkingRequest"> | Date | string
    violationStatus?: EnumViolationStatusWithAggregatesFilter<"VisitorParkingRequest"> | $Enums.ViolationStatus
    isExpired?: BoolWithAggregatesFilter<"VisitorParkingRequest"> | boolean
  }

  export type ViolationWhereInput = {
    AND?: ViolationWhereInput | ViolationWhereInput[]
    OR?: ViolationWhereInput[]
    NOT?: ViolationWhereInput | ViolationWhereInput[]
    id?: StringFilter<"Violation"> | string
    permitId?: StringNullableFilter<"Violation"> | string | null
    plateNumber?: StringFilter<"Violation"> | string
    vehicleMake?: StringFilter<"Violation"> | string
    vehicleColor?: StringNullableFilter<"Violation"> | string | null
    stallNumber?: StringNullableFilter<"Violation"> | string | null
    photoUrl?: StringNullableFilter<"Violation"> | string | null
    violationType?: StringFilter<"Violation"> | string
    notes?: StringNullableFilter<"Violation"> | string | null
    issuedAt?: DateTimeFilter<"Violation"> | Date | string
    noticeIssued?: BoolFilter<"Violation"> | boolean
    letter?: XOR<ViolationLetterNullableRelationFilter, ViolationLetterWhereInput> | null
    permit?: XOR<VisitorParkingRequestNullableRelationFilter, VisitorParkingRequestWhereInput> | null
    inspections?: ParkingInspectionListRelationFilter
  }

  export type ViolationOrderByWithRelationInput = {
    id?: SortOrder
    permitId?: SortOrderInput | SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrderInput | SortOrder
    stallNumber?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    violationType?: SortOrder
    notes?: SortOrderInput | SortOrder
    issuedAt?: SortOrder
    noticeIssued?: SortOrder
    letter?: ViolationLetterOrderByWithRelationInput
    permit?: VisitorParkingRequestOrderByWithRelationInput
    inspections?: ParkingInspectionOrderByRelationAggregateInput
  }

  export type ViolationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ViolationWhereInput | ViolationWhereInput[]
    OR?: ViolationWhereInput[]
    NOT?: ViolationWhereInput | ViolationWhereInput[]
    permitId?: StringNullableFilter<"Violation"> | string | null
    plateNumber?: StringFilter<"Violation"> | string
    vehicleMake?: StringFilter<"Violation"> | string
    vehicleColor?: StringNullableFilter<"Violation"> | string | null
    stallNumber?: StringNullableFilter<"Violation"> | string | null
    photoUrl?: StringNullableFilter<"Violation"> | string | null
    violationType?: StringFilter<"Violation"> | string
    notes?: StringNullableFilter<"Violation"> | string | null
    issuedAt?: DateTimeFilter<"Violation"> | Date | string
    noticeIssued?: BoolFilter<"Violation"> | boolean
    letter?: XOR<ViolationLetterNullableRelationFilter, ViolationLetterWhereInput> | null
    permit?: XOR<VisitorParkingRequestNullableRelationFilter, VisitorParkingRequestWhereInput> | null
    inspections?: ParkingInspectionListRelationFilter
  }, "id">

  export type ViolationOrderByWithAggregationInput = {
    id?: SortOrder
    permitId?: SortOrderInput | SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrderInput | SortOrder
    stallNumber?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    violationType?: SortOrder
    notes?: SortOrderInput | SortOrder
    issuedAt?: SortOrder
    noticeIssued?: SortOrder
    _count?: ViolationCountOrderByAggregateInput
    _max?: ViolationMaxOrderByAggregateInput
    _min?: ViolationMinOrderByAggregateInput
  }

  export type ViolationScalarWhereWithAggregatesInput = {
    AND?: ViolationScalarWhereWithAggregatesInput | ViolationScalarWhereWithAggregatesInput[]
    OR?: ViolationScalarWhereWithAggregatesInput[]
    NOT?: ViolationScalarWhereWithAggregatesInput | ViolationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Violation"> | string
    permitId?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    plateNumber?: StringWithAggregatesFilter<"Violation"> | string
    vehicleMake?: StringWithAggregatesFilter<"Violation"> | string
    vehicleColor?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    stallNumber?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    photoUrl?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    violationType?: StringWithAggregatesFilter<"Violation"> | string
    notes?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    issuedAt?: DateTimeWithAggregatesFilter<"Violation"> | Date | string
    noticeIssued?: BoolWithAggregatesFilter<"Violation"> | boolean
  }

  export type ViolationLetterWhereInput = {
    AND?: ViolationLetterWhereInput | ViolationLetterWhereInput[]
    OR?: ViolationLetterWhereInput[]
    NOT?: ViolationLetterWhereInput | ViolationLetterWhereInput[]
    id?: StringFilter<"ViolationLetter"> | string
    violationId?: StringFilter<"ViolationLetter"> | string
    pdfUrl?: StringFilter<"ViolationLetter"> | string
    createdAt?: DateTimeFilter<"ViolationLetter"> | Date | string
    violation?: XOR<ViolationRelationFilter, ViolationWhereInput>
  }

  export type ViolationLetterOrderByWithRelationInput = {
    id?: SortOrder
    violationId?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
    violation?: ViolationOrderByWithRelationInput
  }

  export type ViolationLetterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    violationId?: string
    AND?: ViolationLetterWhereInput | ViolationLetterWhereInput[]
    OR?: ViolationLetterWhereInput[]
    NOT?: ViolationLetterWhereInput | ViolationLetterWhereInput[]
    pdfUrl?: StringFilter<"ViolationLetter"> | string
    createdAt?: DateTimeFilter<"ViolationLetter"> | Date | string
    violation?: XOR<ViolationRelationFilter, ViolationWhereInput>
  }, "id" | "violationId">

  export type ViolationLetterOrderByWithAggregationInput = {
    id?: SortOrder
    violationId?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
    _count?: ViolationLetterCountOrderByAggregateInput
    _max?: ViolationLetterMaxOrderByAggregateInput
    _min?: ViolationLetterMinOrderByAggregateInput
  }

  export type ViolationLetterScalarWhereWithAggregatesInput = {
    AND?: ViolationLetterScalarWhereWithAggregatesInput | ViolationLetterScalarWhereWithAggregatesInput[]
    OR?: ViolationLetterScalarWhereWithAggregatesInput[]
    NOT?: ViolationLetterScalarWhereWithAggregatesInput | ViolationLetterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ViolationLetter"> | string
    violationId?: StringWithAggregatesFilter<"ViolationLetter"> | string
    pdfUrl?: StringWithAggregatesFilter<"ViolationLetter"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ViolationLetter"> | Date | string
  }

  export type ParkingInspectionWhereInput = {
    AND?: ParkingInspectionWhereInput | ParkingInspectionWhereInput[]
    OR?: ParkingInspectionWhereInput[]
    NOT?: ParkingInspectionWhereInput | ParkingInspectionWhereInput[]
    id?: StringFilter<"ParkingInspection"> | string
    inspectorId?: StringFilter<"ParkingInspection"> | string
    inspectedAt?: DateTimeFilter<"ParkingInspection"> | Date | string
    plateNumber?: StringFilter<"ParkingInspection"> | string
    vehicleMake?: StringFilter<"ParkingInspection"> | string
    vehicleColor?: StringFilter<"ParkingInspection"> | string
    stallNumber?: StringFilter<"ParkingInspection"> | string
    photoUrl?: StringNullableFilter<"ParkingInspection"> | string | null
    notes?: StringNullableFilter<"ParkingInspection"> | string | null
    violationId?: StringNullableFilter<"ParkingInspection"> | string | null
    violation?: XOR<ViolationNullableRelationFilter, ViolationWhereInput> | null
  }

  export type ParkingInspectionOrderByWithRelationInput = {
    id?: SortOrder
    inspectorId?: SortOrder
    inspectedAt?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    violationId?: SortOrderInput | SortOrder
    violation?: ViolationOrderByWithRelationInput
  }

  export type ParkingInspectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ParkingInspectionWhereInput | ParkingInspectionWhereInput[]
    OR?: ParkingInspectionWhereInput[]
    NOT?: ParkingInspectionWhereInput | ParkingInspectionWhereInput[]
    inspectorId?: StringFilter<"ParkingInspection"> | string
    inspectedAt?: DateTimeFilter<"ParkingInspection"> | Date | string
    plateNumber?: StringFilter<"ParkingInspection"> | string
    vehicleMake?: StringFilter<"ParkingInspection"> | string
    vehicleColor?: StringFilter<"ParkingInspection"> | string
    stallNumber?: StringFilter<"ParkingInspection"> | string
    photoUrl?: StringNullableFilter<"ParkingInspection"> | string | null
    notes?: StringNullableFilter<"ParkingInspection"> | string | null
    violationId?: StringNullableFilter<"ParkingInspection"> | string | null
    violation?: XOR<ViolationNullableRelationFilter, ViolationWhereInput> | null
  }, "id">

  export type ParkingInspectionOrderByWithAggregationInput = {
    id?: SortOrder
    inspectorId?: SortOrder
    inspectedAt?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    violationId?: SortOrderInput | SortOrder
    _count?: ParkingInspectionCountOrderByAggregateInput
    _max?: ParkingInspectionMaxOrderByAggregateInput
    _min?: ParkingInspectionMinOrderByAggregateInput
  }

  export type ParkingInspectionScalarWhereWithAggregatesInput = {
    AND?: ParkingInspectionScalarWhereWithAggregatesInput | ParkingInspectionScalarWhereWithAggregatesInput[]
    OR?: ParkingInspectionScalarWhereWithAggregatesInput[]
    NOT?: ParkingInspectionScalarWhereWithAggregatesInput | ParkingInspectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParkingInspection"> | string
    inspectorId?: StringWithAggregatesFilter<"ParkingInspection"> | string
    inspectedAt?: DateTimeWithAggregatesFilter<"ParkingInspection"> | Date | string
    plateNumber?: StringWithAggregatesFilter<"ParkingInspection"> | string
    vehicleMake?: StringWithAggregatesFilter<"ParkingInspection"> | string
    vehicleColor?: StringWithAggregatesFilter<"ParkingInspection"> | string
    stallNumber?: StringWithAggregatesFilter<"ParkingInspection"> | string
    photoUrl?: StringNullableWithAggregatesFilter<"ParkingInspection"> | string | null
    notes?: StringNullableWithAggregatesFilter<"ParkingInspection"> | string | null
    violationId?: StringNullableWithAggregatesFilter<"ParkingInspection"> | string | null
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: IntFilter<"Setting"> | number
    maxDurationHours?: IntFilter<"Setting"> | number
    consecutiveDaysLimit?: IntFilter<"Setting"> | number
    monthlyVisitLimit?: IntFilter<"Setting"> | number
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    maxDurationHours?: IntFilter<"Setting"> | number
    consecutiveDaysLimit?: IntFilter<"Setting"> | number
    monthlyVisitLimit?: IntFilter<"Setting"> | number
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }, "id">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _avg?: SettingAvgOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
    _sum?: SettingSumOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Setting"> | number
    maxDurationHours?: IntWithAggregatesFilter<"Setting"> | number
    consecutiveDaysLimit?: IntWithAggregatesFilter<"Setting"> | number
    monthlyVisitLimit?: IntWithAggregatesFilter<"Setting"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
  }

  export type ElevatorBookingWhereInput = {
    AND?: ElevatorBookingWhereInput | ElevatorBookingWhereInput[]
    OR?: ElevatorBookingWhereInput[]
    NOT?: ElevatorBookingWhereInput | ElevatorBookingWhereInput[]
    id?: StringFilter<"ElevatorBooking"> | string
    unitNumber?: StringFilter<"ElevatorBooking"> | string
    duration?: IntFilter<"ElevatorBooking"> | number
    bookingDate?: DateTimeFilter<"ElevatorBooking"> | Date | string
    reason?: EnumElevatorBookingReasonFilter<"ElevatorBooking"> | $Enums.ElevatorBookingReason
    notes?: StringNullableFilter<"ElevatorBooking"> | string | null
    createdAt?: DateTimeFilter<"ElevatorBooking"> | Date | string
    updatedAt?: DateTimeFilter<"ElevatorBooking"> | Date | string
  }

  export type ElevatorBookingOrderByWithRelationInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    duration?: SortOrder
    bookingDate?: SortOrder
    reason?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElevatorBookingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ElevatorBookingWhereInput | ElevatorBookingWhereInput[]
    OR?: ElevatorBookingWhereInput[]
    NOT?: ElevatorBookingWhereInput | ElevatorBookingWhereInput[]
    unitNumber?: StringFilter<"ElevatorBooking"> | string
    duration?: IntFilter<"ElevatorBooking"> | number
    bookingDate?: DateTimeFilter<"ElevatorBooking"> | Date | string
    reason?: EnumElevatorBookingReasonFilter<"ElevatorBooking"> | $Enums.ElevatorBookingReason
    notes?: StringNullableFilter<"ElevatorBooking"> | string | null
    createdAt?: DateTimeFilter<"ElevatorBooking"> | Date | string
    updatedAt?: DateTimeFilter<"ElevatorBooking"> | Date | string
  }, "id">

  export type ElevatorBookingOrderByWithAggregationInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    duration?: SortOrder
    bookingDate?: SortOrder
    reason?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ElevatorBookingCountOrderByAggregateInput
    _avg?: ElevatorBookingAvgOrderByAggregateInput
    _max?: ElevatorBookingMaxOrderByAggregateInput
    _min?: ElevatorBookingMinOrderByAggregateInput
    _sum?: ElevatorBookingSumOrderByAggregateInput
  }

  export type ElevatorBookingScalarWhereWithAggregatesInput = {
    AND?: ElevatorBookingScalarWhereWithAggregatesInput | ElevatorBookingScalarWhereWithAggregatesInput[]
    OR?: ElevatorBookingScalarWhereWithAggregatesInput[]
    NOT?: ElevatorBookingScalarWhereWithAggregatesInput | ElevatorBookingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ElevatorBooking"> | string
    unitNumber?: StringWithAggregatesFilter<"ElevatorBooking"> | string
    duration?: IntWithAggregatesFilter<"ElevatorBooking"> | number
    bookingDate?: DateTimeWithAggregatesFilter<"ElevatorBooking"> | Date | string
    reason?: EnumElevatorBookingReasonWithAggregatesFilter<"ElevatorBooking"> | $Enums.ElevatorBookingReason
    notes?: StringNullableWithAggregatesFilter<"ElevatorBooking"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ElevatorBooking"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ElevatorBooking"> | Date | string
  }

  export type StorageUnitWhereInput = {
    AND?: StorageUnitWhereInput | StorageUnitWhereInput[]
    OR?: StorageUnitWhereInput[]
    NOT?: StorageUnitWhereInput | StorageUnitWhereInput[]
    id?: StringFilter<"StorageUnit"> | string
    name?: StringFilter<"StorageUnit"> | string
    status?: EnumStorageStatusFilter<"StorageUnit"> | $Enums.StorageStatus
    unitNumber?: StringNullableFilter<"StorageUnit"> | string | null
    startDate?: DateTimeNullableFilter<"StorageUnit"> | Date | string | null
    createdAt?: DateTimeFilter<"StorageUnit"> | Date | string
    updatedAt?: DateTimeFilter<"StorageUnit"> | Date | string
  }

  export type StorageUnitOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    unitNumber?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageUnitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: StorageUnitWhereInput | StorageUnitWhereInput[]
    OR?: StorageUnitWhereInput[]
    NOT?: StorageUnitWhereInput | StorageUnitWhereInput[]
    status?: EnumStorageStatusFilter<"StorageUnit"> | $Enums.StorageStatus
    unitNumber?: StringNullableFilter<"StorageUnit"> | string | null
    startDate?: DateTimeNullableFilter<"StorageUnit"> | Date | string | null
    createdAt?: DateTimeFilter<"StorageUnit"> | Date | string
    updatedAt?: DateTimeFilter<"StorageUnit"> | Date | string
  }, "id" | "name">

  export type StorageUnitOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    unitNumber?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StorageUnitCountOrderByAggregateInput
    _max?: StorageUnitMaxOrderByAggregateInput
    _min?: StorageUnitMinOrderByAggregateInput
  }

  export type StorageUnitScalarWhereWithAggregatesInput = {
    AND?: StorageUnitScalarWhereWithAggregatesInput | StorageUnitScalarWhereWithAggregatesInput[]
    OR?: StorageUnitScalarWhereWithAggregatesInput[]
    NOT?: StorageUnitScalarWhereWithAggregatesInput | StorageUnitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StorageUnit"> | string
    name?: StringWithAggregatesFilter<"StorageUnit"> | string
    status?: EnumStorageStatusWithAggregatesFilter<"StorageUnit"> | $Enums.StorageStatus
    unitNumber?: StringNullableWithAggregatesFilter<"StorageUnit"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"StorageUnit"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StorageUnit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StorageUnit"> | Date | string
  }

  export type StorageWaitlistEntryWhereInput = {
    AND?: StorageWaitlistEntryWhereInput | StorageWaitlistEntryWhereInput[]
    OR?: StorageWaitlistEntryWhereInput[]
    NOT?: StorageWaitlistEntryWhereInput | StorageWaitlistEntryWhereInput[]
    id?: StringFilter<"StorageWaitlistEntry"> | string
    unitNumber?: StringFilter<"StorageWaitlistEntry"> | string
    requestDate?: DateTimeFilter<"StorageWaitlistEntry"> | Date | string
    createdAt?: DateTimeFilter<"StorageWaitlistEntry"> | Date | string
    updatedAt?: DateTimeFilter<"StorageWaitlistEntry"> | Date | string
  }

  export type StorageWaitlistEntryOrderByWithRelationInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    requestDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageWaitlistEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StorageWaitlistEntryWhereInput | StorageWaitlistEntryWhereInput[]
    OR?: StorageWaitlistEntryWhereInput[]
    NOT?: StorageWaitlistEntryWhereInput | StorageWaitlistEntryWhereInput[]
    unitNumber?: StringFilter<"StorageWaitlistEntry"> | string
    requestDate?: DateTimeFilter<"StorageWaitlistEntry"> | Date | string
    createdAt?: DateTimeFilter<"StorageWaitlistEntry"> | Date | string
    updatedAt?: DateTimeFilter<"StorageWaitlistEntry"> | Date | string
  }, "id">

  export type StorageWaitlistEntryOrderByWithAggregationInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    requestDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StorageWaitlistEntryCountOrderByAggregateInput
    _max?: StorageWaitlistEntryMaxOrderByAggregateInput
    _min?: StorageWaitlistEntryMinOrderByAggregateInput
  }

  export type StorageWaitlistEntryScalarWhereWithAggregatesInput = {
    AND?: StorageWaitlistEntryScalarWhereWithAggregatesInput | StorageWaitlistEntryScalarWhereWithAggregatesInput[]
    OR?: StorageWaitlistEntryScalarWhereWithAggregatesInput[]
    NOT?: StorageWaitlistEntryScalarWhereWithAggregatesInput | StorageWaitlistEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StorageWaitlistEntry"> | string
    unitNumber?: StringWithAggregatesFilter<"StorageWaitlistEntry"> | string
    requestDate?: DateTimeWithAggregatesFilter<"StorageWaitlistEntry"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"StorageWaitlistEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StorageWaitlistEntry"> | Date | string
  }

  export type PatrolLogWhereInput = {
    AND?: PatrolLogWhereInput | PatrolLogWhereInput[]
    OR?: PatrolLogWhereInput[]
    NOT?: PatrolLogWhereInput | PatrolLogWhereInput[]
    id?: StringFilter<"PatrolLog"> | string
    reportedAt?: DateTimeFilter<"PatrolLog"> | Date | string
    notes?: StringFilter<"PatrolLog"> | string
    isNothingToReport?: BoolFilter<"PatrolLog"> | boolean
    reporterId?: StringFilter<"PatrolLog"> | string
    createdAt?: DateTimeFilter<"PatrolLog"> | Date | string
    updatedAt?: DateTimeFilter<"PatrolLog"> | Date | string
    reporter?: XOR<UserRelationFilter, UserWhereInput>
    images?: PatrolLogImageListRelationFilter
  }

  export type PatrolLogOrderByWithRelationInput = {
    id?: SortOrder
    reportedAt?: SortOrder
    notes?: SortOrder
    isNothingToReport?: SortOrder
    reporterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reporter?: UserOrderByWithRelationInput
    images?: PatrolLogImageOrderByRelationAggregateInput
  }

  export type PatrolLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatrolLogWhereInput | PatrolLogWhereInput[]
    OR?: PatrolLogWhereInput[]
    NOT?: PatrolLogWhereInput | PatrolLogWhereInput[]
    reportedAt?: DateTimeFilter<"PatrolLog"> | Date | string
    notes?: StringFilter<"PatrolLog"> | string
    isNothingToReport?: BoolFilter<"PatrolLog"> | boolean
    reporterId?: StringFilter<"PatrolLog"> | string
    createdAt?: DateTimeFilter<"PatrolLog"> | Date | string
    updatedAt?: DateTimeFilter<"PatrolLog"> | Date | string
    reporter?: XOR<UserRelationFilter, UserWhereInput>
    images?: PatrolLogImageListRelationFilter
  }, "id">

  export type PatrolLogOrderByWithAggregationInput = {
    id?: SortOrder
    reportedAt?: SortOrder
    notes?: SortOrder
    isNothingToReport?: SortOrder
    reporterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatrolLogCountOrderByAggregateInput
    _max?: PatrolLogMaxOrderByAggregateInput
    _min?: PatrolLogMinOrderByAggregateInput
  }

  export type PatrolLogScalarWhereWithAggregatesInput = {
    AND?: PatrolLogScalarWhereWithAggregatesInput | PatrolLogScalarWhereWithAggregatesInput[]
    OR?: PatrolLogScalarWhereWithAggregatesInput[]
    NOT?: PatrolLogScalarWhereWithAggregatesInput | PatrolLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatrolLog"> | string
    reportedAt?: DateTimeWithAggregatesFilter<"PatrolLog"> | Date | string
    notes?: StringWithAggregatesFilter<"PatrolLog"> | string
    isNothingToReport?: BoolWithAggregatesFilter<"PatrolLog"> | boolean
    reporterId?: StringWithAggregatesFilter<"PatrolLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PatrolLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatrolLog"> | Date | string
  }

  export type PatrolLogImageWhereInput = {
    AND?: PatrolLogImageWhereInput | PatrolLogImageWhereInput[]
    OR?: PatrolLogImageWhereInput[]
    NOT?: PatrolLogImageWhereInput | PatrolLogImageWhereInput[]
    id?: StringFilter<"PatrolLogImage"> | string
    url?: StringFilter<"PatrolLogImage"> | string
    patrolLogId?: StringFilter<"PatrolLogImage"> | string
    createdAt?: DateTimeFilter<"PatrolLogImage"> | Date | string
    patrolLog?: XOR<PatrolLogRelationFilter, PatrolLogWhereInput>
  }

  export type PatrolLogImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    patrolLogId?: SortOrder
    createdAt?: SortOrder
    patrolLog?: PatrolLogOrderByWithRelationInput
  }

  export type PatrolLogImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatrolLogImageWhereInput | PatrolLogImageWhereInput[]
    OR?: PatrolLogImageWhereInput[]
    NOT?: PatrolLogImageWhereInput | PatrolLogImageWhereInput[]
    url?: StringFilter<"PatrolLogImage"> | string
    patrolLogId?: StringFilter<"PatrolLogImage"> | string
    createdAt?: DateTimeFilter<"PatrolLogImage"> | Date | string
    patrolLog?: XOR<PatrolLogRelationFilter, PatrolLogWhereInput>
  }, "id">

  export type PatrolLogImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    patrolLogId?: SortOrder
    createdAt?: SortOrder
    _count?: PatrolLogImageCountOrderByAggregateInput
    _max?: PatrolLogImageMaxOrderByAggregateInput
    _min?: PatrolLogImageMinOrderByAggregateInput
  }

  export type PatrolLogImageScalarWhereWithAggregatesInput = {
    AND?: PatrolLogImageScalarWhereWithAggregatesInput | PatrolLogImageScalarWhereWithAggregatesInput[]
    OR?: PatrolLogImageScalarWhereWithAggregatesInput[]
    NOT?: PatrolLogImageScalarWhereWithAggregatesInput | PatrolLogImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatrolLogImage"> | string
    url?: StringWithAggregatesFilter<"PatrolLogImage"> | string
    patrolLogId?: StringWithAggregatesFilter<"PatrolLogImage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PatrolLogImage"> | Date | string
  }

  export type RenovationWorkWhereInput = {
    AND?: RenovationWorkWhereInput | RenovationWorkWhereInput[]
    OR?: RenovationWorkWhereInput[]
    NOT?: RenovationWorkWhereInput | RenovationWorkWhereInput[]
    id?: StringFilter<"RenovationWork"> | string
    unitNumber?: StringFilter<"RenovationWork"> | string
    startDate?: DateTimeFilter<"RenovationWork"> | Date | string
    endDate?: DateTimeFilter<"RenovationWork"> | Date | string
    damageDepositCheckNumber?: StringNullableFilter<"RenovationWork"> | string | null
    isExempted?: BoolFilter<"RenovationWork"> | boolean
    description?: StringNullableFilter<"RenovationWork"> | string | null
    status?: StringFilter<"RenovationWork"> | string
    createdAt?: DateTimeFilter<"RenovationWork"> | Date | string
    updatedAt?: DateTimeFilter<"RenovationWork"> | Date | string
    files?: RenovationWorkFileListRelationFilter
  }

  export type RenovationWorkOrderByWithRelationInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    damageDepositCheckNumber?: SortOrderInput | SortOrder
    isExempted?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    files?: RenovationWorkFileOrderByRelationAggregateInput
  }

  export type RenovationWorkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RenovationWorkWhereInput | RenovationWorkWhereInput[]
    OR?: RenovationWorkWhereInput[]
    NOT?: RenovationWorkWhereInput | RenovationWorkWhereInput[]
    unitNumber?: StringFilter<"RenovationWork"> | string
    startDate?: DateTimeFilter<"RenovationWork"> | Date | string
    endDate?: DateTimeFilter<"RenovationWork"> | Date | string
    damageDepositCheckNumber?: StringNullableFilter<"RenovationWork"> | string | null
    isExempted?: BoolFilter<"RenovationWork"> | boolean
    description?: StringNullableFilter<"RenovationWork"> | string | null
    status?: StringFilter<"RenovationWork"> | string
    createdAt?: DateTimeFilter<"RenovationWork"> | Date | string
    updatedAt?: DateTimeFilter<"RenovationWork"> | Date | string
    files?: RenovationWorkFileListRelationFilter
  }, "id">

  export type RenovationWorkOrderByWithAggregationInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    damageDepositCheckNumber?: SortOrderInput | SortOrder
    isExempted?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RenovationWorkCountOrderByAggregateInput
    _max?: RenovationWorkMaxOrderByAggregateInput
    _min?: RenovationWorkMinOrderByAggregateInput
  }

  export type RenovationWorkScalarWhereWithAggregatesInput = {
    AND?: RenovationWorkScalarWhereWithAggregatesInput | RenovationWorkScalarWhereWithAggregatesInput[]
    OR?: RenovationWorkScalarWhereWithAggregatesInput[]
    NOT?: RenovationWorkScalarWhereWithAggregatesInput | RenovationWorkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RenovationWork"> | string
    unitNumber?: StringWithAggregatesFilter<"RenovationWork"> | string
    startDate?: DateTimeWithAggregatesFilter<"RenovationWork"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"RenovationWork"> | Date | string
    damageDepositCheckNumber?: StringNullableWithAggregatesFilter<"RenovationWork"> | string | null
    isExempted?: BoolWithAggregatesFilter<"RenovationWork"> | boolean
    description?: StringNullableWithAggregatesFilter<"RenovationWork"> | string | null
    status?: StringWithAggregatesFilter<"RenovationWork"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RenovationWork"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RenovationWork"> | Date | string
  }

  export type RenovationWorkFileWhereInput = {
    AND?: RenovationWorkFileWhereInput | RenovationWorkFileWhereInput[]
    OR?: RenovationWorkFileWhereInput[]
    NOT?: RenovationWorkFileWhereInput | RenovationWorkFileWhereInput[]
    id?: StringFilter<"RenovationWorkFile"> | string
    renovationWorkId?: StringFilter<"RenovationWorkFile"> | string
    fileName?: StringFilter<"RenovationWorkFile"> | string
    fileUrl?: StringFilter<"RenovationWorkFile"> | string
    fileType?: StringFilter<"RenovationWorkFile"> | string
    createdAt?: DateTimeFilter<"RenovationWorkFile"> | Date | string
    renovationWork?: XOR<RenovationWorkRelationFilter, RenovationWorkWhereInput>
  }

  export type RenovationWorkFileOrderByWithRelationInput = {
    id?: SortOrder
    renovationWorkId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    renovationWork?: RenovationWorkOrderByWithRelationInput
  }

  export type RenovationWorkFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RenovationWorkFileWhereInput | RenovationWorkFileWhereInput[]
    OR?: RenovationWorkFileWhereInput[]
    NOT?: RenovationWorkFileWhereInput | RenovationWorkFileWhereInput[]
    renovationWorkId?: StringFilter<"RenovationWorkFile"> | string
    fileName?: StringFilter<"RenovationWorkFile"> | string
    fileUrl?: StringFilter<"RenovationWorkFile"> | string
    fileType?: StringFilter<"RenovationWorkFile"> | string
    createdAt?: DateTimeFilter<"RenovationWorkFile"> | Date | string
    renovationWork?: XOR<RenovationWorkRelationFilter, RenovationWorkWhereInput>
  }, "id">

  export type RenovationWorkFileOrderByWithAggregationInput = {
    id?: SortOrder
    renovationWorkId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    _count?: RenovationWorkFileCountOrderByAggregateInput
    _max?: RenovationWorkFileMaxOrderByAggregateInput
    _min?: RenovationWorkFileMinOrderByAggregateInput
  }

  export type RenovationWorkFileScalarWhereWithAggregatesInput = {
    AND?: RenovationWorkFileScalarWhereWithAggregatesInput | RenovationWorkFileScalarWhereWithAggregatesInput[]
    OR?: RenovationWorkFileScalarWhereWithAggregatesInput[]
    NOT?: RenovationWorkFileScalarWhereWithAggregatesInput | RenovationWorkFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RenovationWorkFile"> | string
    renovationWorkId?: StringWithAggregatesFilter<"RenovationWorkFile"> | string
    fileName?: StringWithAggregatesFilter<"RenovationWorkFile"> | string
    fileUrl?: StringWithAggregatesFilter<"RenovationWorkFile"> | string
    fileType?: StringWithAggregatesFilter<"RenovationWorkFile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RenovationWorkFile"> | Date | string
  }

  export type RegisteredVehicleWhereInput = {
    AND?: RegisteredVehicleWhereInput | RegisteredVehicleWhereInput[]
    OR?: RegisteredVehicleWhereInput[]
    NOT?: RegisteredVehicleWhereInput | RegisteredVehicleWhereInput[]
    id?: StringFilter<"RegisteredVehicle"> | string
    plateNumber?: StringFilter<"RegisteredVehicle"> | string
    carModel?: StringFilter<"RegisteredVehicle"> | string
    make?: StringFilter<"RegisteredVehicle"> | string
    colour?: StringFilter<"RegisteredVehicle"> | string
    parkingStall?: StringNullableFilter<"RegisteredVehicle"> | string | null
    unitNumber?: StringFilter<"RegisteredVehicle"> | string
    residentType?: EnumResidentTypeFilter<"RegisteredVehicle"> | $Enums.ResidentType
    createdAt?: DateTimeFilter<"RegisteredVehicle"> | Date | string
    updatedAt?: DateTimeFilter<"RegisteredVehicle"> | Date | string
  }

  export type RegisteredVehicleOrderByWithRelationInput = {
    id?: SortOrder
    plateNumber?: SortOrder
    carModel?: SortOrder
    make?: SortOrder
    colour?: SortOrder
    parkingStall?: SortOrderInput | SortOrder
    unitNumber?: SortOrder
    residentType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegisteredVehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RegisteredVehicleWhereInput | RegisteredVehicleWhereInput[]
    OR?: RegisteredVehicleWhereInput[]
    NOT?: RegisteredVehicleWhereInput | RegisteredVehicleWhereInput[]
    plateNumber?: StringFilter<"RegisteredVehicle"> | string
    carModel?: StringFilter<"RegisteredVehicle"> | string
    make?: StringFilter<"RegisteredVehicle"> | string
    colour?: StringFilter<"RegisteredVehicle"> | string
    parkingStall?: StringNullableFilter<"RegisteredVehicle"> | string | null
    unitNumber?: StringFilter<"RegisteredVehicle"> | string
    residentType?: EnumResidentTypeFilter<"RegisteredVehicle"> | $Enums.ResidentType
    createdAt?: DateTimeFilter<"RegisteredVehicle"> | Date | string
    updatedAt?: DateTimeFilter<"RegisteredVehicle"> | Date | string
  }, "id">

  export type RegisteredVehicleOrderByWithAggregationInput = {
    id?: SortOrder
    plateNumber?: SortOrder
    carModel?: SortOrder
    make?: SortOrder
    colour?: SortOrder
    parkingStall?: SortOrderInput | SortOrder
    unitNumber?: SortOrder
    residentType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegisteredVehicleCountOrderByAggregateInput
    _max?: RegisteredVehicleMaxOrderByAggregateInput
    _min?: RegisteredVehicleMinOrderByAggregateInput
  }

  export type RegisteredVehicleScalarWhereWithAggregatesInput = {
    AND?: RegisteredVehicleScalarWhereWithAggregatesInput | RegisteredVehicleScalarWhereWithAggregatesInput[]
    OR?: RegisteredVehicleScalarWhereWithAggregatesInput[]
    NOT?: RegisteredVehicleScalarWhereWithAggregatesInput | RegisteredVehicleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RegisteredVehicle"> | string
    plateNumber?: StringWithAggregatesFilter<"RegisteredVehicle"> | string
    carModel?: StringWithAggregatesFilter<"RegisteredVehicle"> | string
    make?: StringWithAggregatesFilter<"RegisteredVehicle"> | string
    colour?: StringWithAggregatesFilter<"RegisteredVehicle"> | string
    parkingStall?: StringNullableWithAggregatesFilter<"RegisteredVehicle"> | string | null
    unitNumber?: StringWithAggregatesFilter<"RegisteredVehicle"> | string
    residentType?: EnumResidentTypeWithAggregatesFilter<"RegisteredVehicle"> | $Enums.ResidentType
    createdAt?: DateTimeWithAggregatesFilter<"RegisteredVehicle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RegisteredVehicle"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string
    lastName?: string
    unit?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patrolLogs?: PatrolLogCreateNestedManyWithoutReporterInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string
    lastName?: string
    unit?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patrolLogs?: PatrolLogUncheckedCreateNestedManyWithoutReporterInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patrolLogs?: PatrolLogUpdateManyWithoutReporterNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patrolLogs?: PatrolLogUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName?: string
    lastName?: string
    unit?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitorParkingRequestCreateInput = {
    id?: string
    vehicleMake: string
    plateNumber: string
    unit: string
    durationInHours: number
    createdAt?: Date | string
    expiresAt: Date | string
    violationStatus?: $Enums.ViolationStatus
    isExpired?: boolean
    violations?: ViolationCreateNestedManyWithoutPermitInput
  }

  export type VisitorParkingRequestUncheckedCreateInput = {
    id?: string
    vehicleMake: string
    plateNumber: string
    unit: string
    durationInHours: number
    createdAt?: Date | string
    expiresAt: Date | string
    violationStatus?: $Enums.ViolationStatus
    isExpired?: boolean
    violations?: ViolationUncheckedCreateNestedManyWithoutPermitInput
  }

  export type VisitorParkingRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    durationInHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violationStatus?: EnumViolationStatusFieldUpdateOperationsInput | $Enums.ViolationStatus
    isExpired?: BoolFieldUpdateOperationsInput | boolean
    violations?: ViolationUpdateManyWithoutPermitNestedInput
  }

  export type VisitorParkingRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    durationInHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violationStatus?: EnumViolationStatusFieldUpdateOperationsInput | $Enums.ViolationStatus
    isExpired?: BoolFieldUpdateOperationsInput | boolean
    violations?: ViolationUncheckedUpdateManyWithoutPermitNestedInput
  }

  export type VisitorParkingRequestCreateManyInput = {
    id?: string
    vehicleMake: string
    plateNumber: string
    unit: string
    durationInHours: number
    createdAt?: Date | string
    expiresAt: Date | string
    violationStatus?: $Enums.ViolationStatus
    isExpired?: boolean
  }

  export type VisitorParkingRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    durationInHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violationStatus?: EnumViolationStatusFieldUpdateOperationsInput | $Enums.ViolationStatus
    isExpired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VisitorParkingRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    durationInHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violationStatus?: EnumViolationStatusFieldUpdateOperationsInput | $Enums.ViolationStatus
    isExpired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ViolationCreateInput = {
    id?: string
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    letter?: ViolationLetterCreateNestedOneWithoutViolationInput
    permit?: VisitorParkingRequestCreateNestedOneWithoutViolationsInput
    inspections?: ParkingInspectionCreateNestedManyWithoutViolationInput
  }

  export type ViolationUncheckedCreateInput = {
    id?: string
    permitId?: string | null
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    letter?: ViolationLetterUncheckedCreateNestedOneWithoutViolationInput
    inspections?: ParkingInspectionUncheckedCreateNestedManyWithoutViolationInput
  }

  export type ViolationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    letter?: ViolationLetterUpdateOneWithoutViolationNestedInput
    permit?: VisitorParkingRequestUpdateOneWithoutViolationsNestedInput
    inspections?: ParkingInspectionUpdateManyWithoutViolationNestedInput
  }

  export type ViolationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    permitId?: NullableStringFieldUpdateOperationsInput | string | null
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    letter?: ViolationLetterUncheckedUpdateOneWithoutViolationNestedInput
    inspections?: ParkingInspectionUncheckedUpdateManyWithoutViolationNestedInput
  }

  export type ViolationCreateManyInput = {
    id?: string
    permitId?: string | null
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
  }

  export type ViolationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ViolationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    permitId?: NullableStringFieldUpdateOperationsInput | string | null
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ViolationLetterCreateInput = {
    id?: string
    pdfUrl: string
    createdAt?: Date | string
    violation: ViolationCreateNestedOneWithoutLetterInput
  }

  export type ViolationLetterUncheckedCreateInput = {
    id?: string
    violationId: string
    pdfUrl: string
    createdAt?: Date | string
  }

  export type ViolationLetterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violation?: ViolationUpdateOneRequiredWithoutLetterNestedInput
  }

  export type ViolationLetterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    violationId?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViolationLetterCreateManyInput = {
    id?: string
    violationId: string
    pdfUrl: string
    createdAt?: Date | string
  }

  export type ViolationLetterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViolationLetterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    violationId?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParkingInspectionCreateInput = {
    id?: string
    inspectorId: string
    inspectedAt?: Date | string
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl?: string | null
    notes?: string | null
    violation?: ViolationCreateNestedOneWithoutInspectionsInput
  }

  export type ParkingInspectionUncheckedCreateInput = {
    id?: string
    inspectorId: string
    inspectedAt?: Date | string
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl?: string | null
    notes?: string | null
    violationId?: string | null
  }

  export type ParkingInspectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    violation?: ViolationUpdateOneWithoutInspectionsNestedInput
  }

  export type ParkingInspectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    violationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingInspectionCreateManyInput = {
    id?: string
    inspectorId: string
    inspectedAt?: Date | string
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl?: string | null
    notes?: string | null
    violationId?: string | null
  }

  export type ParkingInspectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingInspectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    violationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SettingCreateInput = {
    id?: number
    maxDurationHours?: number
    consecutiveDaysLimit?: number
    monthlyVisitLimit?: number
    updatedAt?: Date | string
  }

  export type SettingUncheckedCreateInput = {
    id?: number
    maxDurationHours?: number
    consecutiveDaysLimit?: number
    monthlyVisitLimit?: number
    updatedAt?: Date | string
  }

  export type SettingUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxDurationHours?: IntFieldUpdateOperationsInput | number
    consecutiveDaysLimit?: IntFieldUpdateOperationsInput | number
    monthlyVisitLimit?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxDurationHours?: IntFieldUpdateOperationsInput | number
    consecutiveDaysLimit?: IntFieldUpdateOperationsInput | number
    monthlyVisitLimit?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateManyInput = {
    id?: number
    maxDurationHours?: number
    consecutiveDaysLimit?: number
    monthlyVisitLimit?: number
    updatedAt?: Date | string
  }

  export type SettingUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxDurationHours?: IntFieldUpdateOperationsInput | number
    consecutiveDaysLimit?: IntFieldUpdateOperationsInput | number
    monthlyVisitLimit?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxDurationHours?: IntFieldUpdateOperationsInput | number
    consecutiveDaysLimit?: IntFieldUpdateOperationsInput | number
    monthlyVisitLimit?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElevatorBookingCreateInput = {
    id?: string
    unitNumber: string
    duration: number
    bookingDate: Date | string
    reason: $Enums.ElevatorBookingReason
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ElevatorBookingUncheckedCreateInput = {
    id?: string
    unitNumber: string
    duration: number
    bookingDate: Date | string
    reason: $Enums.ElevatorBookingReason
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ElevatorBookingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    bookingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumElevatorBookingReasonFieldUpdateOperationsInput | $Enums.ElevatorBookingReason
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElevatorBookingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    bookingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumElevatorBookingReasonFieldUpdateOperationsInput | $Enums.ElevatorBookingReason
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElevatorBookingCreateManyInput = {
    id?: string
    unitNumber: string
    duration: number
    bookingDate: Date | string
    reason: $Enums.ElevatorBookingReason
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ElevatorBookingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    bookingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumElevatorBookingReasonFieldUpdateOperationsInput | $Enums.ElevatorBookingReason
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElevatorBookingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    bookingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: EnumElevatorBookingReasonFieldUpdateOperationsInput | $Enums.ElevatorBookingReason
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUnitCreateInput = {
    id?: string
    name: string
    status?: $Enums.StorageStatus
    unitNumber?: string | null
    startDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageUnitUncheckedCreateInput = {
    id?: string
    name: string
    status?: $Enums.StorageStatus
    unitNumber?: string | null
    startDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageUnitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumStorageStatusFieldUpdateOperationsInput | $Enums.StorageStatus
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUnitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumStorageStatusFieldUpdateOperationsInput | $Enums.StorageStatus
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUnitCreateManyInput = {
    id?: string
    name: string
    status?: $Enums.StorageStatus
    unitNumber?: string | null
    startDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageUnitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumStorageStatusFieldUpdateOperationsInput | $Enums.StorageStatus
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUnitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumStorageStatusFieldUpdateOperationsInput | $Enums.StorageStatus
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageWaitlistEntryCreateInput = {
    id?: string
    unitNumber: string
    requestDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageWaitlistEntryUncheckedCreateInput = {
    id?: string
    unitNumber: string
    requestDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageWaitlistEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageWaitlistEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageWaitlistEntryCreateManyInput = {
    id?: string
    unitNumber: string
    requestDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageWaitlistEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageWaitlistEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogCreateInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutPatrolLogsInput
    images?: PatrolLogImageCreateNestedManyWithoutPatrolLogInput
  }

  export type PatrolLogUncheckedCreateInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    reporterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PatrolLogImageUncheckedCreateNestedManyWithoutPatrolLogInput
  }

  export type PatrolLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutPatrolLogsNestedInput
    images?: PatrolLogImageUpdateManyWithoutPatrolLogNestedInput
  }

  export type PatrolLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    reporterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PatrolLogImageUncheckedUpdateManyWithoutPatrolLogNestedInput
  }

  export type PatrolLogCreateManyInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    reporterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatrolLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    reporterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogImageCreateInput = {
    id?: string
    url: string
    createdAt?: Date | string
    patrolLog: PatrolLogCreateNestedOneWithoutImagesInput
  }

  export type PatrolLogImageUncheckedCreateInput = {
    id?: string
    url: string
    patrolLogId: string
    createdAt?: Date | string
  }

  export type PatrolLogImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patrolLog?: PatrolLogUpdateOneRequiredWithoutImagesNestedInput
  }

  export type PatrolLogImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    patrolLogId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogImageCreateManyInput = {
    id?: string
    url: string
    patrolLogId: string
    createdAt?: Date | string
  }

  export type PatrolLogImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    patrolLogId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkCreateInput = {
    id?: string
    unitNumber: string
    startDate: Date | string
    endDate: Date | string
    damageDepositCheckNumber?: string | null
    isExempted?: boolean
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: RenovationWorkFileCreateNestedManyWithoutRenovationWorkInput
  }

  export type RenovationWorkUncheckedCreateInput = {
    id?: string
    unitNumber: string
    startDate: Date | string
    endDate: Date | string
    damageDepositCheckNumber?: string | null
    isExempted?: boolean
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: RenovationWorkFileUncheckedCreateNestedManyWithoutRenovationWorkInput
  }

  export type RenovationWorkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    damageDepositCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isExempted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: RenovationWorkFileUpdateManyWithoutRenovationWorkNestedInput
  }

  export type RenovationWorkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    damageDepositCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isExempted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: RenovationWorkFileUncheckedUpdateManyWithoutRenovationWorkNestedInput
  }

  export type RenovationWorkCreateManyInput = {
    id?: string
    unitNumber: string
    startDate: Date | string
    endDate: Date | string
    damageDepositCheckNumber?: string | null
    isExempted?: boolean
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RenovationWorkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    damageDepositCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isExempted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    damageDepositCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isExempted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    renovationWork: RenovationWorkCreateNestedOneWithoutFilesInput
  }

  export type RenovationWorkFileUncheckedCreateInput = {
    id?: string
    renovationWorkId: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
  }

  export type RenovationWorkFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationWork?: RenovationWorkUpdateOneRequiredWithoutFilesNestedInput
  }

  export type RenovationWorkFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    renovationWorkId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileCreateManyInput = {
    id?: string
    renovationWorkId: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
  }

  export type RenovationWorkFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    renovationWorkId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegisteredVehicleCreateInput = {
    id?: string
    plateNumber: string
    carModel: string
    make: string
    colour: string
    parkingStall?: string | null
    unitNumber: string
    residentType: $Enums.ResidentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegisteredVehicleUncheckedCreateInput = {
    id?: string
    plateNumber: string
    carModel: string
    make: string
    colour: string
    parkingStall?: string | null
    unitNumber: string
    residentType: $Enums.ResidentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegisteredVehicleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    carModel?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    colour?: StringFieldUpdateOperationsInput | string
    parkingStall?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: StringFieldUpdateOperationsInput | string
    residentType?: EnumResidentTypeFieldUpdateOperationsInput | $Enums.ResidentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegisteredVehicleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    carModel?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    colour?: StringFieldUpdateOperationsInput | string
    parkingStall?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: StringFieldUpdateOperationsInput | string
    residentType?: EnumResidentTypeFieldUpdateOperationsInput | $Enums.ResidentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegisteredVehicleCreateManyInput = {
    id?: string
    plateNumber: string
    carModel: string
    make: string
    colour: string
    parkingStall?: string | null
    unitNumber: string
    residentType: $Enums.ResidentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegisteredVehicleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    carModel?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    colour?: StringFieldUpdateOperationsInput | string
    parkingStall?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: StringFieldUpdateOperationsInput | string
    residentType?: EnumResidentTypeFieldUpdateOperationsInput | $Enums.ResidentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegisteredVehicleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    carModel?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    colour?: StringFieldUpdateOperationsInput | string
    parkingStall?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: StringFieldUpdateOperationsInput | string
    residentType?: EnumResidentTypeFieldUpdateOperationsInput | $Enums.ResidentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PatrolLogListRelationFilter = {
    every?: PatrolLogWhereInput
    some?: PatrolLogWhereInput
    none?: PatrolLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PatrolLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    unit?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    unit?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    unit?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumViolationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ViolationStatus | EnumViolationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumViolationStatusFilter<$PrismaModel> | $Enums.ViolationStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ViolationListRelationFilter = {
    every?: ViolationWhereInput
    some?: ViolationWhereInput
    none?: ViolationWhereInput
  }

  export type ViolationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VisitorParkingRequestCountOrderByAggregateInput = {
    id?: SortOrder
    vehicleMake?: SortOrder
    plateNumber?: SortOrder
    unit?: SortOrder
    durationInHours?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    violationStatus?: SortOrder
    isExpired?: SortOrder
  }

  export type VisitorParkingRequestAvgOrderByAggregateInput = {
    durationInHours?: SortOrder
  }

  export type VisitorParkingRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    vehicleMake?: SortOrder
    plateNumber?: SortOrder
    unit?: SortOrder
    durationInHours?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    violationStatus?: SortOrder
    isExpired?: SortOrder
  }

  export type VisitorParkingRequestMinOrderByAggregateInput = {
    id?: SortOrder
    vehicleMake?: SortOrder
    plateNumber?: SortOrder
    unit?: SortOrder
    durationInHours?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    violationStatus?: SortOrder
    isExpired?: SortOrder
  }

  export type VisitorParkingRequestSumOrderByAggregateInput = {
    durationInHours?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumViolationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ViolationStatus | EnumViolationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumViolationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ViolationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumViolationStatusFilter<$PrismaModel>
    _max?: NestedEnumViolationStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ViolationLetterNullableRelationFilter = {
    is?: ViolationLetterWhereInput | null
    isNot?: ViolationLetterWhereInput | null
  }

  export type VisitorParkingRequestNullableRelationFilter = {
    is?: VisitorParkingRequestWhereInput | null
    isNot?: VisitorParkingRequestWhereInput | null
  }

  export type ParkingInspectionListRelationFilter = {
    every?: ParkingInspectionWhereInput
    some?: ParkingInspectionWhereInput
    none?: ParkingInspectionWhereInput
  }

  export type ParkingInspectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ViolationCountOrderByAggregateInput = {
    id?: SortOrder
    permitId?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrder
    violationType?: SortOrder
    notes?: SortOrder
    issuedAt?: SortOrder
    noticeIssued?: SortOrder
  }

  export type ViolationMaxOrderByAggregateInput = {
    id?: SortOrder
    permitId?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrder
    violationType?: SortOrder
    notes?: SortOrder
    issuedAt?: SortOrder
    noticeIssued?: SortOrder
  }

  export type ViolationMinOrderByAggregateInput = {
    id?: SortOrder
    permitId?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrder
    violationType?: SortOrder
    notes?: SortOrder
    issuedAt?: SortOrder
    noticeIssued?: SortOrder
  }

  export type ViolationRelationFilter = {
    is?: ViolationWhereInput
    isNot?: ViolationWhereInput
  }

  export type ViolationLetterCountOrderByAggregateInput = {
    id?: SortOrder
    violationId?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ViolationLetterMaxOrderByAggregateInput = {
    id?: SortOrder
    violationId?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ViolationLetterMinOrderByAggregateInput = {
    id?: SortOrder
    violationId?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ViolationNullableRelationFilter = {
    is?: ViolationWhereInput | null
    isNot?: ViolationWhereInput | null
  }

  export type ParkingInspectionCountOrderByAggregateInput = {
    id?: SortOrder
    inspectorId?: SortOrder
    inspectedAt?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrder
    notes?: SortOrder
    violationId?: SortOrder
  }

  export type ParkingInspectionMaxOrderByAggregateInput = {
    id?: SortOrder
    inspectorId?: SortOrder
    inspectedAt?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrder
    notes?: SortOrder
    violationId?: SortOrder
  }

  export type ParkingInspectionMinOrderByAggregateInput = {
    id?: SortOrder
    inspectorId?: SortOrder
    inspectedAt?: SortOrder
    plateNumber?: SortOrder
    vehicleMake?: SortOrder
    vehicleColor?: SortOrder
    stallNumber?: SortOrder
    photoUrl?: SortOrder
    notes?: SortOrder
    violationId?: SortOrder
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingAvgOrderByAggregateInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingSumOrderByAggregateInput = {
    id?: SortOrder
    maxDurationHours?: SortOrder
    consecutiveDaysLimit?: SortOrder
    monthlyVisitLimit?: SortOrder
  }

  export type EnumElevatorBookingReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.ElevatorBookingReason | EnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumElevatorBookingReasonFilter<$PrismaModel> | $Enums.ElevatorBookingReason
  }

  export type ElevatorBookingCountOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    duration?: SortOrder
    bookingDate?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElevatorBookingAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type ElevatorBookingMaxOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    duration?: SortOrder
    bookingDate?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElevatorBookingMinOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    duration?: SortOrder
    bookingDate?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ElevatorBookingSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type EnumElevatorBookingReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ElevatorBookingReason | EnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumElevatorBookingReasonWithAggregatesFilter<$PrismaModel> | $Enums.ElevatorBookingReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumElevatorBookingReasonFilter<$PrismaModel>
    _max?: NestedEnumElevatorBookingReasonFilter<$PrismaModel>
  }

  export type EnumStorageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageStatus | EnumStorageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageStatusFilter<$PrismaModel> | $Enums.StorageStatus
  }

  export type StorageUnitCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageUnitMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageUnitMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStorageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageStatus | EnumStorageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageStatusWithAggregatesFilter<$PrismaModel> | $Enums.StorageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorageStatusFilter<$PrismaModel>
    _max?: NestedEnumStorageStatusFilter<$PrismaModel>
  }

  export type StorageWaitlistEntryCountOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    requestDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageWaitlistEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    requestDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageWaitlistEntryMinOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    requestDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PatrolLogImageListRelationFilter = {
    every?: PatrolLogImageWhereInput
    some?: PatrolLogImageWhereInput
    none?: PatrolLogImageWhereInput
  }

  export type PatrolLogImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatrolLogCountOrderByAggregateInput = {
    id?: SortOrder
    reportedAt?: SortOrder
    notes?: SortOrder
    isNothingToReport?: SortOrder
    reporterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatrolLogMaxOrderByAggregateInput = {
    id?: SortOrder
    reportedAt?: SortOrder
    notes?: SortOrder
    isNothingToReport?: SortOrder
    reporterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatrolLogMinOrderByAggregateInput = {
    id?: SortOrder
    reportedAt?: SortOrder
    notes?: SortOrder
    isNothingToReport?: SortOrder
    reporterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatrolLogRelationFilter = {
    is?: PatrolLogWhereInput
    isNot?: PatrolLogWhereInput
  }

  export type PatrolLogImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    patrolLogId?: SortOrder
    createdAt?: SortOrder
  }

  export type PatrolLogImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    patrolLogId?: SortOrder
    createdAt?: SortOrder
  }

  export type PatrolLogImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    patrolLogId?: SortOrder
    createdAt?: SortOrder
  }

  export type RenovationWorkFileListRelationFilter = {
    every?: RenovationWorkFileWhereInput
    some?: RenovationWorkFileWhereInput
    none?: RenovationWorkFileWhereInput
  }

  export type RenovationWorkFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RenovationWorkCountOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    damageDepositCheckNumber?: SortOrder
    isExempted?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenovationWorkMaxOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    damageDepositCheckNumber?: SortOrder
    isExempted?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenovationWorkMinOrderByAggregateInput = {
    id?: SortOrder
    unitNumber?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    damageDepositCheckNumber?: SortOrder
    isExempted?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenovationWorkRelationFilter = {
    is?: RenovationWorkWhereInput
    isNot?: RenovationWorkWhereInput
  }

  export type RenovationWorkFileCountOrderByAggregateInput = {
    id?: SortOrder
    renovationWorkId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
  }

  export type RenovationWorkFileMaxOrderByAggregateInput = {
    id?: SortOrder
    renovationWorkId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
  }

  export type RenovationWorkFileMinOrderByAggregateInput = {
    id?: SortOrder
    renovationWorkId?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumResidentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResidentType | EnumResidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResidentTypeFilter<$PrismaModel> | $Enums.ResidentType
  }

  export type RegisteredVehicleCountOrderByAggregateInput = {
    id?: SortOrder
    plateNumber?: SortOrder
    carModel?: SortOrder
    make?: SortOrder
    colour?: SortOrder
    parkingStall?: SortOrder
    unitNumber?: SortOrder
    residentType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegisteredVehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    plateNumber?: SortOrder
    carModel?: SortOrder
    make?: SortOrder
    colour?: SortOrder
    parkingStall?: SortOrder
    unitNumber?: SortOrder
    residentType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegisteredVehicleMinOrderByAggregateInput = {
    id?: SortOrder
    plateNumber?: SortOrder
    carModel?: SortOrder
    make?: SortOrder
    colour?: SortOrder
    parkingStall?: SortOrder
    unitNumber?: SortOrder
    residentType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumResidentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResidentType | EnumResidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResidentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResidentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResidentTypeFilter<$PrismaModel>
    _max?: NestedEnumResidentTypeFilter<$PrismaModel>
  }

  export type PatrolLogCreateNestedManyWithoutReporterInput = {
    create?: XOR<PatrolLogCreateWithoutReporterInput, PatrolLogUncheckedCreateWithoutReporterInput> | PatrolLogCreateWithoutReporterInput[] | PatrolLogUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: PatrolLogCreateOrConnectWithoutReporterInput | PatrolLogCreateOrConnectWithoutReporterInput[]
    createMany?: PatrolLogCreateManyReporterInputEnvelope
    connect?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
  }

  export type PatrolLogUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<PatrolLogCreateWithoutReporterInput, PatrolLogUncheckedCreateWithoutReporterInput> | PatrolLogCreateWithoutReporterInput[] | PatrolLogUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: PatrolLogCreateOrConnectWithoutReporterInput | PatrolLogCreateOrConnectWithoutReporterInput[]
    createMany?: PatrolLogCreateManyReporterInputEnvelope
    connect?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PatrolLogUpdateManyWithoutReporterNestedInput = {
    create?: XOR<PatrolLogCreateWithoutReporterInput, PatrolLogUncheckedCreateWithoutReporterInput> | PatrolLogCreateWithoutReporterInput[] | PatrolLogUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: PatrolLogCreateOrConnectWithoutReporterInput | PatrolLogCreateOrConnectWithoutReporterInput[]
    upsert?: PatrolLogUpsertWithWhereUniqueWithoutReporterInput | PatrolLogUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: PatrolLogCreateManyReporterInputEnvelope
    set?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    disconnect?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    delete?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    connect?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    update?: PatrolLogUpdateWithWhereUniqueWithoutReporterInput | PatrolLogUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: PatrolLogUpdateManyWithWhereWithoutReporterInput | PatrolLogUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: PatrolLogScalarWhereInput | PatrolLogScalarWhereInput[]
  }

  export type PatrolLogUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<PatrolLogCreateWithoutReporterInput, PatrolLogUncheckedCreateWithoutReporterInput> | PatrolLogCreateWithoutReporterInput[] | PatrolLogUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: PatrolLogCreateOrConnectWithoutReporterInput | PatrolLogCreateOrConnectWithoutReporterInput[]
    upsert?: PatrolLogUpsertWithWhereUniqueWithoutReporterInput | PatrolLogUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: PatrolLogCreateManyReporterInputEnvelope
    set?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    disconnect?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    delete?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    connect?: PatrolLogWhereUniqueInput | PatrolLogWhereUniqueInput[]
    update?: PatrolLogUpdateWithWhereUniqueWithoutReporterInput | PatrolLogUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: PatrolLogUpdateManyWithWhereWithoutReporterInput | PatrolLogUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: PatrolLogScalarWhereInput | PatrolLogScalarWhereInput[]
  }

  export type ViolationCreateNestedManyWithoutPermitInput = {
    create?: XOR<ViolationCreateWithoutPermitInput, ViolationUncheckedCreateWithoutPermitInput> | ViolationCreateWithoutPermitInput[] | ViolationUncheckedCreateWithoutPermitInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutPermitInput | ViolationCreateOrConnectWithoutPermitInput[]
    createMany?: ViolationCreateManyPermitInputEnvelope
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
  }

  export type ViolationUncheckedCreateNestedManyWithoutPermitInput = {
    create?: XOR<ViolationCreateWithoutPermitInput, ViolationUncheckedCreateWithoutPermitInput> | ViolationCreateWithoutPermitInput[] | ViolationUncheckedCreateWithoutPermitInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutPermitInput | ViolationCreateOrConnectWithoutPermitInput[]
    createMany?: ViolationCreateManyPermitInputEnvelope
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumViolationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ViolationStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ViolationUpdateManyWithoutPermitNestedInput = {
    create?: XOR<ViolationCreateWithoutPermitInput, ViolationUncheckedCreateWithoutPermitInput> | ViolationCreateWithoutPermitInput[] | ViolationUncheckedCreateWithoutPermitInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutPermitInput | ViolationCreateOrConnectWithoutPermitInput[]
    upsert?: ViolationUpsertWithWhereUniqueWithoutPermitInput | ViolationUpsertWithWhereUniqueWithoutPermitInput[]
    createMany?: ViolationCreateManyPermitInputEnvelope
    set?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    disconnect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    delete?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    update?: ViolationUpdateWithWhereUniqueWithoutPermitInput | ViolationUpdateWithWhereUniqueWithoutPermitInput[]
    updateMany?: ViolationUpdateManyWithWhereWithoutPermitInput | ViolationUpdateManyWithWhereWithoutPermitInput[]
    deleteMany?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
  }

  export type ViolationUncheckedUpdateManyWithoutPermitNestedInput = {
    create?: XOR<ViolationCreateWithoutPermitInput, ViolationUncheckedCreateWithoutPermitInput> | ViolationCreateWithoutPermitInput[] | ViolationUncheckedCreateWithoutPermitInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutPermitInput | ViolationCreateOrConnectWithoutPermitInput[]
    upsert?: ViolationUpsertWithWhereUniqueWithoutPermitInput | ViolationUpsertWithWhereUniqueWithoutPermitInput[]
    createMany?: ViolationCreateManyPermitInputEnvelope
    set?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    disconnect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    delete?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    update?: ViolationUpdateWithWhereUniqueWithoutPermitInput | ViolationUpdateWithWhereUniqueWithoutPermitInput[]
    updateMany?: ViolationUpdateManyWithWhereWithoutPermitInput | ViolationUpdateManyWithWhereWithoutPermitInput[]
    deleteMany?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
  }

  export type ViolationLetterCreateNestedOneWithoutViolationInput = {
    create?: XOR<ViolationLetterCreateWithoutViolationInput, ViolationLetterUncheckedCreateWithoutViolationInput>
    connectOrCreate?: ViolationLetterCreateOrConnectWithoutViolationInput
    connect?: ViolationLetterWhereUniqueInput
  }

  export type VisitorParkingRequestCreateNestedOneWithoutViolationsInput = {
    create?: XOR<VisitorParkingRequestCreateWithoutViolationsInput, VisitorParkingRequestUncheckedCreateWithoutViolationsInput>
    connectOrCreate?: VisitorParkingRequestCreateOrConnectWithoutViolationsInput
    connect?: VisitorParkingRequestWhereUniqueInput
  }

  export type ParkingInspectionCreateNestedManyWithoutViolationInput = {
    create?: XOR<ParkingInspectionCreateWithoutViolationInput, ParkingInspectionUncheckedCreateWithoutViolationInput> | ParkingInspectionCreateWithoutViolationInput[] | ParkingInspectionUncheckedCreateWithoutViolationInput[]
    connectOrCreate?: ParkingInspectionCreateOrConnectWithoutViolationInput | ParkingInspectionCreateOrConnectWithoutViolationInput[]
    createMany?: ParkingInspectionCreateManyViolationInputEnvelope
    connect?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
  }

  export type ViolationLetterUncheckedCreateNestedOneWithoutViolationInput = {
    create?: XOR<ViolationLetterCreateWithoutViolationInput, ViolationLetterUncheckedCreateWithoutViolationInput>
    connectOrCreate?: ViolationLetterCreateOrConnectWithoutViolationInput
    connect?: ViolationLetterWhereUniqueInput
  }

  export type ParkingInspectionUncheckedCreateNestedManyWithoutViolationInput = {
    create?: XOR<ParkingInspectionCreateWithoutViolationInput, ParkingInspectionUncheckedCreateWithoutViolationInput> | ParkingInspectionCreateWithoutViolationInput[] | ParkingInspectionUncheckedCreateWithoutViolationInput[]
    connectOrCreate?: ParkingInspectionCreateOrConnectWithoutViolationInput | ParkingInspectionCreateOrConnectWithoutViolationInput[]
    createMany?: ParkingInspectionCreateManyViolationInputEnvelope
    connect?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
  }

  export type ViolationLetterUpdateOneWithoutViolationNestedInput = {
    create?: XOR<ViolationLetterCreateWithoutViolationInput, ViolationLetterUncheckedCreateWithoutViolationInput>
    connectOrCreate?: ViolationLetterCreateOrConnectWithoutViolationInput
    upsert?: ViolationLetterUpsertWithoutViolationInput
    disconnect?: ViolationLetterWhereInput | boolean
    delete?: ViolationLetterWhereInput | boolean
    connect?: ViolationLetterWhereUniqueInput
    update?: XOR<XOR<ViolationLetterUpdateToOneWithWhereWithoutViolationInput, ViolationLetterUpdateWithoutViolationInput>, ViolationLetterUncheckedUpdateWithoutViolationInput>
  }

  export type VisitorParkingRequestUpdateOneWithoutViolationsNestedInput = {
    create?: XOR<VisitorParkingRequestCreateWithoutViolationsInput, VisitorParkingRequestUncheckedCreateWithoutViolationsInput>
    connectOrCreate?: VisitorParkingRequestCreateOrConnectWithoutViolationsInput
    upsert?: VisitorParkingRequestUpsertWithoutViolationsInput
    disconnect?: VisitorParkingRequestWhereInput | boolean
    delete?: VisitorParkingRequestWhereInput | boolean
    connect?: VisitorParkingRequestWhereUniqueInput
    update?: XOR<XOR<VisitorParkingRequestUpdateToOneWithWhereWithoutViolationsInput, VisitorParkingRequestUpdateWithoutViolationsInput>, VisitorParkingRequestUncheckedUpdateWithoutViolationsInput>
  }

  export type ParkingInspectionUpdateManyWithoutViolationNestedInput = {
    create?: XOR<ParkingInspectionCreateWithoutViolationInput, ParkingInspectionUncheckedCreateWithoutViolationInput> | ParkingInspectionCreateWithoutViolationInput[] | ParkingInspectionUncheckedCreateWithoutViolationInput[]
    connectOrCreate?: ParkingInspectionCreateOrConnectWithoutViolationInput | ParkingInspectionCreateOrConnectWithoutViolationInput[]
    upsert?: ParkingInspectionUpsertWithWhereUniqueWithoutViolationInput | ParkingInspectionUpsertWithWhereUniqueWithoutViolationInput[]
    createMany?: ParkingInspectionCreateManyViolationInputEnvelope
    set?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    disconnect?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    delete?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    connect?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    update?: ParkingInspectionUpdateWithWhereUniqueWithoutViolationInput | ParkingInspectionUpdateWithWhereUniqueWithoutViolationInput[]
    updateMany?: ParkingInspectionUpdateManyWithWhereWithoutViolationInput | ParkingInspectionUpdateManyWithWhereWithoutViolationInput[]
    deleteMany?: ParkingInspectionScalarWhereInput | ParkingInspectionScalarWhereInput[]
  }

  export type ViolationLetterUncheckedUpdateOneWithoutViolationNestedInput = {
    create?: XOR<ViolationLetterCreateWithoutViolationInput, ViolationLetterUncheckedCreateWithoutViolationInput>
    connectOrCreate?: ViolationLetterCreateOrConnectWithoutViolationInput
    upsert?: ViolationLetterUpsertWithoutViolationInput
    disconnect?: ViolationLetterWhereInput | boolean
    delete?: ViolationLetterWhereInput | boolean
    connect?: ViolationLetterWhereUniqueInput
    update?: XOR<XOR<ViolationLetterUpdateToOneWithWhereWithoutViolationInput, ViolationLetterUpdateWithoutViolationInput>, ViolationLetterUncheckedUpdateWithoutViolationInput>
  }

  export type ParkingInspectionUncheckedUpdateManyWithoutViolationNestedInput = {
    create?: XOR<ParkingInspectionCreateWithoutViolationInput, ParkingInspectionUncheckedCreateWithoutViolationInput> | ParkingInspectionCreateWithoutViolationInput[] | ParkingInspectionUncheckedCreateWithoutViolationInput[]
    connectOrCreate?: ParkingInspectionCreateOrConnectWithoutViolationInput | ParkingInspectionCreateOrConnectWithoutViolationInput[]
    upsert?: ParkingInspectionUpsertWithWhereUniqueWithoutViolationInput | ParkingInspectionUpsertWithWhereUniqueWithoutViolationInput[]
    createMany?: ParkingInspectionCreateManyViolationInputEnvelope
    set?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    disconnect?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    delete?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    connect?: ParkingInspectionWhereUniqueInput | ParkingInspectionWhereUniqueInput[]
    update?: ParkingInspectionUpdateWithWhereUniqueWithoutViolationInput | ParkingInspectionUpdateWithWhereUniqueWithoutViolationInput[]
    updateMany?: ParkingInspectionUpdateManyWithWhereWithoutViolationInput | ParkingInspectionUpdateManyWithWhereWithoutViolationInput[]
    deleteMany?: ParkingInspectionScalarWhereInput | ParkingInspectionScalarWhereInput[]
  }

  export type ViolationCreateNestedOneWithoutLetterInput = {
    create?: XOR<ViolationCreateWithoutLetterInput, ViolationUncheckedCreateWithoutLetterInput>
    connectOrCreate?: ViolationCreateOrConnectWithoutLetterInput
    connect?: ViolationWhereUniqueInput
  }

  export type ViolationUpdateOneRequiredWithoutLetterNestedInput = {
    create?: XOR<ViolationCreateWithoutLetterInput, ViolationUncheckedCreateWithoutLetterInput>
    connectOrCreate?: ViolationCreateOrConnectWithoutLetterInput
    upsert?: ViolationUpsertWithoutLetterInput
    connect?: ViolationWhereUniqueInput
    update?: XOR<XOR<ViolationUpdateToOneWithWhereWithoutLetterInput, ViolationUpdateWithoutLetterInput>, ViolationUncheckedUpdateWithoutLetterInput>
  }

  export type ViolationCreateNestedOneWithoutInspectionsInput = {
    create?: XOR<ViolationCreateWithoutInspectionsInput, ViolationUncheckedCreateWithoutInspectionsInput>
    connectOrCreate?: ViolationCreateOrConnectWithoutInspectionsInput
    connect?: ViolationWhereUniqueInput
  }

  export type ViolationUpdateOneWithoutInspectionsNestedInput = {
    create?: XOR<ViolationCreateWithoutInspectionsInput, ViolationUncheckedCreateWithoutInspectionsInput>
    connectOrCreate?: ViolationCreateOrConnectWithoutInspectionsInput
    upsert?: ViolationUpsertWithoutInspectionsInput
    disconnect?: ViolationWhereInput | boolean
    delete?: ViolationWhereInput | boolean
    connect?: ViolationWhereUniqueInput
    update?: XOR<XOR<ViolationUpdateToOneWithWhereWithoutInspectionsInput, ViolationUpdateWithoutInspectionsInput>, ViolationUncheckedUpdateWithoutInspectionsInput>
  }

  export type EnumElevatorBookingReasonFieldUpdateOperationsInput = {
    set?: $Enums.ElevatorBookingReason
  }

  export type EnumStorageStatusFieldUpdateOperationsInput = {
    set?: $Enums.StorageStatus
  }

  export type UserCreateNestedOneWithoutPatrolLogsInput = {
    create?: XOR<UserCreateWithoutPatrolLogsInput, UserUncheckedCreateWithoutPatrolLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatrolLogsInput
    connect?: UserWhereUniqueInput
  }

  export type PatrolLogImageCreateNestedManyWithoutPatrolLogInput = {
    create?: XOR<PatrolLogImageCreateWithoutPatrolLogInput, PatrolLogImageUncheckedCreateWithoutPatrolLogInput> | PatrolLogImageCreateWithoutPatrolLogInput[] | PatrolLogImageUncheckedCreateWithoutPatrolLogInput[]
    connectOrCreate?: PatrolLogImageCreateOrConnectWithoutPatrolLogInput | PatrolLogImageCreateOrConnectWithoutPatrolLogInput[]
    createMany?: PatrolLogImageCreateManyPatrolLogInputEnvelope
    connect?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
  }

  export type PatrolLogImageUncheckedCreateNestedManyWithoutPatrolLogInput = {
    create?: XOR<PatrolLogImageCreateWithoutPatrolLogInput, PatrolLogImageUncheckedCreateWithoutPatrolLogInput> | PatrolLogImageCreateWithoutPatrolLogInput[] | PatrolLogImageUncheckedCreateWithoutPatrolLogInput[]
    connectOrCreate?: PatrolLogImageCreateOrConnectWithoutPatrolLogInput | PatrolLogImageCreateOrConnectWithoutPatrolLogInput[]
    createMany?: PatrolLogImageCreateManyPatrolLogInputEnvelope
    connect?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPatrolLogsNestedInput = {
    create?: XOR<UserCreateWithoutPatrolLogsInput, UserUncheckedCreateWithoutPatrolLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatrolLogsInput
    upsert?: UserUpsertWithoutPatrolLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatrolLogsInput, UserUpdateWithoutPatrolLogsInput>, UserUncheckedUpdateWithoutPatrolLogsInput>
  }

  export type PatrolLogImageUpdateManyWithoutPatrolLogNestedInput = {
    create?: XOR<PatrolLogImageCreateWithoutPatrolLogInput, PatrolLogImageUncheckedCreateWithoutPatrolLogInput> | PatrolLogImageCreateWithoutPatrolLogInput[] | PatrolLogImageUncheckedCreateWithoutPatrolLogInput[]
    connectOrCreate?: PatrolLogImageCreateOrConnectWithoutPatrolLogInput | PatrolLogImageCreateOrConnectWithoutPatrolLogInput[]
    upsert?: PatrolLogImageUpsertWithWhereUniqueWithoutPatrolLogInput | PatrolLogImageUpsertWithWhereUniqueWithoutPatrolLogInput[]
    createMany?: PatrolLogImageCreateManyPatrolLogInputEnvelope
    set?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    disconnect?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    delete?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    connect?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    update?: PatrolLogImageUpdateWithWhereUniqueWithoutPatrolLogInput | PatrolLogImageUpdateWithWhereUniqueWithoutPatrolLogInput[]
    updateMany?: PatrolLogImageUpdateManyWithWhereWithoutPatrolLogInput | PatrolLogImageUpdateManyWithWhereWithoutPatrolLogInput[]
    deleteMany?: PatrolLogImageScalarWhereInput | PatrolLogImageScalarWhereInput[]
  }

  export type PatrolLogImageUncheckedUpdateManyWithoutPatrolLogNestedInput = {
    create?: XOR<PatrolLogImageCreateWithoutPatrolLogInput, PatrolLogImageUncheckedCreateWithoutPatrolLogInput> | PatrolLogImageCreateWithoutPatrolLogInput[] | PatrolLogImageUncheckedCreateWithoutPatrolLogInput[]
    connectOrCreate?: PatrolLogImageCreateOrConnectWithoutPatrolLogInput | PatrolLogImageCreateOrConnectWithoutPatrolLogInput[]
    upsert?: PatrolLogImageUpsertWithWhereUniqueWithoutPatrolLogInput | PatrolLogImageUpsertWithWhereUniqueWithoutPatrolLogInput[]
    createMany?: PatrolLogImageCreateManyPatrolLogInputEnvelope
    set?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    disconnect?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    delete?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    connect?: PatrolLogImageWhereUniqueInput | PatrolLogImageWhereUniqueInput[]
    update?: PatrolLogImageUpdateWithWhereUniqueWithoutPatrolLogInput | PatrolLogImageUpdateWithWhereUniqueWithoutPatrolLogInput[]
    updateMany?: PatrolLogImageUpdateManyWithWhereWithoutPatrolLogInput | PatrolLogImageUpdateManyWithWhereWithoutPatrolLogInput[]
    deleteMany?: PatrolLogImageScalarWhereInput | PatrolLogImageScalarWhereInput[]
  }

  export type PatrolLogCreateNestedOneWithoutImagesInput = {
    create?: XOR<PatrolLogCreateWithoutImagesInput, PatrolLogUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PatrolLogCreateOrConnectWithoutImagesInput
    connect?: PatrolLogWhereUniqueInput
  }

  export type PatrolLogUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<PatrolLogCreateWithoutImagesInput, PatrolLogUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PatrolLogCreateOrConnectWithoutImagesInput
    upsert?: PatrolLogUpsertWithoutImagesInput
    connect?: PatrolLogWhereUniqueInput
    update?: XOR<XOR<PatrolLogUpdateToOneWithWhereWithoutImagesInput, PatrolLogUpdateWithoutImagesInput>, PatrolLogUncheckedUpdateWithoutImagesInput>
  }

  export type RenovationWorkFileCreateNestedManyWithoutRenovationWorkInput = {
    create?: XOR<RenovationWorkFileCreateWithoutRenovationWorkInput, RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput> | RenovationWorkFileCreateWithoutRenovationWorkInput[] | RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput[]
    connectOrCreate?: RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput | RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput[]
    createMany?: RenovationWorkFileCreateManyRenovationWorkInputEnvelope
    connect?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
  }

  export type RenovationWorkFileUncheckedCreateNestedManyWithoutRenovationWorkInput = {
    create?: XOR<RenovationWorkFileCreateWithoutRenovationWorkInput, RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput> | RenovationWorkFileCreateWithoutRenovationWorkInput[] | RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput[]
    connectOrCreate?: RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput | RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput[]
    createMany?: RenovationWorkFileCreateManyRenovationWorkInputEnvelope
    connect?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
  }

  export type RenovationWorkFileUpdateManyWithoutRenovationWorkNestedInput = {
    create?: XOR<RenovationWorkFileCreateWithoutRenovationWorkInput, RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput> | RenovationWorkFileCreateWithoutRenovationWorkInput[] | RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput[]
    connectOrCreate?: RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput | RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput[]
    upsert?: RenovationWorkFileUpsertWithWhereUniqueWithoutRenovationWorkInput | RenovationWorkFileUpsertWithWhereUniqueWithoutRenovationWorkInput[]
    createMany?: RenovationWorkFileCreateManyRenovationWorkInputEnvelope
    set?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    disconnect?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    delete?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    connect?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    update?: RenovationWorkFileUpdateWithWhereUniqueWithoutRenovationWorkInput | RenovationWorkFileUpdateWithWhereUniqueWithoutRenovationWorkInput[]
    updateMany?: RenovationWorkFileUpdateManyWithWhereWithoutRenovationWorkInput | RenovationWorkFileUpdateManyWithWhereWithoutRenovationWorkInput[]
    deleteMany?: RenovationWorkFileScalarWhereInput | RenovationWorkFileScalarWhereInput[]
  }

  export type RenovationWorkFileUncheckedUpdateManyWithoutRenovationWorkNestedInput = {
    create?: XOR<RenovationWorkFileCreateWithoutRenovationWorkInput, RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput> | RenovationWorkFileCreateWithoutRenovationWorkInput[] | RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput[]
    connectOrCreate?: RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput | RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput[]
    upsert?: RenovationWorkFileUpsertWithWhereUniqueWithoutRenovationWorkInput | RenovationWorkFileUpsertWithWhereUniqueWithoutRenovationWorkInput[]
    createMany?: RenovationWorkFileCreateManyRenovationWorkInputEnvelope
    set?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    disconnect?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    delete?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    connect?: RenovationWorkFileWhereUniqueInput | RenovationWorkFileWhereUniqueInput[]
    update?: RenovationWorkFileUpdateWithWhereUniqueWithoutRenovationWorkInput | RenovationWorkFileUpdateWithWhereUniqueWithoutRenovationWorkInput[]
    updateMany?: RenovationWorkFileUpdateManyWithWhereWithoutRenovationWorkInput | RenovationWorkFileUpdateManyWithWhereWithoutRenovationWorkInput[]
    deleteMany?: RenovationWorkFileScalarWhereInput | RenovationWorkFileScalarWhereInput[]
  }

  export type RenovationWorkCreateNestedOneWithoutFilesInput = {
    create?: XOR<RenovationWorkCreateWithoutFilesInput, RenovationWorkUncheckedCreateWithoutFilesInput>
    connectOrCreate?: RenovationWorkCreateOrConnectWithoutFilesInput
    connect?: RenovationWorkWhereUniqueInput
  }

  export type RenovationWorkUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<RenovationWorkCreateWithoutFilesInput, RenovationWorkUncheckedCreateWithoutFilesInput>
    connectOrCreate?: RenovationWorkCreateOrConnectWithoutFilesInput
    upsert?: RenovationWorkUpsertWithoutFilesInput
    connect?: RenovationWorkWhereUniqueInput
    update?: XOR<XOR<RenovationWorkUpdateToOneWithWhereWithoutFilesInput, RenovationWorkUpdateWithoutFilesInput>, RenovationWorkUncheckedUpdateWithoutFilesInput>
  }

  export type EnumResidentTypeFieldUpdateOperationsInput = {
    set?: $Enums.ResidentType
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumViolationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ViolationStatus | EnumViolationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumViolationStatusFilter<$PrismaModel> | $Enums.ViolationStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumViolationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ViolationStatus | EnumViolationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ViolationStatus[] | ListEnumViolationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumViolationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ViolationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumViolationStatusFilter<$PrismaModel>
    _max?: NestedEnumViolationStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumElevatorBookingReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.ElevatorBookingReason | EnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumElevatorBookingReasonFilter<$PrismaModel> | $Enums.ElevatorBookingReason
  }

  export type NestedEnumElevatorBookingReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ElevatorBookingReason | EnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElevatorBookingReason[] | ListEnumElevatorBookingReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumElevatorBookingReasonWithAggregatesFilter<$PrismaModel> | $Enums.ElevatorBookingReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumElevatorBookingReasonFilter<$PrismaModel>
    _max?: NestedEnumElevatorBookingReasonFilter<$PrismaModel>
  }

  export type NestedEnumStorageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageStatus | EnumStorageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageStatusFilter<$PrismaModel> | $Enums.StorageStatus
  }

  export type NestedEnumStorageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageStatus | EnumStorageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StorageStatus[] | ListEnumStorageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStorageStatusWithAggregatesFilter<$PrismaModel> | $Enums.StorageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorageStatusFilter<$PrismaModel>
    _max?: NestedEnumStorageStatusFilter<$PrismaModel>
  }

  export type NestedEnumResidentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResidentType | EnumResidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResidentTypeFilter<$PrismaModel> | $Enums.ResidentType
  }

  export type NestedEnumResidentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResidentType | EnumResidentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResidentType[] | ListEnumResidentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResidentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResidentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResidentTypeFilter<$PrismaModel>
    _max?: NestedEnumResidentTypeFilter<$PrismaModel>
  }

  export type PatrolLogCreateWithoutReporterInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PatrolLogImageCreateNestedManyWithoutPatrolLogInput
  }

  export type PatrolLogUncheckedCreateWithoutReporterInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PatrolLogImageUncheckedCreateNestedManyWithoutPatrolLogInput
  }

  export type PatrolLogCreateOrConnectWithoutReporterInput = {
    where: PatrolLogWhereUniqueInput
    create: XOR<PatrolLogCreateWithoutReporterInput, PatrolLogUncheckedCreateWithoutReporterInput>
  }

  export type PatrolLogCreateManyReporterInputEnvelope = {
    data: PatrolLogCreateManyReporterInput | PatrolLogCreateManyReporterInput[]
    skipDuplicates?: boolean
  }

  export type PatrolLogUpsertWithWhereUniqueWithoutReporterInput = {
    where: PatrolLogWhereUniqueInput
    update: XOR<PatrolLogUpdateWithoutReporterInput, PatrolLogUncheckedUpdateWithoutReporterInput>
    create: XOR<PatrolLogCreateWithoutReporterInput, PatrolLogUncheckedCreateWithoutReporterInput>
  }

  export type PatrolLogUpdateWithWhereUniqueWithoutReporterInput = {
    where: PatrolLogWhereUniqueInput
    data: XOR<PatrolLogUpdateWithoutReporterInput, PatrolLogUncheckedUpdateWithoutReporterInput>
  }

  export type PatrolLogUpdateManyWithWhereWithoutReporterInput = {
    where: PatrolLogScalarWhereInput
    data: XOR<PatrolLogUpdateManyMutationInput, PatrolLogUncheckedUpdateManyWithoutReporterInput>
  }

  export type PatrolLogScalarWhereInput = {
    AND?: PatrolLogScalarWhereInput | PatrolLogScalarWhereInput[]
    OR?: PatrolLogScalarWhereInput[]
    NOT?: PatrolLogScalarWhereInput | PatrolLogScalarWhereInput[]
    id?: StringFilter<"PatrolLog"> | string
    reportedAt?: DateTimeFilter<"PatrolLog"> | Date | string
    notes?: StringFilter<"PatrolLog"> | string
    isNothingToReport?: BoolFilter<"PatrolLog"> | boolean
    reporterId?: StringFilter<"PatrolLog"> | string
    createdAt?: DateTimeFilter<"PatrolLog"> | Date | string
    updatedAt?: DateTimeFilter<"PatrolLog"> | Date | string
  }

  export type ViolationCreateWithoutPermitInput = {
    id?: string
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    letter?: ViolationLetterCreateNestedOneWithoutViolationInput
    inspections?: ParkingInspectionCreateNestedManyWithoutViolationInput
  }

  export type ViolationUncheckedCreateWithoutPermitInput = {
    id?: string
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    letter?: ViolationLetterUncheckedCreateNestedOneWithoutViolationInput
    inspections?: ParkingInspectionUncheckedCreateNestedManyWithoutViolationInput
  }

  export type ViolationCreateOrConnectWithoutPermitInput = {
    where: ViolationWhereUniqueInput
    create: XOR<ViolationCreateWithoutPermitInput, ViolationUncheckedCreateWithoutPermitInput>
  }

  export type ViolationCreateManyPermitInputEnvelope = {
    data: ViolationCreateManyPermitInput | ViolationCreateManyPermitInput[]
    skipDuplicates?: boolean
  }

  export type ViolationUpsertWithWhereUniqueWithoutPermitInput = {
    where: ViolationWhereUniqueInput
    update: XOR<ViolationUpdateWithoutPermitInput, ViolationUncheckedUpdateWithoutPermitInput>
    create: XOR<ViolationCreateWithoutPermitInput, ViolationUncheckedCreateWithoutPermitInput>
  }

  export type ViolationUpdateWithWhereUniqueWithoutPermitInput = {
    where: ViolationWhereUniqueInput
    data: XOR<ViolationUpdateWithoutPermitInput, ViolationUncheckedUpdateWithoutPermitInput>
  }

  export type ViolationUpdateManyWithWhereWithoutPermitInput = {
    where: ViolationScalarWhereInput
    data: XOR<ViolationUpdateManyMutationInput, ViolationUncheckedUpdateManyWithoutPermitInput>
  }

  export type ViolationScalarWhereInput = {
    AND?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
    OR?: ViolationScalarWhereInput[]
    NOT?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
    id?: StringFilter<"Violation"> | string
    permitId?: StringNullableFilter<"Violation"> | string | null
    plateNumber?: StringFilter<"Violation"> | string
    vehicleMake?: StringFilter<"Violation"> | string
    vehicleColor?: StringNullableFilter<"Violation"> | string | null
    stallNumber?: StringNullableFilter<"Violation"> | string | null
    photoUrl?: StringNullableFilter<"Violation"> | string | null
    violationType?: StringFilter<"Violation"> | string
    notes?: StringNullableFilter<"Violation"> | string | null
    issuedAt?: DateTimeFilter<"Violation"> | Date | string
    noticeIssued?: BoolFilter<"Violation"> | boolean
  }

  export type ViolationLetterCreateWithoutViolationInput = {
    id?: string
    pdfUrl: string
    createdAt?: Date | string
  }

  export type ViolationLetterUncheckedCreateWithoutViolationInput = {
    id?: string
    pdfUrl: string
    createdAt?: Date | string
  }

  export type ViolationLetterCreateOrConnectWithoutViolationInput = {
    where: ViolationLetterWhereUniqueInput
    create: XOR<ViolationLetterCreateWithoutViolationInput, ViolationLetterUncheckedCreateWithoutViolationInput>
  }

  export type VisitorParkingRequestCreateWithoutViolationsInput = {
    id?: string
    vehicleMake: string
    plateNumber: string
    unit: string
    durationInHours: number
    createdAt?: Date | string
    expiresAt: Date | string
    violationStatus?: $Enums.ViolationStatus
    isExpired?: boolean
  }

  export type VisitorParkingRequestUncheckedCreateWithoutViolationsInput = {
    id?: string
    vehicleMake: string
    plateNumber: string
    unit: string
    durationInHours: number
    createdAt?: Date | string
    expiresAt: Date | string
    violationStatus?: $Enums.ViolationStatus
    isExpired?: boolean
  }

  export type VisitorParkingRequestCreateOrConnectWithoutViolationsInput = {
    where: VisitorParkingRequestWhereUniqueInput
    create: XOR<VisitorParkingRequestCreateWithoutViolationsInput, VisitorParkingRequestUncheckedCreateWithoutViolationsInput>
  }

  export type ParkingInspectionCreateWithoutViolationInput = {
    id?: string
    inspectorId: string
    inspectedAt?: Date | string
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl?: string | null
    notes?: string | null
  }

  export type ParkingInspectionUncheckedCreateWithoutViolationInput = {
    id?: string
    inspectorId: string
    inspectedAt?: Date | string
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl?: string | null
    notes?: string | null
  }

  export type ParkingInspectionCreateOrConnectWithoutViolationInput = {
    where: ParkingInspectionWhereUniqueInput
    create: XOR<ParkingInspectionCreateWithoutViolationInput, ParkingInspectionUncheckedCreateWithoutViolationInput>
  }

  export type ParkingInspectionCreateManyViolationInputEnvelope = {
    data: ParkingInspectionCreateManyViolationInput | ParkingInspectionCreateManyViolationInput[]
    skipDuplicates?: boolean
  }

  export type ViolationLetterUpsertWithoutViolationInput = {
    update: XOR<ViolationLetterUpdateWithoutViolationInput, ViolationLetterUncheckedUpdateWithoutViolationInput>
    create: XOR<ViolationLetterCreateWithoutViolationInput, ViolationLetterUncheckedCreateWithoutViolationInput>
    where?: ViolationLetterWhereInput
  }

  export type ViolationLetterUpdateToOneWithWhereWithoutViolationInput = {
    where?: ViolationLetterWhereInput
    data: XOR<ViolationLetterUpdateWithoutViolationInput, ViolationLetterUncheckedUpdateWithoutViolationInput>
  }

  export type ViolationLetterUpdateWithoutViolationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViolationLetterUncheckedUpdateWithoutViolationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitorParkingRequestUpsertWithoutViolationsInput = {
    update: XOR<VisitorParkingRequestUpdateWithoutViolationsInput, VisitorParkingRequestUncheckedUpdateWithoutViolationsInput>
    create: XOR<VisitorParkingRequestCreateWithoutViolationsInput, VisitorParkingRequestUncheckedCreateWithoutViolationsInput>
    where?: VisitorParkingRequestWhereInput
  }

  export type VisitorParkingRequestUpdateToOneWithWhereWithoutViolationsInput = {
    where?: VisitorParkingRequestWhereInput
    data: XOR<VisitorParkingRequestUpdateWithoutViolationsInput, VisitorParkingRequestUncheckedUpdateWithoutViolationsInput>
  }

  export type VisitorParkingRequestUpdateWithoutViolationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    durationInHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violationStatus?: EnumViolationStatusFieldUpdateOperationsInput | $Enums.ViolationStatus
    isExpired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VisitorParkingRequestUncheckedUpdateWithoutViolationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    durationInHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violationStatus?: EnumViolationStatusFieldUpdateOperationsInput | $Enums.ViolationStatus
    isExpired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParkingInspectionUpsertWithWhereUniqueWithoutViolationInput = {
    where: ParkingInspectionWhereUniqueInput
    update: XOR<ParkingInspectionUpdateWithoutViolationInput, ParkingInspectionUncheckedUpdateWithoutViolationInput>
    create: XOR<ParkingInspectionCreateWithoutViolationInput, ParkingInspectionUncheckedCreateWithoutViolationInput>
  }

  export type ParkingInspectionUpdateWithWhereUniqueWithoutViolationInput = {
    where: ParkingInspectionWhereUniqueInput
    data: XOR<ParkingInspectionUpdateWithoutViolationInput, ParkingInspectionUncheckedUpdateWithoutViolationInput>
  }

  export type ParkingInspectionUpdateManyWithWhereWithoutViolationInput = {
    where: ParkingInspectionScalarWhereInput
    data: XOR<ParkingInspectionUpdateManyMutationInput, ParkingInspectionUncheckedUpdateManyWithoutViolationInput>
  }

  export type ParkingInspectionScalarWhereInput = {
    AND?: ParkingInspectionScalarWhereInput | ParkingInspectionScalarWhereInput[]
    OR?: ParkingInspectionScalarWhereInput[]
    NOT?: ParkingInspectionScalarWhereInput | ParkingInspectionScalarWhereInput[]
    id?: StringFilter<"ParkingInspection"> | string
    inspectorId?: StringFilter<"ParkingInspection"> | string
    inspectedAt?: DateTimeFilter<"ParkingInspection"> | Date | string
    plateNumber?: StringFilter<"ParkingInspection"> | string
    vehicleMake?: StringFilter<"ParkingInspection"> | string
    vehicleColor?: StringFilter<"ParkingInspection"> | string
    stallNumber?: StringFilter<"ParkingInspection"> | string
    photoUrl?: StringNullableFilter<"ParkingInspection"> | string | null
    notes?: StringNullableFilter<"ParkingInspection"> | string | null
    violationId?: StringNullableFilter<"ParkingInspection"> | string | null
  }

  export type ViolationCreateWithoutLetterInput = {
    id?: string
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    permit?: VisitorParkingRequestCreateNestedOneWithoutViolationsInput
    inspections?: ParkingInspectionCreateNestedManyWithoutViolationInput
  }

  export type ViolationUncheckedCreateWithoutLetterInput = {
    id?: string
    permitId?: string | null
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    inspections?: ParkingInspectionUncheckedCreateNestedManyWithoutViolationInput
  }

  export type ViolationCreateOrConnectWithoutLetterInput = {
    where: ViolationWhereUniqueInput
    create: XOR<ViolationCreateWithoutLetterInput, ViolationUncheckedCreateWithoutLetterInput>
  }

  export type ViolationUpsertWithoutLetterInput = {
    update: XOR<ViolationUpdateWithoutLetterInput, ViolationUncheckedUpdateWithoutLetterInput>
    create: XOR<ViolationCreateWithoutLetterInput, ViolationUncheckedCreateWithoutLetterInput>
    where?: ViolationWhereInput
  }

  export type ViolationUpdateToOneWithWhereWithoutLetterInput = {
    where?: ViolationWhereInput
    data: XOR<ViolationUpdateWithoutLetterInput, ViolationUncheckedUpdateWithoutLetterInput>
  }

  export type ViolationUpdateWithoutLetterInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    permit?: VisitorParkingRequestUpdateOneWithoutViolationsNestedInput
    inspections?: ParkingInspectionUpdateManyWithoutViolationNestedInput
  }

  export type ViolationUncheckedUpdateWithoutLetterInput = {
    id?: StringFieldUpdateOperationsInput | string
    permitId?: NullableStringFieldUpdateOperationsInput | string | null
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    inspections?: ParkingInspectionUncheckedUpdateManyWithoutViolationNestedInput
  }

  export type ViolationCreateWithoutInspectionsInput = {
    id?: string
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    letter?: ViolationLetterCreateNestedOneWithoutViolationInput
    permit?: VisitorParkingRequestCreateNestedOneWithoutViolationsInput
  }

  export type ViolationUncheckedCreateWithoutInspectionsInput = {
    id?: string
    permitId?: string | null
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
    letter?: ViolationLetterUncheckedCreateNestedOneWithoutViolationInput
  }

  export type ViolationCreateOrConnectWithoutInspectionsInput = {
    where: ViolationWhereUniqueInput
    create: XOR<ViolationCreateWithoutInspectionsInput, ViolationUncheckedCreateWithoutInspectionsInput>
  }

  export type ViolationUpsertWithoutInspectionsInput = {
    update: XOR<ViolationUpdateWithoutInspectionsInput, ViolationUncheckedUpdateWithoutInspectionsInput>
    create: XOR<ViolationCreateWithoutInspectionsInput, ViolationUncheckedCreateWithoutInspectionsInput>
    where?: ViolationWhereInput
  }

  export type ViolationUpdateToOneWithWhereWithoutInspectionsInput = {
    where?: ViolationWhereInput
    data: XOR<ViolationUpdateWithoutInspectionsInput, ViolationUncheckedUpdateWithoutInspectionsInput>
  }

  export type ViolationUpdateWithoutInspectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    letter?: ViolationLetterUpdateOneWithoutViolationNestedInput
    permit?: VisitorParkingRequestUpdateOneWithoutViolationsNestedInput
  }

  export type ViolationUncheckedUpdateWithoutInspectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    permitId?: NullableStringFieldUpdateOperationsInput | string | null
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    letter?: ViolationLetterUncheckedUpdateOneWithoutViolationNestedInput
  }

  export type UserCreateWithoutPatrolLogsInput = {
    id?: string
    email: string
    password: string
    firstName?: string
    lastName?: string
    unit?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutPatrolLogsInput = {
    id?: string
    email: string
    password: string
    firstName?: string
    lastName?: string
    unit?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutPatrolLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatrolLogsInput, UserUncheckedCreateWithoutPatrolLogsInput>
  }

  export type PatrolLogImageCreateWithoutPatrolLogInput = {
    id?: string
    url: string
    createdAt?: Date | string
  }

  export type PatrolLogImageUncheckedCreateWithoutPatrolLogInput = {
    id?: string
    url: string
    createdAt?: Date | string
  }

  export type PatrolLogImageCreateOrConnectWithoutPatrolLogInput = {
    where: PatrolLogImageWhereUniqueInput
    create: XOR<PatrolLogImageCreateWithoutPatrolLogInput, PatrolLogImageUncheckedCreateWithoutPatrolLogInput>
  }

  export type PatrolLogImageCreateManyPatrolLogInputEnvelope = {
    data: PatrolLogImageCreateManyPatrolLogInput | PatrolLogImageCreateManyPatrolLogInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatrolLogsInput = {
    update: XOR<UserUpdateWithoutPatrolLogsInput, UserUncheckedUpdateWithoutPatrolLogsInput>
    create: XOR<UserCreateWithoutPatrolLogsInput, UserUncheckedCreateWithoutPatrolLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatrolLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatrolLogsInput, UserUncheckedUpdateWithoutPatrolLogsInput>
  }

  export type UserUpdateWithoutPatrolLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutPatrolLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogImageUpsertWithWhereUniqueWithoutPatrolLogInput = {
    where: PatrolLogImageWhereUniqueInput
    update: XOR<PatrolLogImageUpdateWithoutPatrolLogInput, PatrolLogImageUncheckedUpdateWithoutPatrolLogInput>
    create: XOR<PatrolLogImageCreateWithoutPatrolLogInput, PatrolLogImageUncheckedCreateWithoutPatrolLogInput>
  }

  export type PatrolLogImageUpdateWithWhereUniqueWithoutPatrolLogInput = {
    where: PatrolLogImageWhereUniqueInput
    data: XOR<PatrolLogImageUpdateWithoutPatrolLogInput, PatrolLogImageUncheckedUpdateWithoutPatrolLogInput>
  }

  export type PatrolLogImageUpdateManyWithWhereWithoutPatrolLogInput = {
    where: PatrolLogImageScalarWhereInput
    data: XOR<PatrolLogImageUpdateManyMutationInput, PatrolLogImageUncheckedUpdateManyWithoutPatrolLogInput>
  }

  export type PatrolLogImageScalarWhereInput = {
    AND?: PatrolLogImageScalarWhereInput | PatrolLogImageScalarWhereInput[]
    OR?: PatrolLogImageScalarWhereInput[]
    NOT?: PatrolLogImageScalarWhereInput | PatrolLogImageScalarWhereInput[]
    id?: StringFilter<"PatrolLogImage"> | string
    url?: StringFilter<"PatrolLogImage"> | string
    patrolLogId?: StringFilter<"PatrolLogImage"> | string
    createdAt?: DateTimeFilter<"PatrolLogImage"> | Date | string
  }

  export type PatrolLogCreateWithoutImagesInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutPatrolLogsInput
  }

  export type PatrolLogUncheckedCreateWithoutImagesInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    reporterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatrolLogCreateOrConnectWithoutImagesInput = {
    where: PatrolLogWhereUniqueInput
    create: XOR<PatrolLogCreateWithoutImagesInput, PatrolLogUncheckedCreateWithoutImagesInput>
  }

  export type PatrolLogUpsertWithoutImagesInput = {
    update: XOR<PatrolLogUpdateWithoutImagesInput, PatrolLogUncheckedUpdateWithoutImagesInput>
    create: XOR<PatrolLogCreateWithoutImagesInput, PatrolLogUncheckedCreateWithoutImagesInput>
    where?: PatrolLogWhereInput
  }

  export type PatrolLogUpdateToOneWithWhereWithoutImagesInput = {
    where?: PatrolLogWhereInput
    data: XOR<PatrolLogUpdateWithoutImagesInput, PatrolLogUncheckedUpdateWithoutImagesInput>
  }

  export type PatrolLogUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutPatrolLogsNestedInput
  }

  export type PatrolLogUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    reporterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileCreateWithoutRenovationWorkInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
  }

  export type RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
  }

  export type RenovationWorkFileCreateOrConnectWithoutRenovationWorkInput = {
    where: RenovationWorkFileWhereUniqueInput
    create: XOR<RenovationWorkFileCreateWithoutRenovationWorkInput, RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput>
  }

  export type RenovationWorkFileCreateManyRenovationWorkInputEnvelope = {
    data: RenovationWorkFileCreateManyRenovationWorkInput | RenovationWorkFileCreateManyRenovationWorkInput[]
    skipDuplicates?: boolean
  }

  export type RenovationWorkFileUpsertWithWhereUniqueWithoutRenovationWorkInput = {
    where: RenovationWorkFileWhereUniqueInput
    update: XOR<RenovationWorkFileUpdateWithoutRenovationWorkInput, RenovationWorkFileUncheckedUpdateWithoutRenovationWorkInput>
    create: XOR<RenovationWorkFileCreateWithoutRenovationWorkInput, RenovationWorkFileUncheckedCreateWithoutRenovationWorkInput>
  }

  export type RenovationWorkFileUpdateWithWhereUniqueWithoutRenovationWorkInput = {
    where: RenovationWorkFileWhereUniqueInput
    data: XOR<RenovationWorkFileUpdateWithoutRenovationWorkInput, RenovationWorkFileUncheckedUpdateWithoutRenovationWorkInput>
  }

  export type RenovationWorkFileUpdateManyWithWhereWithoutRenovationWorkInput = {
    where: RenovationWorkFileScalarWhereInput
    data: XOR<RenovationWorkFileUpdateManyMutationInput, RenovationWorkFileUncheckedUpdateManyWithoutRenovationWorkInput>
  }

  export type RenovationWorkFileScalarWhereInput = {
    AND?: RenovationWorkFileScalarWhereInput | RenovationWorkFileScalarWhereInput[]
    OR?: RenovationWorkFileScalarWhereInput[]
    NOT?: RenovationWorkFileScalarWhereInput | RenovationWorkFileScalarWhereInput[]
    id?: StringFilter<"RenovationWorkFile"> | string
    renovationWorkId?: StringFilter<"RenovationWorkFile"> | string
    fileName?: StringFilter<"RenovationWorkFile"> | string
    fileUrl?: StringFilter<"RenovationWorkFile"> | string
    fileType?: StringFilter<"RenovationWorkFile"> | string
    createdAt?: DateTimeFilter<"RenovationWorkFile"> | Date | string
  }

  export type RenovationWorkCreateWithoutFilesInput = {
    id?: string
    unitNumber: string
    startDate: Date | string
    endDate: Date | string
    damageDepositCheckNumber?: string | null
    isExempted?: boolean
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RenovationWorkUncheckedCreateWithoutFilesInput = {
    id?: string
    unitNumber: string
    startDate: Date | string
    endDate: Date | string
    damageDepositCheckNumber?: string | null
    isExempted?: boolean
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RenovationWorkCreateOrConnectWithoutFilesInput = {
    where: RenovationWorkWhereUniqueInput
    create: XOR<RenovationWorkCreateWithoutFilesInput, RenovationWorkUncheckedCreateWithoutFilesInput>
  }

  export type RenovationWorkUpsertWithoutFilesInput = {
    update: XOR<RenovationWorkUpdateWithoutFilesInput, RenovationWorkUncheckedUpdateWithoutFilesInput>
    create: XOR<RenovationWorkCreateWithoutFilesInput, RenovationWorkUncheckedCreateWithoutFilesInput>
    where?: RenovationWorkWhereInput
  }

  export type RenovationWorkUpdateToOneWithWhereWithoutFilesInput = {
    where?: RenovationWorkWhereInput
    data: XOR<RenovationWorkUpdateWithoutFilesInput, RenovationWorkUncheckedUpdateWithoutFilesInput>
  }

  export type RenovationWorkUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    damageDepositCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isExempted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitNumber?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    damageDepositCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isExempted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogCreateManyReporterInput = {
    id?: string
    reportedAt: Date | string
    notes: string
    isNothingToReport?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatrolLogUpdateWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PatrolLogImageUpdateManyWithoutPatrolLogNestedInput
  }

  export type PatrolLogUncheckedUpdateWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PatrolLogImageUncheckedUpdateManyWithoutPatrolLogNestedInput
  }

  export type PatrolLogUncheckedUpdateManyWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    isNothingToReport?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViolationCreateManyPermitInput = {
    id?: string
    plateNumber: string
    vehicleMake: string
    vehicleColor?: string | null
    stallNumber?: string | null
    photoUrl?: string | null
    violationType: string
    notes?: string | null
    issuedAt?: Date | string
    noticeIssued?: boolean
  }

  export type ViolationUpdateWithoutPermitInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    letter?: ViolationLetterUpdateOneWithoutViolationNestedInput
    inspections?: ParkingInspectionUpdateManyWithoutViolationNestedInput
  }

  export type ViolationUncheckedUpdateWithoutPermitInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
    letter?: ViolationLetterUncheckedUpdateOneWithoutViolationNestedInput
    inspections?: ParkingInspectionUncheckedUpdateManyWithoutViolationNestedInput
  }

  export type ViolationUncheckedUpdateManyWithoutPermitInput = {
    id?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: NullableStringFieldUpdateOperationsInput | string | null
    stallNumber?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    violationType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noticeIssued?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParkingInspectionCreateManyViolationInput = {
    id?: string
    inspectorId: string
    inspectedAt?: Date | string
    plateNumber: string
    vehicleMake: string
    vehicleColor: string
    stallNumber: string
    photoUrl?: string | null
    notes?: string | null
  }

  export type ParkingInspectionUpdateWithoutViolationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingInspectionUncheckedUpdateWithoutViolationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingInspectionUncheckedUpdateManyWithoutViolationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inspectorId?: StringFieldUpdateOperationsInput | string
    inspectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    vehicleMake?: StringFieldUpdateOperationsInput | string
    vehicleColor?: StringFieldUpdateOperationsInput | string
    stallNumber?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatrolLogImageCreateManyPatrolLogInput = {
    id?: string
    url: string
    createdAt?: Date | string
  }

  export type PatrolLogImageUpdateWithoutPatrolLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogImageUncheckedUpdateWithoutPatrolLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatrolLogImageUncheckedUpdateManyWithoutPatrolLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileCreateManyRenovationWorkInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
  }

  export type RenovationWorkFileUpdateWithoutRenovationWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileUncheckedUpdateWithoutRenovationWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenovationWorkFileUncheckedUpdateManyWithoutRenovationWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisitorParkingRequestCountOutputTypeDefaultArgs instead
     */
    export type VisitorParkingRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisitorParkingRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViolationCountOutputTypeDefaultArgs instead
     */
    export type ViolationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViolationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatrolLogCountOutputTypeDefaultArgs instead
     */
    export type PatrolLogCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatrolLogCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RenovationWorkCountOutputTypeDefaultArgs instead
     */
    export type RenovationWorkCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RenovationWorkCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisitorParkingRequestDefaultArgs instead
     */
    export type VisitorParkingRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisitorParkingRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViolationDefaultArgs instead
     */
    export type ViolationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViolationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViolationLetterDefaultArgs instead
     */
    export type ViolationLetterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViolationLetterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParkingInspectionDefaultArgs instead
     */
    export type ParkingInspectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingInspectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SettingDefaultArgs instead
     */
    export type SettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ElevatorBookingDefaultArgs instead
     */
    export type ElevatorBookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ElevatorBookingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StorageUnitDefaultArgs instead
     */
    export type StorageUnitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StorageUnitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StorageWaitlistEntryDefaultArgs instead
     */
    export type StorageWaitlistEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StorageWaitlistEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatrolLogDefaultArgs instead
     */
    export type PatrolLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatrolLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatrolLogImageDefaultArgs instead
     */
    export type PatrolLogImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatrolLogImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RenovationWorkDefaultArgs instead
     */
    export type RenovationWorkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RenovationWorkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RenovationWorkFileDefaultArgs instead
     */
    export type RenovationWorkFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RenovationWorkFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegisteredVehicleDefaultArgs instead
     */
    export type RegisteredVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegisteredVehicleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}